#+title: Doom Emacs Configuration
#+author: Tom Pollak
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args:elisp :exports code
#+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle no :results silent :eval no-export
#+embed: LICENSE :description MIT licence file
#+options: coverpage yes
#+startup: fold

* Intro

All based off of [[https://github.com/tecosaur/emacs-config][tecosaurs]] fab config.

* Basic config
Runs faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).

#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src shell :exports none :comments no :tangle-mode (identity #o755)
#!/usr/bin/env bash
#+end_src

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Tom Pollak"
      user-mail-address "tompollak1000@gmail.com")
#+end_src

* Better defaults
** Simple settings
Some basic setting based off of [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#use-better-defaults][angrybacon/dotemacs]]

#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t ; take new window space from all other windows (not just current)
 x-stretch-cursor t)         ; stretch cursor to glyph width

(setq max-lisp-eval-depth 10000)

(setq undo-limit 80000000
      evil-want-fine-undo t  ; by default while in insert all changes are one big blob. Be more granular
      auto-save-default t
      truncate-string-ellipsis "â€¦"
      password-cache-expiry nil
      ;; scroll-preserve-screen-position 'always
      scroll-margin 2
      display-line-numbers-type 'relative)

(global-subword-mode 1) ; Iterate through CamelCase words
#+end_src

** Frame sizing
Default window size

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 35))
(add-to-list 'default-frame-alist '(width . 110))
#+end_src

** Auto-customisations
By default changes made are added to =init.el=. We can use a separate file =config.el=

#+begin_src emacs-lisp
;; (setq-default custom-file (expand-file-name "config.el" doom-private-dir))
;; (when (file-exists-p custom-file)
;;   (load custom-file))
#+end_src

** Splitting the window
By default open buffers in new split

Enter new window
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src


Pull up the buffer prompt
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

** Better mouse support
#+begin_src emacs-lisp
;; Mouse buttons
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src

** Set command complete shorter
#+begin_src emacs-lisp
;; Python black formatting
(setq which-key-idle-delay 0.4)
#+end_src

#+begin_src emacs-lisp
(setq eros-eval-result-prefix "âŸ¹ ")
#+end_src

** Set autocomplete in text & markdown
#+begin_src emacs-lisp
;; set autocomplete in text & markdown
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))
#+end_src

** Twitter emojis
Better in every way ::happy::

#+begin_src emacs-lisp
;; Twitter emojis ðŸ˜€
(setq emojify-emoji-set "twemoji-v2")
#+end_src

#+begin_src emacs-lisp
;; %s/.../.../g
(after! evil (setq evil-ex-substitute-global t))
#+end_src

#+begin_src emacs-lisp
;; Nested snippets
(setq yas-triggers-in-field t)
#+end_src

** Allow babel execution in CLI actions
Make sure Org dosen't try to confirm that I want evaluation in =doom sync=

#+begin_src emacs-lisp :tangle "cli.el" :comments no
;;; cli.el -*- lexical-binding: t; -*-
(setq org-confirm-babel-evaluate nil)

(defun doom-shut-up-a (orig-fn &rest args)
  (quiet! (apply orig-fn args)))

(advice-add 'org-babel-execute-src-block :around #'doom-shut-up-a)
#+end_src

** Mix in snippets with LSP completions
With LSP enabled, snippets are moved to the bottom of the completion mode, mixes em up

#+begin_src emacs-lisp
(setq +lsp-company-backends '(:separate company-yasnippet company-capf))
#+end_src
** High contrast line number
#+begin_src emacs-lisp
(custom-set-faces
    '(line-number ((t (:foreground "orange"))))
)

#+end_src
* Doom configuration
** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-molokai)
#+end_src

** Modeline
*** Theme
Change non-saved file to orange

#+begin_src emacs-lisp
(remove-hook 'window-setup-hook #'doom-init-theme-h)
(add-hook 'after-init-hook #'doom-init-theme-h 'append)
(delq! t custom-theme-load-path)

;; Set red text to orange
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src
*** PDF Modeline
#+begin_quote
From the =:air modeline= module.
#+end_quote


First up I'm going to want a segment for just the buffer file name, and a PDF
icon. Then we'll redefine two functions used to generate the modeline.

#+begin_src emacs-lisp
(after! doom-modeline
  (doom-modeline-def-segment buffer-name
    "Display the current buffer's name, without any other information."
    (concat
     (doom-modeline-spc)
     (doom-modeline--buffer-name)))

  (doom-modeline-def-segment pdf-icon
    "PDF icon from all-the-icons."
    (concat
     (doom-modeline-spc)
     (doom-modeline-icon 'octicon "file-pdf" nil nil
                         :face (if (doom-modeline--active)
                                   'all-the-icons-red
                                 'mode-line-inactive)
                         :v-adjust 0.02)))

  (defun doom-modeline-update-pdf-pages ()
    "Update PDF pages."
    (setq doom-modeline--pdf-pages
          (let ((current-page-str (number-to-string (eval `(pdf-view-current-page))))
                (total-page-str (number-to-string (pdf-cache-number-of-pages))))
            (concat
             (propertize
              (concat (make-string (- (length total-page-str) (length current-page-str)) ? )
                      " P" current-page-str)
              'face 'mode-line)
             (propertize (concat "/" total-page-str) 'face 'doom-modeline-buffer-minor-mode)))))

  (doom-modeline-def-segment pdf-pages
    "Display PDF pages."
    (if (doom-modeline--active) doom-modeline--pdf-pages
      (propertize doom-modeline--pdf-pages 'face 'mode-line-inactive)))

  (doom-modeline-def-modeline 'pdf
    '(bar window-number pdf-pages pdf-icon buffer-name)
    '(misc-info matches major-mode process vcs)))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "banner.png" doom-private-dir))

#+end_src
** LSP mode
#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.Desktop\\'")
  ;; or
  (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\.my-files\\'"))

#+end_src
* Visual settings
** Font face
Uses JetBrains Mono need to try out some other font soon

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 14)
      doom-big-font (font-spec :family "FiraCode Nerd Font Mono" :size 18)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 14)
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
#+end_src

Add a check to make sure we're told if the system dosen't have any of those fonts.

#+name: detect-missing-fonts
#+begin_src emacs-lisp :tangle no
(defvar required-fonts '("FiraCode Nerd Font Mono" "Overpass" "JuliaMono" "IBM Plex Mono" "Merriweather" "Alegreya"))

(defvar available-fonts
  (delete-dups (or (font-family-list)
                   (split-string (shell-command-to-string "fc-list : family")
                                 "[,\n]"))))

(defvar missing-fonts
  (delq nil (mapcar
             (lambda (font)
               (unless (delq nil (mapcar (lambda (f)
                                           (string-match-p (format "^%s$" font) f))
                                         available-fonts))
                 font))
             required-fonts)))

(if missing-fonts
    (pp-to-string
     `(unless noninteractive
        (add-hook! 'doom-init-ui-hook
          (run-at-time nil nil
                       (lambda ()
                         (message "%s missing the following fonts: %s"
                                  (propertize "Warning!" 'face '(bold warning))
                                  (mapconcat (lambda (font)
                                               (propertize font 'face 'font-lock-variable-name-face))
                                             ',missing-fonts
                                             ", "))
                         (sleep-for 0.5))))))
  ";; No missing fonts detected")
  #+end_src

  #+begin_src emacs-lisp :noweb no-export
  <<detect-missing-fonts()>>
  #+end_src


** Window default name
  #+begin_src emacs-lisp
(setq doom-fallback-buffer-name "â–º Doom"
      +doom-dashboard-name "â–º Doom")

#+end_src

* Packages
** Treesitter
#+begin_src emacs-lisp :tangle packages.el
(package! tree-sitter)
(package! tree-sitter-langs)
#+end_src

#+begin_src emacs-lisp
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

** Python
*** Linting
#+begin_src emacs-lisp :tangle packages.el
(package! lsp-pyright)
#+end_src

#+begin_src emacs-lisp
(setq flycheck-python-pylint-executable "pylint")
(use-package! lsp-pyright
  :config
  (setq lsp-clients-python-command "pyright")
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))
#+end_src
*** Formatting
#+begin_src emacs-lisp :tangle packages.el
(package! python-black)
#+end_src

#+begin_src emacs-lisp
(use-package! python-black
  :demand t
  :after python)
(add-hook! 'python-mode-hook #'python-black-on-save-mode)

(map! :leader :desc "Blacken Buffer" "m b b" #'python-black-buffer)

(setq +python-ipython-repl-args '("-i" "--simple-prompt" "--no-color-info"))
(setq +python-jupyter-repl-args '("--simple-prompt"))
#+end_src

*** Elpy
#+begin_src emacs-lisp :tangle packages.el
(package! elpy)
#+end_src

#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+end_src

** Make manual pages look nice
#+begin_src emacs-lisp :tangle packages.el
(package! info-colors :pin "47ee73cc19b1049eef32c9f3e264ea7ef2aaf8a5")
#+end_src

#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src

** Auto activating snippets
Sometimes pressing =tab= is just too much.

#+begin_src emacs-lisp :tangle packages.el
(package! aas :recipe (:host github :repo "ymarco/auto-activating-snippets")
  :pin "1699bec4d244a1f62af29fe4eb8b79b6d2fccf7d")
#+end_src

#+begin_src emacs-lisp
(use-package! aas
  :commands aas-mode)
#+end_src

** Very large files
Loads large files in chunks, allowing one to open ridiculously large files

#+begin_src emacs-lisp :tangle packages.el
;; (package! vlf :recipe (:host github :repo "m00natic/vlfi" :files ("*.el"))
;;   :pin "cc02f2533782d6b9b628cec7e2dcf25b2d05a27c" :disable t)
#+end_src

To make VLF available without delaying startup, we'll just load it in quiet moments.
#+begin_src emacs-lisp
;; (use-package! vlf-setup
;;   :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+end_src

** Ispell
*** Downloading dictionaries
Let's get a nice big dictionary from [[http://app.aspell.net/create][SCOWL Custom List/Dictionary Creator]] with
the following configuration
- size :: 80 (huge)
- spellings :: British(-ise) and Australian
- spelling variants level :: 0
- diacritics :: keep
- extra lists :: hacker, roman numerals

**** Hunspell
#+begin_src shell :tangle (if (file-exists-p "/usr/share/myspell/en-custom.dic") "no" "setup.sh")
cd /tmp
curl -o "hunspell-en-custom.zip" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=hunspell'
unzip "hunspell-en-custom.zip"

sudo chown root:root en-custom.*
sudo mv en-custom.{aff,dic} /usr/share/myspell/
#+end_src
**** Aspell
#+begin_src shell :tangle (if (file-expand-wildcards "/usr/lib64/aspell*/en-custom.multi") "no" "setup.sh")
cd /tmp
curl -o "aspell6-en-custom.tar.bz2" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=aspell'
tar -xjf "aspell6-en-custom.tar.bz2"

cd aspell6-en-custom
./configure && make && sudo make install
#+end_src
*** Configuration
#+begin_src emacs-lisp
(setq ispell-dictionary "en-custom")
#+end_src
Oh, and by the way, if ~company-ispell-dictionary~ is ~nil~, then
~ispell-complete-word-dict~ is used instead, which once again when ~nil~ is
~ispell-alternate-dictionary~, which at the moment maps to a plaintext version of
the above.

It seems reasonable to want to keep an eye on my personal dict, let's have it
nearby (also means that if I change the 'main' dictionary I keep my addition).

** Haskell
*** Stylish
#+begin_src emacs-lisp
(setq haskell-stylish-on-save t)
#+end_src

** Parinfer
#+begin_src emacs-lisp
(use-package parinfer-rust-mode
  :hook emacs-lisp-mode
  :init)
(setq parinfer-rust-auto-download t)
#+end_src
** Key-chord
#+begin_src emacs-lisp :tangle packages.el
(package! key-chord)
#+end_src

# #+begin_src emacs-lisp
# (use-package! key-chord)
# (key-chord t)
# (key-chord-define-global "jk" 'evil-normal-state)
# #+end_src
* Org
#+begin_src emacs-lisp
(setq org-directory "~/org/") ; let's put files here
#+end_src

:DOC-CONFIG:
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle no :results silent :eval no-export
#+embed: LICENSE :description MIT licence file
#+options: coverpage yes
#+startup: fold
:END:

#+title: Doom Emacs Configuration
#+author: Tom Pollak

* General config
Runs faster with lexical binding

#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle init.el :comments no
;;; init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp
(setq user-full-name "Tom Pollak"
      user-mail-address "tompollak1000@gmail.com")
#+end_src
* Better defaults
** Simple settings
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t ; take new window space from all other windows (not just current)
 x-stretch-cursor t)         ; stretch cursor to glyph width

(setq max-lisp-eval-depth 10000)

(setq undo-limit 80000000
      evil-want-fine-undo t  ; by default while in insert all changes are one big blob. Be more granular
      auto-save-default t
      make-backup-files t
      truncate-string-ellipsis "â€¦"
      password-cache-expiry nil
      ;; scroll-preserve-screen-position 'always
      scroll-margin 4
      display-line-numbers-type 'relative)
#+end_src
** Auth sources
Doom configures =auth-sources= by default to include Keychain, but puts it at the beginning of the list. This causes creation of auth items to fail as MacOS Keychain does not support creation yet.

Reversed to leave =~/.authinfo.gpg= at the beginning.
#+begin_src emacs-lisp
(after! auth-source
  (setq auth-sources (nreverse auth-sources)))
#+end_src
** Frame sizing
Default window size

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 35))
(add-to-list 'default-frame-alist '(width . 110))
#+end_src
** Splitting the window
By default open buffers in new split

Enter new window
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src


Pull up the buffer prompt
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

** Better mouse support
#+begin_src emacs-lisp
;; Mouse buttons
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src

** Set command complete shorter
#+begin_src emacs-lisp
;; Python black formatting
(setq which-key-idle-delay 0.4)
#+end_src

#+begin_src emacs-lisp
(setq eros-eval-result-prefix "âŸ¹ ")
#+end_src

** Set autocomplete in text & markdown
#+begin_src emacs-lisp
;; set autocomplete in text & markdown
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))
#+end_src

** Twitter emojis
Better in every way ::happy::

#+begin_src emacs-lisp
;; Twitter emojis ðŸ˜€
(setq emojify-emoji-set "twemoji-v2")
#+end_src

#+begin_src emacs-lisp
;; %s/.../.../g
(after! evil (setq evil-ex-substitute-global t))
#+end_src

#+begin_src emacs-lisp
;; Nested snippets
(setq yas-triggers-in-field t)
#+end_src

** Allow babel execution in CLI actions
Make sure Org dosen't try to confirm that I want evaluation in =doom sync=

#+begin_src emacs-lisp :tangle "cli.el" :comments no
;;; cli.el -*- lexical-binding: t; -*-
(setq org-confirm-babel-evaluate nil)

(defun doom-shut-up-a (orig-fn &rest args)
  (quiet! (apply orig-fn args)))

(advice-add 'org-babel-execute-src-block :around #'doom-shut-up-a)
#+end_src

** Mix in snippets with LSP completions
With LSP enabled, snippets are moved to the bottom of the completion mode, mixes em up

#+begin_src emacs-lisp
(setq +lsp-company-backends '(:separate company-yasnippet company-capf))
#+end_src
** High contrast line number
#+begin_src emacs-lisp
(custom-set-faces
    '(line-number ((t (:foreground "orange"))))
)

#+end_src
* Doom configuration
** Doom modules
#+begin_src emacs-lisp :tangle init.el
;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view its documentation, and 'gd' to browse its directory.

(doom! :completion
       (company
        +childframe)                   ; the ultimate code completion backend
       (vertico + icons)               ; the search engine of the future

       :ui
       ;;deft                          ; notational velocity for Emacs
       doom                            ; what makes DOOM look the way it does
       doom-dashboard                  ; a nifty splash screen for Emacs
       doom-quit                       ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)                ; ðŸ™‚
       hl-todo                         ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides                 ; highlighted indent columns, reeaal slow
       (ligatures +extra)             ; ligatures and symbols to make your code pretty again
       ;;minimap                       ; show a map of the code on the side
       modeline                        ; snazzy, Atom-inspired modeline, plus API
       nav-flash                       ; blink cursor line after big motions
       ;;neotree                       ; a project drawer, like NERDTree for vim
       ophints                         ; highlight the region an operation acts on
       (popup
        +defaults)                     ; tame sudden yet inevitable temporary windows
       ;;tabs                          ; a tab bar for Emacs
       treemacs                        ; a project drawer, like neotree but cooler
       ;;unicode                       ; extended unicode support for various languages
       vc-gutter                       ; vcs diff in the fringe
       vi-tilde-fringe                 ; fringe tildes to mark beyond EOB
       (window-select +numbers)        ; visually switch windows
       workspaces                      ; tab emulation, persistence & separate workspaces
       zen                             ; distraction-free coding or writing

       :editor
       (evil +everywhere)              ; come to the dark side, we have cookies
       file-templates                  ; auto-snippets for empty files
       fold                            ; (nigh) universal code folding
       (format +onsave)                ; automated prettiness
       ;;god                           ; run Emacs commands without modifier keys
       lispy                           ; vim for lisp, for people who don't like vim
       multiple-cursors                ; editing in many places at once
       ;;objed                         ; text object editing for the innocent
       ;; parinfer                        ; turn lisp into python, sort of
       rotate-text                     ; cycle region at point between text candidates
       snippets                        ; my elves. They type so I don't have to
       ;;word-wrap                     ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)                  ; making dired pretty [functional]
       electric                        ; smarter, keyword-based electric-indent
       (ibuffer +icons)                ; interactive buffer management
       undo                            ; persistent, smarter undo for your inevitable mistakes
       vc                              ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell                        ; the elisp shell that works everywhere
       ;;shell                         ; simple shell REPL for Emacs
       ;;term                          ; basic terminal emulator for Emacs
       vterm                           ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe)                          ; tasing you for every semicolon you forget
       (:if (executable-find "aspell") spell) ; tasing you for misspelling mispelling
       grammar                         ; tasing grammar mistake every you make

       :tools
       ansible
       ;;biblio                        ; Writes a PhD for you (citation needed)
       (debugger +lsp)                 ; FIXME stepping through code, to help you add bugs
       direnv
       docker
       editorconfig                    ; let someone else argue about tabs vs spaces
       ein                             ; tame Jupyter notebooks with emacs
       (eval +overlay)                 ; run code, run (also, repls)
       gist                            ; interacting with github gists
       (lookup                         ; navigate your code and its documentation
        +dictionary
        +docsets)
       lsp                             ; M-x vscode
       (magit +forge)                  ; a git porcelain for Emacs
       make                            ; run make tasks from Emacs
       ;;pass                          ; password manager for nerds
       pdf                             ; pdf enhancements
       ;;prodigy                       ; FIXME managing external services & code builders
       rgb                             ; creating color strings
       ;;taskrunner                    ; taskrunner for all your projects
       ;;terraform                     ; infrastructure as code
       tmux                            ; an API for interacting with tmux
       ;;upload                        ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)              ; improve compatibility with macOS
       tty                             ; improve the terminal Emacs experience

       :lang
       ;;agda                          ; types of types of types of types...
       ;;beancount                     ; mind the GAAP
       (cc +lsp)                       ; C > C++ == 1
       ;; clojure                      ; java with a lisp
       common-lisp                     ; if you've seen one lisp, you've seen them all
       ;;coq                           ; proofs-as-programs
       ;;crystal                       ; ruby at the speed of c
       ;; csharp                       ; unity, .NET, and mono shenanigans
       data                            ; config/data formats
       ;;(dart +flutter)               ; paint ui and not much else
       ;;dhall
       ;;elixir                        ; erlang done right
       ;;elm                           ; care for a cup of TEA?
       emacs-lisp                      ; drown in parentheses
       ;;erlang                        ; an elegant language for a more civilized age
       ess                             ; emacs speaks statistics
       ;;factor
       ;;faust                         ; dsp, but you get to keep your soul
       ;;fortran                       ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp                        ; ML stands for Microsoft's Language
       ;;fstar                         ; (dependent) types and (monadic) effects and Z3
       ;;gdscript                      ; the language you waited for
       ;;(go +lsp)                     ; the hipster dialect
       (haskell +lsp)                ; a language that's lazier than I am
       ;;hy                            ; readability of scheme w/ speed of python
       ;;idris                         ; a language you can depend on
       json                            ; At least it ain't XML
       (java +meghanada)               ; the poster child for carpal tunnel syndrome
       (javascript +lsp)               ; all(hope(abandon(ye(who(enter(here))))))
       julia                           ; a better, faster MATLAB
       ;;kotlin                        ; a better, slicker Java(Script)
       (latex                          ; writing papers in Emacs has never been so fun
        +latexmk
        +cdlatex
        +fold)
       ;;lean                          ; for folks with too much to prove
       ;;ledger                        ; be audit you can be
       lua                             ; one-based indices? one-based indices
       markdown                        ; writing docs for people to ignore
       ;; nim                          ; python + lisp at the speed of c
       ;;nix                           ; I hereby declare "nix geht mehr!"
       ;;ocaml                         ; an objective camel
       (org                            ; organize your plain life in plain text
        +pretty                        ; unicode symbols
        +dragndrop                     ; drag & drop files & images
        +noter                         ; PDF note taking
        +jupyter
        +pandoc
        +gnuplot
        +present
        +roam2
        +literate-enable-recompile-h)
       ;;php                           ; perl's insecure younger brother
       plantuml                        ; diagrams for confusing people more
       ;;purescript                    ; javascript, but functional
       (python +lsp +conda)          ; beautiful is better than ugly
       ;;qt                            ; the 'cutest' gui framework ever
       (racket +lsp)                   ; a DSL for DSLs
       ;;raku                          ; the artist formerly known as perl6
       ;;rest                          ; Emacs as a REST client
       ;; rst                          ; ReST in peace
       ;;(ruby +rails)                 ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)                     ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala                         ; java, but good
       ;;(scheme +guile)   ;           a fully conniving family of lisps
       sh                              ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity                      ; do you need a blockchain? No.
       ;;swift                         ; who asked for emoji variables?
       ;;terra                         ; Earth and Moon in alignment for performance.
       web                             ; the tubes
       yaml                            ; JSON, but readable
       ;;zig                           ; C, but simpler

       :email
       (:if (executable-find "mu") (mu4e +org +gmail))
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       everywhere                      ; *leave* Emacs!? You must be joking
       ;;irc                           ; how neckbeards socialize
       (rss +org)                      ; emacs as an RSS reader
       ;;twitter                       ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))


#+end_src

** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-molokai)
#+end_src

** Modeline
*** Theme
Change non-saved file to orange

#+begin_src emacs-lisp
(remove-hook 'window-setup-hook #'doom-init-theme-h)
(add-hook 'after-init-hook #'doom-init-theme-h 'append)
(delq! t custom-theme-load-path)

;; Set red text to orange
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src
*** PDF Modeline
#+begin_quote
From the =:air modeline= module.
#+end_quote


First up I'm going to want a segment for just the buffer file name, and a PDF
icon. Then we'll redefine two functions used to generate the modeline.

#+begin_src emacs-lisp
(after! doom-modeline
  (doom-modeline-def-segment buffer-name
    "Display the current buffer's name, without any other information."
    (concat
     (doom-modeline-spc)
     (doom-modeline--buffer-name)))

  (doom-modeline-def-segment pdf-icon
    "PDF icon from all-the-icons."
    (concat
     (doom-modeline-spc)
     (doom-modeline-icon 'octicon "file-pdf" nil nil
                         :face (if (doom-modeline--active)
                                   'all-the-icons-red
                                 'mode-line-inactive)
                         :v-adjust 0.02)))

  (defun doom-modeline-update-pdf-pages ()
    "Update PDF pages."
    (setq doom-modeline--pdf-pages
          (let ((current-page-str (number-to-string (eval `(pdf-view-current-page))))
                (total-page-str (number-to-string (pdf-cache-number-of-pages))))
            (concat
             (propertize
              (concat (make-string (- (length total-page-str) (length current-page-str)) ? )
                      " P" current-page-str)
              'face 'mode-line)
             (propertize (concat "/" total-page-str) 'face 'doom-modeline-buffer-minor-mode)))))

  (doom-modeline-def-segment pdf-pages
    "Display PDF pages."
    (if (doom-modeline--active) doom-modeline--pdf-pages
      (propertize doom-modeline--pdf-pages 'face 'mode-line-inactive)))

  (doom-modeline-def-modeline 'pdf
    '(bar window-number pdf-pages pdf-icon buffer-name)
    '(misc-info matches major-mode process vcs)))
#+end_src

** Dashboard
#+begin_src emacs-lisp
 (let ((alternatives '(
                      "banner.png"
                      "cute-demon.png"
                      "emacs-logo-vim.png"
                      "i-am-doom.png"
                      "trancendent-gnu.png")))

    (setq fancy-splash-image (concat doom-private-dir "splash/"
                                    (nth (random (length alternatives)) alternatives))))

#+end_src
** LSP mode
Don't watch my Desktop folder by default

#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "/Users/tom/Desktop/'")
  ;; or
  (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\.my-files\\'"))

#+end_src
* Visual settings
** Font face
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 14)
      doom-big-font (font-spec :family "FiraCode Nerd Font Mono" :size 18)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 14)
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
#+end_src

Add a check to make sure we're told if the system dosen't have any of those fonts.

#+name: detect-missing-fonts
#+begin_src emacs-lisp :tangle no
(defvar required-fonts '("FiraCode Nerd Font Mono" "Overpass" "JuliaMono" "IBM Plex Mono"))

(defvar available-fonts
  (delete-dups (or (font-family-list)
                   (split-string (shell-command-to-string "fc-list : family")
                                 "[,\n]"))))

(defvar missing-fonts
  (delq nil (mapcar
             (lambda (font)
               (unless (delq nil (mapcar (lambda (f)
                                           (string-match-p (format "^%s$" font) f))
                                         available-fonts))
                 font))
             required-fonts)))

(if missing-fonts
    (pp-to-string
     `(unless noninteractive
        (add-hook! 'doom-init-ui-hook
          (run-at-time nil nil
                       (lambda ()
                         (message "%s missing the following fonts: %s"
                                  (propertize "Warning!" 'face '(bold warning))
                                  (mapconcat (lambda (font)
                                               (propertize font 'face 'font-lock-variable-name-face))
                                             ',missing-fonts
                                             ", "))
                         (sleep-for 0.5))))))
  ";; No missing fonts detected")
  #+end_src

  #+begin_src emacs-lisp :noweb no-export
  <<detect-missing-fonts()>>
  #+end_src

** Window default name
  #+begin_src emacs-lisp
(setq doom-fallback-buffer-name "â–º Doom"
      +doom-dashboard-name "â–º Doom")

#+end_src

** Disabling some ligatures
#+begin_src emacs-lisp
(plist-put! +ligatures-extra-symbols
  :and           nil
  :or            nil
  :for           nil
  :not           nil
  :true          nil
  :false         nil
  :int           nil
  :float         nil
  :str           nil
  :bool          nil
  :list          nil
)

(let ((ligatures-to-disable '(:true :false :int :float :str :bool :list :and :or :for :not)))
  (dolist (sym ligatures-to-disable)
    (plist-put! +ligatures-extra-symbols sym nil)))
#+end_src
** Matching paren
#+begin_src emacs-lisp


#+end_src
* Packages
** Treesitter
#+begin_src emacs-lisp :tangle packages.el
(package! tree-sitter)
(package! tree-sitter-langs)
#+end_src

#+begin_src emacs-lisp
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

** Python
*** Formatting
#+begin_src emacs-lisp :tangle packages.el
(package! python-black)
#+end_src

#+begin_src emacs-lisp
(use-package! python-black
  :demand t
  :after python)
(add-hook! 'python-mode-hook #'python-black-on-save-mode)

(map! :leader :desc "Blacken Buffer" "m b b" #'python-black-buffer)

(setq +python-ipython-repl-args '("-i" "--simple-prompt" "--no-color-info"))
(setq +python-jupyter-repl-args '("--simple-prompt"))
#+end_src

** Make manual pages look nice
#+begin_src emacs-lisp :tangle packages.el
(package! info-colors :pin "47ee73cc19b1049eef32c9f3e264ea7ef2aaf8a5")
#+end_src

#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src

** Auto activating snippets
Sometimes pressing =tab= is just too much.

#+begin_src emacs-lisp :tangle packages.el
(package! aas :recipe (:host github :repo "ymarco/auto-activating-snippets")
  :pin "1699bec4d244a1f62af29fe4eb8b79b6d2fccf7d")
#+end_src

#+begin_src emacs-lisp
(use-package! aas
  :commands aas-mode)
#+end_src

** Very large files
Loads large files in chunks, allowing one to open ridiculously large files

#+begin_src emacs-lisp :tangle packages.el
;; (package! vlf :recipe (:host github :repo "m00natic/vlfi" :files ("*.el"))
;;   :pin "cc02f2533782d6b9b628cec7e2dcf25b2d05a27c" :disable t)
#+end_src

To make VLF available without delaying startup, we'll just load it in quiet moments.
#+begin_src emacs-lisp
;; (use-package! vlf-setup
;;   :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+end_src

** Ispell
*** Downloading dictionaries
Let's get a nice big dictionary from [[http://app.aspell.net/create][SCOWL Custom List/Dictionary Creator]] with
the following configuration
- size :: 80 (huge)
- spellings :: British(-ise) and Australian
- spelling variants level :: 0
- diacritics :: keep
- extra lists :: hacker, roman numerals

**** Hunspell
#+begin_src shell :tangle (if (file-exists-p "/usr/share/myspell/en-custom.dic") "no" "setup.sh")
cd /tmp
curl -o "hunspell-en-custom.zip" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=hunspell'
unzip "hunspell-en-custom.zip"

sudo chown root:root en-custom.*
sudo mv en-custom.{aff,dic} /usr/share/myspell/
#+end_src
**** Aspell
#+begin_src shell :tangle (if (file-expand-wildcards "/usr/lib64/aspell*/en-custom.multi") "no" "setup.sh")
cd /tmp
curl -o "aspell6-en-custom.tar.bz2" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=aspell'
tar -xjf "aspell6-en-custom.tar.bz2"

cd aspell6-en-custom
./configure && make && sudo make install
#+end_src
*** Configuration
#+begin_src emacs-lisp
(setq ispell-dictionary "en-custom")
#+end_src
Oh, and by the way, if ~company-ispell-dictionary~ is ~nil~, then
~ispell-complete-word-dict~ is used instead, which once again when ~nil~ is
~ispell-alternate-dictionary~, which at the moment maps to a plaintext version of
the above.

It seems reasonable to want to keep an eye on my personal dict, let's have it
nearby (also means that if I change the 'main' dictionary I keep my addition).

** Haskell
*** Stylish
#+begin_src emacs-lisp
(setq haskell-stylish-on-save t)
(setq haskell-mode-stylish-haskell-path "brittany")
#+end_src

** Undo tree
#+begin_src emacs-lisp
(use-package! undo-tree
  :init
  (setq undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t)
  :config
  ;; stolen from layers/+spacemacs/spacemacs-editing/package.el
  (progn
    ;; restore diff window after quit.  TODO fix upstream
    (defun my/undo-tree-restore-default ()
      (setq undo-tree-visualizer-diff t))
    (advice-add 'undo-tree-visualizer-quit :after #'my/undo-tree-restore-default))
  (global-undo-tree-mode 1))

#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! undo-tree)
#+end_src
** Jupyter
#+begin_src emacs-lisp
(use-package! jupyter
  :init
  (setq jupyter-eval-use-overlays t)

  (map!
   :map org-mode-map
   :localleader
   (:desc "Jupyter Org Hydra"       "j" #'jupyter-org-hydra/body))

  (defun my/insert-python-src-block ()
    (interactive)
    (jupyter-org-insert-src-block t current-prefix-arg))

  (setq my/jupyter-enable-completions nil)

  ;; (key-chord-define-global "jq" #'my/insert-python-src-block)
  (map!
   :map python-mode-map
   :localleader
   (:prefix ("j" . "jupyter")
    :desc "Run REPL"         "o" #'jupyter-run-repl
    :desc "Eval function"    "f" #'jupyter-eval-defun
    :desc "Eval buffer"      "b" #'jupyter-eval-buffer
    :desc "Eval region"      "r" #'jupyter-eval-region
    :desc "Restart REPL"     "R" #'jupyter-repl-restart-kernel
    :desc "Interrupt REPL"   "i" #'jupyter-repl-interrup-kernel
    :desc "Scratch buffer"   "s" #'jupyter-repl-scratch-buffer
    :desc "Remove overlays"  "O" #'jupyter-eval-remove-overlays
    :desc "Eval string"      "w" #'jupyter-eval-string
    :desc "Inspect at point" "d" #'jupyter-inspect-at-point)))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! jupyter)
#+end_src
** Flycheck
#+begin_src emacs-lisp
;; (setq flycheck-standard-error-navigation nil)
(defun flycheck-or-norm-next-error (&optional n reset)
  (interactive "P")
  (if flycheck-mode
      (flycheck-next-error n reset)
    (next-error n reset)))
(defun flycheck-or-norm-previous-error (&optional n)
  (interactive "P")
  (if flycheck-mode
      (flycheck-previous-error n)
    (previous-error n)))

(define-key evil-normal-state-map "ge" 'flycheck-or-norm-next-error)
(define-key evil-normal-state-map "gE" 'flycheck-or-norm-previous-error)

;; Optional: ensure flycheck cycles, both when going backward and forward.
;; Tries to handle arguments correctly.
;; Since flycheck-previous-error is written in terms of flycheck-next-error,
;; advising the latter is enough.
(defun flycheck-next-error-loop-advice (orig-fun &optional n reset)
  ; (message "flycheck-next-error called with args %S %S" n reset)
  (condition-case err
      (apply orig-fun (list n reset))
    ((user-error)
     (let ((error-count (length flycheck-current-errors)))
       (if (and
            (> error-count 0)                   ; There are errors so we can cycle.
            (equal (error-message-string err) "No more Flycheck errors"))
           ;; We need to cycle.
           (let* ((req-n (if (numberp n) n 1)) ; Requested displacement.
                  ; An universal argument is taken as reset, so shouldn't fail.
                  (curr-pos (if (> req-n 0) (- error-count 1) 0)) ; 0-indexed.
                  (next-pos (mod (+ curr-pos req-n) error-count))) ; next-pos must be 1-indexed
             ; (message "error-count %S; req-n %S; curr-pos %S; next-pos %S" error-count req-n curr-pos next-pos)
             ; orig-fun is flycheck-next-error (but without advise)
             ; Argument to flycheck-next-error must be 1-based.
             (apply orig-fun (list (+ 1 next-pos) 'reset)))
         (signal (car err) (cdr err)))))))

(advice-add 'flycheck-next-error :around #'flycheck-next-error-loop-advice)


;; The following might be needed to ensure flycheck is loaded.
;; Hooking is required if flycheck is installed as an ELPA package (from any repo).
;; If you use ELPA, you might want to merge this with any existing hook you might have.
(add-hook 'after-init-hook
          #'(lambda ()
              (after-packages-loaded-hook)))

(defun after-packages-loaded-hook ()
  (require 'flycheck))


#+end_src
* Org
#+begin_src emacs-lisp
(setq org-directory "~/org/") ; let's put files here
#+end_src

/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var child_process = require('child_process');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * Use as compareFn in sort
 */
const sorter = (toOrdered, order = "asc") => {
    return (a, b) => order === "asc"
        ? toOrdered(a) > toOrdered(b)
            ? 1
            : toOrdered(b) > toOrdered(a)
                ? -1
                : 0
        : toOrdered(a) < toOrdered(b)
            ? 1
            : toOrdered(b) < toOrdered(a)
                ? -1
                : 0;
};
const keyBy = (values, toKey) => values.reduce((prev, cur, _1, _2, k = toKey(cur)) => ((prev[k] = cur), prev), {});
const count = (values) => {
    const ret = {};
    for (const value of values) {
        if (ret[value]) {
            ret[value]++;
        }
        else {
            ret[value] = 1;
        }
    }
    return ret;
};
function flatten(matrix) {
    return matrix.reduce((a, c) => [...a, ...c], []);
}
function uniq(values) {
    return [...new Set(values)];
}
function uniqFlatMap(values, mapper) {
    return uniq(flatten(values.map(mapper)));
}
const minBy = (collection, toNum) => {
    const select = (a, b) => (toNum(a) <= toNum(b) ? a : b);
    return collection.reduce(select);
};
function includeItems(items, patterns, toPath) {
    return patterns.length === 0
        ? items
        : items.filter((x) => patterns.some((p) => toPath(x).startsWith(p)));
}
function excludeItems(items, patterns, toPath) {
    return patterns.length === 0
        ? items
        : items.filter((x) => !patterns.some((p) => toPath(x).startsWith(p)));
}
function mirrorMap(collection, toValue) {
    return collection.reduce((p, c) => (Object.assign(Object.assign({}, p), { [toValue(c)]: toValue(c) })), {});
}

function basename(path, ext) {
    var _a, _b;
    const name = (_b = (_a = path.match(/.+[\\/]([^\\/]+)[\\/]?$/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : path;
    return ext && name.endsWith(ext) ? name.replace(ext, "") : name;
}
function extname(path) {
    const ext = basename(path).split(".").slice(1).pop();
    return ext ? `.${ext}` : "";
}
function dirname(path) {
    var _a, _b;
    return (_b = (_a = path.match(/(.+)[\\/].+$/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : ".";
}

class AppHelper {
    constructor(app) {
        this.unsafeApp = app;
    }
    getActiveFile() {
        return this.unsafeApp.workspace.getActiveFile();
    }
    getMarkdownViewInActiveLeaf() {
        if (!this.unsafeApp.workspace.getActiveViewOfType(obsidian.MarkdownView)) {
            return null;
        }
        return this.unsafeApp.workspace.activeLeaf.view;
    }
    getCurrentEditor() {
        var _a, _b;
        return (_b = (_a = this.getMarkdownViewInActiveLeaf()) === null || _a === void 0 ? void 0 : _a.editor) !== null && _b !== void 0 ? _b : null;
    }
    getCurrentOffset() {
        var _a;
        const editor = this.getCurrentEditor();
        if (!editor) {
            return null;
        }
        const cursor = (_a = this.getCurrentEditor()) === null || _a === void 0 ? void 0 : _a.getCursor();
        if (!cursor) {
            return null;
        }
        return editor.posToOffset(cursor);
    }
    getHeadersInActiveFile() {
        var _a, _b;
        const activeFile = this.getActiveFile();
        if (!activeFile) {
            return [];
        }
        return ((_b = (_a = this.unsafeApp.metadataCache.getFileCache(activeFile)) === null || _a === void 0 ? void 0 : _a.headings) !== null && _b !== void 0 ? _b : []);
    }
    getFolders() {
        return this.unsafeApp.vault
            .getAllLoadedFiles()
            .filter((x) => x instanceof obsidian.TFolder);
    }
    getLayout() {
        return this.unsafeApp.workspace.getLayout();
    }
    getLeftSideBarWidth() {
        return this.getLayout().left.collapsed ? 0 : this.getLayout().left.width;
    }
    getRightSideBarWidth() {
        return this.getLayout().right.collapsed ? 0 : this.getLayout().right.width;
    }
    findExternalLinkUrls(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield this.unsafeApp.vault.read(file);
            const matches = Array.from(content.matchAll(/https?:\/\/.+/g));
            return matches.map((x) => x[0]);
        });
    }
    findFirstLinkOffset(file, linkFile) {
        var _a, _b;
        const fileCache = this.unsafeApp.metadataCache.getFileCache(file);
        const links = (_a = fileCache === null || fileCache === void 0 ? void 0 : fileCache.links) !== null && _a !== void 0 ? _a : [];
        const embeds = (_b = fileCache === null || fileCache === void 0 ? void 0 : fileCache.embeds) !== null && _b !== void 0 ? _b : [];
        return [...links, ...embeds].find((x) => {
            var _a;
            const toLinkFilePath = (_a = this.unsafeApp.metadataCache.getFirstLinkpathDest(obsidian.getLinkpath(x.link), file.path)) === null || _a === void 0 ? void 0 : _a.path;
            return toLinkFilePath === linkFile.path;
        }).position.start.offset;
    }
    // noinspection FunctionWithMultipleLoopsJS
    createBacklinksMap() {
        const backLinksMap = {};
        for (const [filePath, linkMap] of Object.entries(this.unsafeApp.metadataCache.resolvedLinks)) {
            for (const linkPath of Object.keys(linkMap)) {
                if (!backLinksMap[linkPath]) {
                    backLinksMap[linkPath] = new Set();
                }
                backLinksMap[linkPath].add(filePath);
            }
        }
        return backLinksMap;
    }
    moveTo(to, editor) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const isToOffset = typeof to === "number";
            const activeFile = this.getActiveFile();
            const activeLeaf = this.unsafeApp.workspace.activeLeaf;
            if (!activeFile || !activeLeaf) {
                return;
            }
            const subView = (_a = this.getMarkdownViewInActiveLeaf()) === null || _a === void 0 ? void 0 : _a.currentMode;
            if (!subView) {
                return;
            }
            const targetEditor = editor !== null && editor !== void 0 ? editor : this.getCurrentEditor();
            if (!targetEditor) {
                return;
            }
            const line = isToOffset ? targetEditor.offsetToPos(to).line : to.start.line;
            targetEditor.setCursor(targetEditor.offsetToPos(isToOffset ? to : to.start.offset));
            yield activeLeaf.openFile(activeFile, {
                eState: {
                    line,
                },
                active: false,
            });
        });
    }
    getMarkdownFileByPath(path) {
        if (!path.endsWith(".md")) {
            return null;
        }
        const abstractFile = this.unsafeApp.vault.getAbstractFileByPath(path);
        if (!abstractFile) {
            return null;
        }
        return abstractFile;
    }
    openMarkdownFile(file, option = {}) {
        const opt = Object.assign({ leaf: "same" }, option);
        const openFile = (leaf) => {
            var _a;
            leaf
                .openFile(file, (_a = this.unsafeApp.workspace.activeLeaf) === null || _a === void 0 ? void 0 : _a.getViewState())
                .then(() => {
                this.unsafeApp.workspace.setActiveLeaf(leaf, true, true);
                const markdownView = this.unsafeApp.workspace.getActiveViewOfType(obsidian.MarkdownView);
                if (markdownView) {
                    if (opt.offset != null) {
                        this.moveTo(opt.offset, markdownView.editor);
                    }
                    else if (opt.line != null) {
                        const p = { line: opt.line, offset: 0, col: 0 };
                        this.moveTo({ start: p, end: p });
                    }
                }
            });
        };
        let leaf;
        switch (opt.leaf) {
            case "same":
                leaf = this.unsafeApp.workspace.getLeaf();
                openFile(leaf);
                break;
            case "new":
                leaf = this.unsafeApp.workspace.getLeaf(true);
                openFile(leaf);
                break;
            case "new-horizontal":
                leaf = this.unsafeApp.workspace.getLeaf(true, "horizontal");
                openFile(leaf);
                break;
            case "new-vertical":
                leaf = this.unsafeApp.workspace.getLeaf(true, "vertical");
                openFile(leaf);
                break;
            case "popout":
                openFile(this.unsafeApp.workspace.openPopoutLeaf());
                break;
            case "popup":
                const hoverEditorInstance = this.unsafeApp.plugins.plugins["obsidian-hover-editor"];
                if (hoverEditorInstance) {
                    leaf = hoverEditorInstance.spawnPopover(undefined, () => {
                        openFile(leaf);
                    });
                }
                else {
                    openFile(this.unsafeApp.workspace.getLeaf());
                }
                break;
        }
    }
    getStarredFilePaths() {
        return this.unsafeApp.internalPlugins.plugins.starred.instance.items.map((x) => x.path);
    }
    searchPhantomFiles() {
        return uniq(flatten(Object.values(this.unsafeApp.metadataCache.unresolvedLinks).map(Object.keys))).map((x) => this.createPhantomFile(x));
    }
    insertStringToActiveFile(str) {
        const activeMarkdownView = this.unsafeApp.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!activeMarkdownView) {
            return;
        }
        const editor = activeMarkdownView.editor;
        editor.replaceSelection(str);
    }
    insertLinkToActiveFileBy(file) {
        const activeMarkdownView = this.unsafeApp.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!activeMarkdownView) {
            return;
        }
        const linkText = this.unsafeApp.fileManager.generateMarkdownLink(file, activeMarkdownView.file.path);
        const editor = activeMarkdownView.editor;
        editor.replaceSelection(linkText);
    }
    createMarkdown(linkText) {
        return __awaiter(this, void 0, void 0, function* () {
            const linkPath = this.getPathToBeCreated(linkText);
            if (yield this.exists(linkPath)) {
                return null;
            }
            const dir = dirname(linkPath);
            if (!(yield this.exists(dir))) {
                yield this.unsafeApp.vault.createFolder(dir);
            }
            return this.unsafeApp.vault.create(linkPath, "");
        });
    }
    exists(normalizedPath) {
        return this.unsafeApp.vault.adapter.exists(normalizedPath);
    }
    isPopWindow() {
        // XXX: Hacky implementation!!
        return !fish(".modal-bg");
    }
    removeCommand(commandId) {
        this.unsafeApp.commands.removeCommand(commandId);
    }
    getCommandIds(manifestId) {
        return Object.keys(this.unsafeApp.commands.commands).filter((x) => x.startsWith(manifestId));
    }
    getPathToBeCreated(linkText) {
        var _a, _b;
        let linkPath = obsidian.getLinkpath(linkText);
        if (extname(linkPath) !== ".md") {
            linkPath += ".md";
        }
        if (linkPath.includes("/")) {
            return linkPath;
        }
        switch (this.unsafeApp.vault.config.newFileLocation) {
            case "root":
                return `/${linkPath}`;
            case "current":
                return `${(_b = (_a = this.getActiveFile()) === null || _a === void 0 ? void 0 : _a.parent.path) !== null && _b !== void 0 ? _b : ""}/${linkPath}`;
            case "folder":
                return `${this.unsafeApp.vault.config.newFileFolderPath}/${linkPath}`;
            default:
                // Normally, same as the "root"
                return `/${linkPath}`;
        }
    }
    // TODO: Use another interface instead of TFile
    createPhantomFile(linkText) {
        const linkPath = this.getPathToBeCreated(linkText);
        // @ts-ignore
        return {
            path: linkPath,
            name: basename(linkPath),
            vault: this.unsafeApp.vault,
            extension: "md",
            basename: basename(linkPath, ".md"),
            parent: {
                name: basename(dirname(linkPath)),
                path: dirname(linkPath),
                vault: this.unsafeApp.vault,
                // XXX: From here, Untrusted properties
                children: [],
                // @ts-ignore
                parent: null,
                isRoot: () => true,
            },
            stat: {
                mtime: 0,
                ctime: 0,
                size: 0,
            },
        };
    }
}

/*
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/*
Note: Customized for TypeScript
 */
const defaultDiacriticsRemovalMap = [
    {
        base: "A",
        letters: "\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F",
    },
    { base: "AA", letters: "\uA732" },
    { base: "AE", letters: "\u00C6\u01FC\u01E2" },
    { base: "AO", letters: "\uA734" },
    { base: "AU", letters: "\uA736" },
    { base: "AV", letters: "\uA738\uA73A" },
    { base: "AY", letters: "\uA73C" },
    {
        base: "B",
        letters: "\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181",
    },
    {
        base: "C",
        letters: "\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E",
    },
    {
        base: "D",
        letters: "\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779\u00D0",
    },
    { base: "DZ", letters: "\u01F1\u01C4" },
    { base: "Dz", letters: "\u01F2\u01C5" },
    {
        base: "E",
        letters: "\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E",
    },
    { base: "F", letters: "\u0046\u24BB\uFF26\u1E1E\u0191\uA77B" },
    {
        base: "G",
        letters: "\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E",
    },
    {
        base: "H",
        letters: "\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D",
    },
    {
        base: "I",
        letters: "\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197",
    },
    { base: "J", letters: "\u004A\u24BF\uFF2A\u0134\u0248" },
    {
        base: "K",
        letters: "\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2",
    },
    {
        base: "L",
        letters: "\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780",
    },
    { base: "LJ", letters: "\u01C7" },
    { base: "Lj", letters: "\u01C8" },
    { base: "M", letters: "\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C" },
    {
        base: "N",
        letters: "\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4",
    },
    { base: "NJ", letters: "\u01CA" },
    { base: "Nj", letters: "\u01CB" },
    {
        base: "O",
        letters: "\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C",
    },
    { base: "OI", letters: "\u01A2" },
    { base: "OO", letters: "\uA74E" },
    { base: "OU", letters: "\u0222" },
    { base: "OE", letters: "\u008C\u0152" },
    { base: "oe", letters: "\u009C\u0153" },
    {
        base: "P",
        letters: "\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754",
    },
    { base: "Q", letters: "\u0051\u24C6\uFF31\uA756\uA758\u024A" },
    {
        base: "R",
        letters: "\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782",
    },
    {
        base: "S",
        letters: "\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784",
    },
    {
        base: "T",
        letters: "\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786",
    },
    { base: "TZ", letters: "\uA728" },
    {
        base: "U",
        letters: "\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244",
    },
    { base: "V", letters: "\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245" },
    { base: "VY", letters: "\uA760" },
    {
        base: "W",
        letters: "\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72",
    },
    { base: "X", letters: "\u0058\u24CD\uFF38\u1E8A\u1E8C" },
    {
        base: "Y",
        letters: "\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE",
    },
    {
        base: "Z",
        letters: "\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762",
    },
    {
        base: "a",
        letters: "\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250",
    },
    { base: "aa", letters: "\uA733" },
    { base: "ae", letters: "\u00E6\u01FD\u01E3" },
    { base: "ao", letters: "\uA735" },
    { base: "au", letters: "\uA737" },
    { base: "av", letters: "\uA739\uA73B" },
    { base: "ay", letters: "\uA73D" },
    {
        base: "b",
        letters: "\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253",
    },
    {
        base: "c",
        letters: "\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184",
    },
    {
        base: "d",
        letters: "\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A",
    },
    { base: "dz", letters: "\u01F3\u01C6" },
    {
        base: "e",
        letters: "\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD",
    },
    { base: "f", letters: "\u0066\u24D5\uFF46\u1E1F\u0192\uA77C" },
    {
        base: "g",
        letters: "\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F",
    },
    {
        base: "h",
        letters: "\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265",
    },
    { base: "hv", letters: "\u0195" },
    {
        base: "i",
        letters: "\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131",
    },
    { base: "j", letters: "\u006A\u24D9\uFF4A\u0135\u01F0\u0249" },
    {
        base: "k",
        letters: "\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3",
    },
    {
        base: "l",
        letters: "\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747",
    },
    { base: "lj", letters: "\u01C9" },
    { base: "m", letters: "\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F" },
    {
        base: "n",
        letters: "\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5",
    },
    { base: "nj", letters: "\u01CC" },
    {
        base: "o",
        letters: "\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275",
    },
    { base: "oi", letters: "\u01A3" },
    { base: "ou", letters: "\u0223" },
    { base: "oo", letters: "\uA74F" },
    {
        base: "p",
        letters: "\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755",
    },
    { base: "q", letters: "\u0071\u24E0\uFF51\u024B\uA757\uA759" },
    {
        base: "r",
        letters: "\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783",
    },
    {
        base: "s",
        letters: "\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B",
    },
    {
        base: "t",
        letters: "\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787",
    },
    { base: "tz", letters: "\uA729" },
    {
        base: "u",
        letters: "\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289",
    },
    { base: "v", letters: "\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C" },
    { base: "vy", letters: "\uA761" },
    {
        base: "w",
        letters: "\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73",
    },
    { base: "x", letters: "\u0078\u24E7\uFF58\u1E8B\u1E8D" },
    {
        base: "y",
        letters: "\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF",
    },
    {
        base: "z",
        letters: "\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763",
    },
];
const diacriticsMap = {};
for (let i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
    const letters = defaultDiacriticsRemovalMap[i].letters;
    for (let j = 0; j < letters.length; j++) {
        diacriticsMap[letters[j]] = defaultDiacriticsRemovalMap[i].base;
    }
}

const regEmoji = new RegExp(/[\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF]|[\uFE0E-\uFE0F]/, "g");
function excludeSpace(text) {
    return text.replace(/ /g, "");
}
function excludeEmoji(text) {
    return text.replace(regEmoji, "");
}
function normalizeAccentsDiacritics(text) {
    // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
    return text.replace(/[^\u0000-\u007E]/g, (x) => { var _a; return (_a = diacriticsMap[x]) !== null && _a !== void 0 ? _a : x; });
}
function normalize(str, isNormalizeAccentsDiacritics) {
    const t = str.toLowerCase();
    return isNormalizeAccentsDiacritics ? normalizeAccentsDiacritics(t) : t;
}
function smartIncludes(text, query, isNormalizeAccentsDiacritics) {
    return excludeSpace(normalize(text, isNormalizeAccentsDiacritics)).includes(normalize(query, isNormalizeAccentsDiacritics));
}
function smartStartsWith(text, query, isNormalizeAccentsDiacritics) {
    return excludeSpace(excludeEmoji(normalize(text, isNormalizeAccentsDiacritics))).startsWith(normalize(query, isNormalizeAccentsDiacritics));
}
function smartEquals(text, query, isNormalizeAccentsDiacritics) {
    return (excludeSpace(excludeEmoji(normalize(text, isNormalizeAccentsDiacritics))) === normalize(query, isNormalizeAccentsDiacritics));
}
function excludeFormat(text) {
    return text
        .replace(/\[\[([^\]]+)]]/g, "$1")
        .replace(/\[([^\]]+)]\(https?[^)]+\)/g, "$1")
        .replace(/\[([^\]]+)]/g, "$1")
        .replace(/`([^`]+)`/g, "$1")
        .replace(/~~([^~]+)~~/g, "$1")
        .replace(/==([^=]+)==/g, "$1")
        .replace(/\*\*([^*]+)\*\*/g, "$1")
        .replace(/\*([^*]+)\*/g, "$1")
        .replace(/__([^_]+)__/g, "$1")
        .replace(/_([^_]+)_/g, "$1")
        .replace(/<[^>]+>([^<]+)<\/[^>]+>/g, "$1");
}
function smartLineBreakSplit(text) {
    return text
        .split("\n")
        .filter((x) => x);
}

function matchQuery$1(item, query, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics) {
    // tag
    if (searchByTags && query.startsWith("#")) {
        const tags = item.tags.filter((tag) => smartIncludes(tag.slice(1), query.slice(1), isNormalizeAccentsDiacritics));
        return {
            type: tags.length > 0 ? "tag" : "not found",
            meta: tags,
        };
    }
    const qs = query.split("/");
    const file = qs.pop();
    const includeDir = qs.every((dir) => smartIncludes(item.file.parent.path, dir, isNormalizeAccentsDiacritics));
    if (!includeDir) {
        return { type: "not found" };
    }
    if (item.tokens.some((t) => smartEquals(t, file, isNormalizeAccentsDiacritics))) {
        return { type: "word-perfect", meta: [item.file.name] };
    }
    if (smartStartsWith(item.file.name, file, isNormalizeAccentsDiacritics)) {
        return { type: "prefix-name", meta: [item.file.name] };
    }
    const prefixNameMatchedAliases = item.aliases.filter((x) => smartStartsWith(x, file, isNormalizeAccentsDiacritics));
    if (prefixNameMatchedAliases.length > 0) {
        return {
            type: "prefix-name",
            meta: prefixNameMatchedAliases,
            alias: minBy(prefixNameMatchedAliases, (x) => x.length),
        };
    }
    if (smartIncludes(item.file.name, file, isNormalizeAccentsDiacritics)) {
        return { type: "name", meta: [item.file.name] };
    }
    const nameMatchedAliases = item.aliases.filter((x) => smartIncludes(x, file, isNormalizeAccentsDiacritics));
    if (nameMatchedAliases.length > 0) {
        return {
            type: "name",
            meta: nameMatchedAliases,
            alias: minBy(nameMatchedAliases, (x) => x.length),
        };
    }
    if (smartIncludes(item.file.path, file, isNormalizeAccentsDiacritics)) {
        return { type: "directory", meta: [item.file.path] };
    }
    if (searchByHeaders) {
        const headers = item.headers.filter((header) => smartIncludes(header, query, isNormalizeAccentsDiacritics));
        if (headers.length > 0) {
            return {
                type: "header",
                meta: headers,
            };
        }
    }
    if (searchByLinks) {
        const links = item.links.filter((link) => smartIncludes(link, query, isNormalizeAccentsDiacritics));
        if (links.length > 0) {
            return {
                type: "link",
                meta: links,
            };
        }
    }
    if (searchByTags) {
        const tags = item.tags.filter((tag) => smartIncludes(tag.slice(1), query, isNormalizeAccentsDiacritics));
        if (tags.length > 0) {
            return {
                type: "tag",
                meta: tags,
            };
        }
    }
    return { type: "not found" };
}
function matchQueryAll$1(item, queries, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics) {
    return queries.map((q) => matchQuery$1(item, q, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics));
}
function stampMatchResults(item, queries, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics) {
    return Object.assign(Object.assign({}, item), { matchResults: matchQueryAll$1(item, queries, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics) });
}

const FOLDER = `<svg viewBox="0 0 100 100" class="folder" width="17" height="17"><path fill="currentColor" stroke="currentColor" d="M6.1,8c-3.3,0-6,2.7-6,6v73.8c-0.1,0.5-0.1,0.9,0.1,1.4c0.6,2.7,3,4.8,5.9,4.8h78c3,0,5.4-2.2,5.9-5.1 c0-0.1,0.1-0.2,0.1-0.4c0,0,0-0.1,0-0.1l0.1-0.3c0,0,0,0,0-0.1l9.9-53.6l0.1-0.2V34c0-3.3-2.7-6-6-6v-6c0-3.3-2.7-6-6-6H36.1 c0,0,0,0-0.1,0c-0.1,0-0.2-0.2-0.6-0.6c-0.5-0.6-1.1-1.5-1.7-2.5c-0.6-1-1.3-2.1-2.1-3C30.9,9,29.7,8,28.1,8L6.1,8z M6.1,12h22 c-0.1,0,0.1,0,0.6,0.6c0.5,0.6,1.1,1.5,1.7,2.5c0.6,1,1.3,2.1,2.1,3c0.8,0.9,1.9,1.9,3.6,1.9h52c1.1,0,2,0.9,2,2v6h-74 c-3.1,0-5.7,2.5-5.9,5.6h-0.1L10.1,34l-6,32.4V14C4.1,12.9,4.9,12,6.1,12z M16.1,32h78c1.1,0,2,0.9,2,2l-9.8,53.1l-0.1,0.1 c0,0.1,0,0.2-0.1,0.2c0,0.1,0,0.2-0.1,0.2c0,0,0,0.1,0,0.1c0,0,0,0,0,0.1c0,0.1,0,0.2-0.1,0.3c0,0.1,0,0.1,0,0.2 c0,0.1,0,0.2,0,0.2c-0.3,0.8-1,1.4-1.9,1.4h-78c-1.1,0-2-0.9-2-2L14,34.4l0.1-0.2V34C14.1,32.9,14.9,32,16.1,32L16.1,32z"></path></svg>`;
const ALIAS = `<svg viewBox="0 0 100 100" class="forward-arrow" width="16" height="16"><path fill="currentColor" stroke="currentColor" d="m9.9,89.09226c-0.03094,0 -0.05414,0 -0.08508,0c-1.06734,-0.04641 -1.91039,-0.92812 -1.89492,-1.99547c0.00774,-0.48726 1.14469,-48.13101 47.52,-49.44586l0,-13.89094c0,-0.7657 0.44086,-1.4618 1.12922,-1.78664c0.68062,-0.33258 1.5082,-0.23203 2.09601,0.2475l31.68,25.74c0.46406,0.37899 0.73476,0.9436 0.73476,1.53914c0,0.59555 -0.2707,1.16016 -0.72703,1.53914l-31.68,25.74c-0.59555,0.47953 -1.41539,0.57234 -2.10375,0.2475c-0.68836,-0.32485 -1.12922,-1.02094 -1.12922,-1.78664l0,-13.84453c-41.26289,0.75024 -43.49039,24.81961 -43.56773,25.85601c-0.06961,1.04414 -0.93586,1.84078 -1.97226,1.84078z"></path></svg>`;
const TAG = `<svg viewBox="0 0 100 100" class="hashtag" width="17" height="17"><path fill="currentColor" stroke="currentColor" d="M36,18l-1.5,16H20l-0.4,4h14.5l-2.4,26H17.2l-0.4,4h14.5L30,82h4l1.3-14h26L60,82h4l1.3-14h15.5l0.4-4H65.7l2.4-26h15.5 l0.4-4H68.5L70,18h-4l-1.5,16h-26L40,18L36,18z M38.1,38h26l-2.4,26h-26L38.1,38z"></path></svg>`;
const LINK = `<svg viewBox="0 0 100 100" class="links-going-out" width="15" height="15"><path fill="currentColor" stroke="currentColor" d="M76.4,11.7c3.7,3.8,5.6,8.9,5,14.3c-0.5,4-2.4,7.6-5.2,10.5c-2.6,2.6-6.7,6.7-9.2,9.2c-2,2-4.4,3.6-7.1,4.5 c-4.5,1.4-9,1-12.8-0.9l2.9-2.9c1.4,0.5,3,0.8,4.5,0.8c3.6,0,7-1.4,9.5-3.9l9.6-9.6c3.3-3.3,4.7-8.1,3.5-13 c-0.3-1.2-0.8-2.4-1.5-3.5C73,13,68.7,10.6,64,10.6c-3.6,0-7,1.4-9.5,3.9L45,24c-2.5,2.5-3.9,5.9-3.9,9.5c0,1.6,0.3,3.1,0.8,4.5 l-3,3c-1.1-2.3-1.7-4.8-1.7-7.5c0-0.7,0-1.4,0.1-2.1c0.5-3.8,2.2-7.4,5-10.2l9.4-9.4C54.5,9,58.2,7,62.1,6.6 C67.5,6.1,72.6,7.9,76.4,11.7L76.4,11.7z M54.4,34.7c0.3,0.7,0.1,1.6-0.4,2.1L30.9,59.9c-0.5,0.5-1.2,0.7-1.9,0.5 s-1.2-0.7-1.4-1.4s0-1.4,0.5-1.9L51.2,34c0.3-0.4,0.8-0.6,1.3-0.6C53.4,33.5,54.1,34,54.4,34.7z M35.1,44.9l-2.9,2.9 c-1.4-0.5-3-0.8-4.5-0.8c-3.6,0-7,1.4-9.5,3.9l-9.6,9.6c-3.3,3.4-4.7,8.1-3.5,13c0.3,1.2,0.8,2.4,1.5,3.5 c2.6,4.2,6.9,6.6,11.6,6.6c3.6,0,7-1.4,9.5-3.9l9.6-9.6c2.5-2.5,3.9-5.9,3.9-9.5c0-1.6-0.3-3.1-0.8-4.5l2.9-2.9 c1.1,2.3,1.7,4.8,1.7,7.5c0,3-0.8,5.9-2.2,8.5c-0.8,1-1.5,1.9-2.1,2.9c-0.3,0.3-0.5,0.6-0.8,0.8l-9.4,9.4 c-2.9,2.9-6.6,4.8-10.6,5.2c-6.2,0.6-12-1.9-15.8-6.9c-2.4-3.2-3.6-7.2-3.4-11.2c0-0.1,0-0.2,0-0.3c0.3-4.2,2-8.1,5-11.1l9.4-9.4 c2-2,4.4-3.6,7.1-4.5C26.8,42.6,31.3,43,35.1,44.9L35.1,44.9z"></path><path fill="currentColor" stroke="currentColor" d="M99.2,69.3c0-0.2,0-0.2,0-0.4c0-0.2,0-0.2,0-0.4s0-0.2-0.2-0.4c0-0.2,0-0.2-0.2-0.4l0,0l-0.2-0.2l-0.2-0.2L79.2,53 c-0.6-0.4-1.3-0.6-1.9-0.2c-0.8,0.4-1.2,1-1.2,1.7V62c-8.1,0.4-14.6,3.1-19.2,8.1c-8.5,9-7.7,22.5-7.7,23.1c0,0.2,0,0.2,0,0.4 c0,0.2,0,0.2,0,0.4s0.2,0.2,0.2,0.4l0.2,0.2c0.2,0.2,0.2,0.2,0.4,0.2l0.2,0.2c0.2,0,0.4,0,0.6,0.2H51l0,0l0,0c0,0,0,0,0.2,0 s0.2,0,0.4,0s0.2,0,0.4-0.2c0.2,0,0.2-0.2,0.4-0.2s0.2-0.2,0.4-0.2c0,0,0.2-0.2,0.2-0.4c0-0.2,0.2-0.2,0.2-0.4s0-0.2,0-0.4 c0-0.2,0-0.2,0-0.4c0-0.8,0.6-16.6,23.1-17.5v7.3c0,0.8,0.4,1.3,1,1.7c0.6,0.4,1.3,0.2,1.9-0.2l19.2-14l0.2-0.2l0.2-0.2l0,0 c0-0.2,0.2-0.2,0.2-0.4L99.2,69.3L99.2,69.3z"></path></svg>`;
const HEADER = `<svg viewBox="0 0 100 100" class="bullet-list" width="15" height="15"><path fill="currentColor" stroke="currentColor" d="M16.4,16.4c-3.5,0-6.4,2.9-6.4,6.4s2.9,6.4,6.4,6.4s6.4-2.9,6.4-6.4S19.9,16.4,16.4,16.4z M16.4,19.6 c1.8,0,3.2,1.4,3.2,3.2c0,1.8-1.4,3.2-3.2,3.2s-3.2-1.4-3.2-3.2C13.2,21,14.6,19.6,16.4,19.6z M29.2,21.2v3.2H90v-3.2H29.2z M16.4,43.6c-3.5,0-6.4,2.9-6.4,6.4s2.9,6.4,6.4,6.4s6.4-2.9,6.4-6.4S19.9,43.6,16.4,43.6z M16.4,46.8c1.8,0,3.2,1.4,3.2,3.2 s-1.4,3.2-3.2,3.2s-3.2-1.4-3.2-3.2S14.6,46.8,16.4,46.8z M29.2,48.4v3.2H90v-3.2H29.2z M16.4,70.8c-3.5,0-6.4,2.9-6.4,6.4 c0,3.5,2.9,6.4,6.4,6.4s6.4-2.9,6.4-6.4C22.8,73.7,19.9,70.8,16.4,70.8z M16.4,74c1.8,0,3.2,1.4,3.2,3.2c0,1.8-1.4,3.2-3.2,3.2 s-3.2-1.4-3.2-3.2C13.2,75.4,14.6,74,16.4,74z M29.2,75.6v3.2H90v-3.2H29.2z"></path></svg>`;
const SEARCH = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3"></path>
  <polyline points="14 2 14 8 20 8"></polyline>
  <path d="M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path>
  <path d="m9 18-1.5-1.5"></path>
</svg>`;
const FILTER = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
</svg>`;

function createItemDiv(item, aliases, options) {
    const itemDiv = createDiv({
        cls: [
            "another-quick-switcher__item",
            item.phantom ? "another-quick-switcher__phantom_item" : "",
            item.starred ? "another-quick-switcher__starred_item" : "",
            options.hideGutterIcons ? "another-quick-switcher__gutter_hidden" : "",
        ],
    });
    const entryDiv = createDiv({
        cls: "another-quick-switcher__item__entry",
    });
    const titleDiv = createDiv({
        cls: "another-quick-switcher__item__title",
        text: options.showAliasesOnTop && aliases.length > 0
            ? aliases.join(" / ")
            : item.file.basename,
    });
    entryDiv.appendChild(titleDiv);
    if (item.order < 9) {
        const hotKeyGuide = createSpan({
            cls: "another-quick-switcher__item__hot-key-guide",
            text: `${item.order + 1}`,
        });
        entryDiv.appendChild(hotKeyGuide);
    }
    if (options.showDirectory) {
        const directoryDiv = createDiv({
            cls: "another-quick-switcher__item__directory",
        });
        directoryDiv.insertAdjacentHTML("beforeend", FOLDER);
        const text = options.showFullPathOfDirectory
            ? item.file.parent.path
            : item.file.parent.name;
        directoryDiv.appendText(` ${text}`);
        entryDiv.appendChild(directoryDiv);
        if (options.showDirectoryAtNewLine) {
            itemDiv.appendChild(entryDiv);
            itemDiv.appendChild(directoryDiv);
            return itemDiv;
        }
    }
    itemDiv.appendChild(entryDiv);
    return itemDiv;
}
function createDescriptionDiv(item, aliases, tags, links, countByHeader, headerResultsNum, options) {
    const descriptionDiv = createDiv({
        cls: "another-quick-switcher__item__descriptions",
    });
    if (aliases.length > 0) {
        const aliasDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        const displayAliases = options.showAliasesOnTop
            ? [item.file.basename]
            : aliases;
        displayAliases.forEach((x) => {
            const aliasSpan = createSpan({
                cls: "another-quick-switcher__item__description__alias",
            });
            aliasSpan.insertAdjacentHTML("beforeend", ALIAS);
            aliasSpan.appendText(x);
            aliasDiv.appendChild(aliasSpan);
        });
        descriptionDiv.appendChild(aliasDiv);
    }
    if (tags.length > 0) {
        const tagsDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        tags.forEach((x) => {
            const tagsSpan = createSpan({
                cls: "another-quick-switcher__item__description__tag",
            });
            tagsSpan.insertAdjacentHTML("beforeend", TAG);
            tagsSpan.appendText(x.replace("#", ""));
            tagsDiv.appendChild(tagsSpan);
        });
        descriptionDiv.appendChild(tagsDiv);
    }
    if (links.length > 0) {
        const linksDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        links.forEach((x) => {
            const linksSpan = createSpan({
                cls: "another-quick-switcher__item__description__link",
            });
            linksSpan.insertAdjacentHTML("beforeend", LINK);
            linksSpan.appendChild(createSpan({ text: x, attr: { style: "padding-left: 3px" } }));
            linksDiv.appendChild(linksSpan);
        });
        descriptionDiv.appendChild(linksDiv);
    }
    if (Object.keys(countByHeader).length > 0) {
        const headersDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        Object.entries(countByHeader)
            .map(([header, n]) => ({ header, n }))
            .sort((a, b) => b.n - a.n)
            .forEach(({ header, n }) => {
            const headersSpan = createSpan({
                cls: [
                    "another-quick-switcher__item__description__header",
                    n !== headerResultsNum
                        ? "another-quick-switcher__item__description__header__dimmed"
                        : "",
                ],
            });
            headersSpan.insertAdjacentHTML("beforeend", HEADER);
            headersSpan.appendChild(createSpan({ text: header, attr: { style: "padding-left: 3px" } }));
            headersDiv.appendChild(headersSpan);
        });
        descriptionDiv.appendChild(headersDiv);
    }
    return descriptionDiv;
}
function createElements(item, options) {
    const aliases = uniqFlatMap(item.matchResults.filter((res) => res.alias), (x) => { var _a; return (_a = x.meta) !== null && _a !== void 0 ? _a : []; });
    const tags = uniqFlatMap(item.matchResults.filter((res) => res.type === "tag"), (x) => { var _a; return (_a = x.meta) !== null && _a !== void 0 ? _a : []; });
    const links = uniqFlatMap(item.matchResults.filter((res) => res.type === "link"), (x) => { var _a; return (_a = x.meta) !== null && _a !== void 0 ? _a : []; });
    const headerResults = item.matchResults.filter((res) => res.type === "header");
    const headerResultsNum = headerResults.length;
    const countByHeader = count(headerResults.flatMap((xs) => { var _a; return uniq((_a = xs.meta) !== null && _a !== void 0 ? _a : []); }));
    const itemDiv = createItemDiv(item, aliases, options);
    if (aliases.length === 0 &&
        tags.length === 0 &&
        links.length === 0 &&
        countByHeader === {}) {
        return { itemDiv };
    }
    const descriptionDiv = createDescriptionDiv(item, aliases, tags, links, countByHeader, headerResultsNum, options);
    return {
        itemDiv,
        descriptionDiv,
    };
}

const sortPriorityList = [
    "Header match",
    "Last modified",
    "Last opened",
    "Length",
    "Link match",
    "Name match",
    "Perfect word match",
    "Prefix name match",
    "Star",
    "Tag match",
    "Alphabetical",
];
function getComparator(priority) {
    switch (priority) {
        case "Header match":
            return priorityToHeader;
        case "Last modified":
            return priorityToLastModified;
        case "Last opened":
            return priorityToLastOpened;
        case "Length":
            return priorityToLength;
        case "Link match":
            return priorityToLink;
        case "Name match":
            return priorityToName;
        case "Perfect word match":
            return priorityToPerfectWord;
        case "Prefix name match":
            return priorityToPrefixName;
        case "Star":
            return priorityToStar;
        case "Tag match":
            return priorityToTag;
        case "Alphabetical":
            return priorityToAlphabetical;
        default:
            throw Error(`Unexpected priority: ${priority}`);
    }
}
function sort(items, priorities, lastOpenFileIndexByPath) {
    return items.sort((a, b) => {
        let result;
        for (const priority of priorities) {
            result = getComparator(priority)(a, b, lastOpenFileIndexByPath);
            if (result !== 0) {
                return result;
            }
        }
        return 0;
    });
}
function compare(a, b, toOrdered, order = "asc") {
    const oA = toOrdered(a);
    const oB = toOrdered(b);
    if (oA === oB) {
        return 0;
    }
    switch (order) {
        case "asc":
            if (oA > oB) {
                return 1;
            }
            if (oB > oA) {
                return -1;
            }
            return 0;
        case "desc":
            if (oA < oB) {
                return 1;
            }
            if (oB < oA) {
                return -1;
            }
            return 0;
    }
}
function priorityToPerfectWord(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => x.type === "word-perfect").length, "desc");
}
function priorityToPrefixName(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => ["prefix-name", "word-perfect"].includes(x.type)).length, "desc");
}
function priorityToName(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => ["name", "prefix-name", "word-perfect"].includes(x.type)).length, "desc");
}
function priorityToTag(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => x.type === "tag").length, "desc");
}
function priorityToHeader(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => x.type === "header").length, "desc");
}
function priorityToLink(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => x.type === "link").length, "desc");
}
function priorityToLength(a, b) {
    return compare(a, b, (x) => x.matchResults[0].alias
        ? x.matchResults[0].alias.length
        : x.file.name.length, "asc");
}
function priorityToLastOpened(a, b, lastOpenFileIndexByPath) {
    return compare(a, b, (x) => { var _a; return (_a = lastOpenFileIndexByPath[x.file.path]) !== null && _a !== void 0 ? _a : 999999; }, "asc");
}
function priorityToLastModified(a, b) {
    return compare(a, b, (x) => x.file.stat.mtime, "desc");
}
function priorityToStar(a, b) {
    return compare(a, b, (x) => Number(x.starred), "desc");
}
function priorityToAlphabetical(a, b) {
    return compare(a, b, (x) => (x.matchResults[0].alias ? x.matchResults[0].alias : x.file.name), "asc");
}

const MOD = obsidian.Platform.isMacOS ? "cmd" : "ctrl";
const quickResultSelectionModifier = (userAltInsteadOfModForQuickResultSelection) => (userAltInsteadOfModForQuickResultSelection ? "alt" : MOD);

function buildLogMessage$1(message, msec) {
    return `${message}: ${Math.round(msec)}[ms]`;
}
class AnotherQuickSwitcherModal extends obsidian.SuggestModal {
    constructor(app, settings, command) {
        super(app);
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.initialCommand = command;
        this.command = command;
        this.limit = this.settings.maxNumberOfSuggestions;
        this.setHotKeys();
        this.phantomItems = this.settings.showExistingFilesOnly
            ? []
            : this.appHelper.searchPhantomFiles().map((x) => ({
                file: x,
                aliases: [],
                tags: [],
                headers: [],
                links: [],
                phantom: true,
                starred: false,
                matchResults: [],
                tokens: x.basename.split(" "),
            }));
        this.indexingItems();
        this.debounceGetSuggestions = obsidian.debounce((query, cb) => {
            cb(this._getSuggestions(query));
        }, this.settings.searchDelayMilliSeconds, true);
    }
    indexingItems() {
        var _a;
        const starredPathMap = keyBy(this.appHelper.getStarredFilePaths(), (x) => x);
        const activeFilePath = (_a = app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path;
        const start = performance.now();
        const markdownItems = app.vault
            .getMarkdownFiles()
            .filter((x) => x.path !== activeFilePath && app.metadataCache.getFileCache(x))
            .map((x) => {
            var _a, _b, _c, _d, _e, _f;
            const cache = app.metadataCache.getFileCache(x); // already filtered
            return {
                file: x,
                aliases: (_a = obsidian.parseFrontMatterAliases(cache.frontmatter)) !== null && _a !== void 0 ? _a : [],
                tags: this.command.searchBy.tag
                    ? uniq([
                        ...((_b = cache.tags) !== null && _b !== void 0 ? _b : []).map((x) => x.tag),
                        ...((_c = obsidian.parseFrontMatterTags(cache.frontmatter)) !== null && _c !== void 0 ? _c : []),
                    ])
                    : [],
                headers: this.command.searchBy.header
                    ? ((_d = cache.headings) !== null && _d !== void 0 ? _d : []).map((x) => excludeFormat(x.heading))
                    : [],
                links: this.command.searchBy.link
                    ? uniq((_f = (_e = cache.links) === null || _e === void 0 ? void 0 : _e.map((x) => { var _a; return (_a = x.displayText) !== null && _a !== void 0 ? _a : ""; })) !== null && _f !== void 0 ? _f : [])
                    : [],
                phantom: false,
                starred: x.path in starredPathMap,
                matchResults: [],
                tokens: x.basename.split(" "),
            };
        });
        this.showDebugLog(() => buildLogMessage$1(`Indexing markdown items: `, performance.now() - start));
        this.originItems = [...markdownItems, ...this.phantomItems];
        this.ignoredItems = this.prefilterItems(this.command);
    }
    handleCreateNew(searchQuery, leafType) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.appHelper.createMarkdown(this.searchQuery);
            if (!file) {
                // noinspection ObjectAllocationIgnored
                new obsidian.Notice("This file already exists.");
                return;
            }
            this.appHelper.openMarkdownFile(file, { leaf: leafType });
            this.close();
        });
    }
    prefilterItems(command) {
        var _a, _b;
        const filterItems = (includePatterns, excludePatterns) => {
            let items = this.originItems;
            if (includePatterns.length > 0) {
                items = includeItems(items, includePatterns, (x) => x.file.path);
            }
            if (excludePatterns.length > 0) {
                items = excludeItems(items, excludePatterns, (x) => x.file.path);
            }
            return items;
        };
        const currentDirPath = (_b = (_a = this.appHelper.getActiveFile()) === null || _a === void 0 ? void 0 : _a.parent.path) !== null && _b !== void 0 ? _b : "";
        return command.isBacklinkSearch
            ? filterItems([], this.settings.backLinkExcludePrefixPathPatterns)
            : filterItems(command.includePrefixPathPatterns.map((p) => p.replace(/<current_dir>/g, currentDirPath)), command.excludePrefixPathPatterns.map((p) => p.replace(/<current_dir>/g, currentDirPath)));
    }
    getSuggestions(query) {
        if (!query || query === this.command.defaultInput) {
            return this._getSuggestions(query);
        }
        return new Promise((resolve) => {
            this.debounceGetSuggestions(query, (items) => {
                resolve(items);
            });
        });
    }
    _getSuggestions(query) {
        var _a;
        const start = performance.now();
        let lastOpenFileIndexByPath = {};
        this.app.workspace.getLastOpenFiles().forEach((v, i) => {
            lastOpenFileIndexByPath[v] = i;
        });
        const commandByPrefix = this.settings.searchCommands
            .filter((x) => x.commandPrefix)
            .find((x) => query.startsWith(x.commandPrefix));
        if ((commandByPrefix || this.initialCommand !== this.command) &&
            commandByPrefix !== this.command) {
            this.showDebugLog(() => `beforeCommand: ${this.command.name}`);
            this.command = commandByPrefix !== null && commandByPrefix !== void 0 ? commandByPrefix : this.initialCommand;
            this.indexingItems(); // slow?
            this.showDebugLog(() => `afterCommand: ${this.command.name}`);
        }
        this.searchQuery = query.startsWith(this.command.commandPrefix)
            ? query.replace(this.command.commandPrefix, "")
            : query;
        if (this.command.defaultInput) {
            this.searchQuery = `${this.command.defaultInput}${this.searchQuery}`;
        }
        this.renderInputComponent();
        const qs = this.searchQuery.split(" ").filter((x) => x);
        if (this.command.isBacklinkSearch) {
            const activeFilePath = (_a = this.app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path;
            if (!activeFilePath) {
                return [];
            }
            // ✨ If I can use MetadataCache.getBacklinksForFile, I would like to use it instead of original createBacklinksMap :)
            const backlinksMap = this.appHelper.createBacklinksMap();
            const items = this.ignoredItems
                .filter((x) => { var _a; return (_a = backlinksMap[activeFilePath]) === null || _a === void 0 ? void 0 : _a.has(x.file.path); })
                .map((x) => stampMatchResults(x, qs, false, false, false, this.settings.normalizeAccentsAndDiacritics))
                .filter((x) => x.matchResults.every((x) => x.type !== "not found"))
                .slice(0, this.settings.maxNumberOfSuggestions);
            this.showDebugLog(() => buildLogMessage$1(`Get suggestions: ${query}`, performance.now() - start));
            return items.map((x, order) => (Object.assign(Object.assign({}, x), { order })));
        }
        if (!this.searchQuery.trim()) {
            const results = sort(this.ignoredItems, this.command.sortPriorities.filter((x) => ["Last opened", "Last modified", "Star"].includes(x)), lastOpenFileIndexByPath)
                .slice(0, this.settings.maxNumberOfSuggestions)
                .map((x, order) => (Object.assign(Object.assign({}, x), { order })));
            this.showDebugLog(() => buildLogMessage$1(`Get suggestions: ${this.searchQuery} (${this.command.name})`, performance.now() - start));
            return results;
        }
        const matchedSuggestions = this.ignoredItems
            .map((x) => stampMatchResults(x, qs, this.command.searchBy.tag, this.command.searchBy.header, this.command.searchBy.link, this.settings.normalizeAccentsAndDiacritics))
            .filter((x) => x.matchResults.every((x) => x.type !== "not found"));
        const items = sort(matchedSuggestions, this.command.sortPriorities, lastOpenFileIndexByPath);
        this.showDebugLog(() => buildLogMessage$1(`Get suggestions: ${this.searchQuery} (${this.command.name})`, performance.now() - start));
        this.countInputEl = createDiv({
            text: `${Math.min(items.length, this.settings.maxNumberOfSuggestions)} / ${items.length}`,
            cls: "another-quick-switcher__status__count-input",
        });
        this.inputEl.before(this.countInputEl);
        return items
            .slice(0, this.settings.maxNumberOfSuggestions)
            .map((x, order) => (Object.assign(Object.assign({}, x), { order })));
    }
    renderInputComponent() {
        var _a, _b, _c;
        (_a = this.searchCommandEl) === null || _a === void 0 ? void 0 : _a.remove();
        (_b = this.defaultInputEl) === null || _b === void 0 ? void 0 : _b.remove();
        (_c = this.countInputEl) === null || _c === void 0 ? void 0 : _c.remove();
        this.searchCommandEl = createDiv({
            cls: "another-quick-switcher__status__search-command",
        });
        this.searchCommandEl.insertAdjacentHTML("beforeend", SEARCH);
        if (this.command.isBacklinkSearch) {
            this.searchCommandEl.appendText(`Backlink search`);
        }
        else {
            this.searchCommandEl.appendText(`${this.command.name} ... `);
        }
        if (this.command.searchBy.tag) {
            this.searchCommandEl.insertAdjacentHTML("beforeend", TAG);
        }
        if (this.command.searchBy.header) {
            this.searchCommandEl.insertAdjacentHTML("beforeend", HEADER);
        }
        if (this.command.searchBy.link) {
            this.searchCommandEl.insertAdjacentHTML("beforeend", LINK);
        }
        this.inputEl.before(this.searchCommandEl);
        if (this.command.defaultInput) {
            this.defaultInputEl = createDiv({
                text: this.searchQuery,
                cls: "another-quick-switcher__status__default-input",
            });
            this.defaultInputEl.insertAdjacentHTML("afterbegin", FILTER);
            this.resultContainerEl.before(this.defaultInputEl);
        }
    }
    renderSuggestion(item, el) {
        const { itemDiv, descriptionDiv } = createElements(item, {
            showDirectory: this.settings.showDirectory,
            showDirectoryAtNewLine: this.settings.showDirectoryAtNewLine,
            showFullPathOfDirectory: this.settings.showFullPathOfDirectory,
            showAliasesOnTop: this.settings.showAliasesOnTop,
            hideGutterIcons: this.settings.hideGutterIcons,
        });
        if (descriptionDiv) {
            itemDiv.appendChild(descriptionDiv);
        }
        el.appendChild(itemDiv);
    }
    onNoSuggestion() {
        super.onNoSuggestion();
        const createButton = createEl("button", {
            text: "Create",
            cls: "another-quick-switcher__create_button",
        });
        createButton.addEventListener("click", () => {
            this.handleCreateNew(this.searchQuery, "same");
        });
        this.resultContainerEl.appendChild(createButton);
    }
    onChooseSuggestion(item, evt) {
        return __awaiter(this, void 0, void 0, function* () {
            let fileToOpened = item.file;
            if (evt.altKey && !evt.metaKey) {
                if (evt.shiftKey) {
                    this.chooser.values.forEach((x) => {
                        this.appHelper.insertLinkToActiveFileBy(x.file);
                        this.appHelper.insertStringToActiveFile("\n");
                    });
                }
                else {
                    this.appHelper.insertLinkToActiveFileBy(fileToOpened);
                }
                return;
            }
            if (item.phantom) {
                fileToOpened = yield this.app.vault.create(item.file.path, "");
            }
            const offset = this.command.isBacklinkSearch
                ? this.appHelper.findFirstLinkOffset(item.file, this.app.workspace.getActiveFile() // never undefined
                )
                : undefined;
            let leaf;
            const key = evt.key;
            if (evt.metaKey && key === "]") {
                const urls = yield this.appHelper.findExternalLinkUrls(fileToOpened);
                if (urls.length > 0) {
                    activeWindow.open(urls[0]);
                }
                else {
                    this.appHelper.openMarkdownFile(fileToOpened, { leaf: "same", offset });
                }
                return;
            }
            if (evt.metaKey && key === "o") {
                leaf = "popout";
            }
            else if (evt.metaKey && evt.shiftKey && key === "-") {
                leaf = "new-vertical";
            }
            else if (evt.metaKey && !evt.shiftKey && key === "-") {
                leaf = "new-horizontal";
            }
            else if (evt.metaKey && evt.altKey) {
                leaf = "popup";
            }
            else if (evt.metaKey && !evt.altKey) {
                leaf = "new";
            }
            else {
                leaf = "same";
            }
            this.appHelper.openMarkdownFile(fileToOpened, { leaf, offset });
        });
    }
    showDebugLog(toMessage) {
        if (this.settings.showLogAboutPerformanceInConsole) {
            console.log(toMessage());
        }
    }
    setHotKeys() {
        const openNthMod = quickResultSelectionModifier(this.settings.userAltInsteadOfModForQuickResultSelection);
        if (!this.settings.hideHotkeyGuides) {
            this.setInstructions([
                {
                    command: `[↑↓][${MOD} n or p][${MOD} j or k]`,
                    purpose: "navigate",
                },
                { command: `[${openNthMod} 1~9]`, purpose: "open Nth" },
                { command: `[${MOD} d]`, purpose: "clear input" },
                { command: "[tab]", purpose: "replace input" },
                { command: "[↵]", purpose: "open" },
                { command: `[${MOD} ↵]`, purpose: "open in new pane" },
                { command: `[${MOD} -]`, purpose: "open in new pane (horizontal)" },
                { command: `[${MOD} shift -]`, purpose: "open in new pane (vertical)" },
                { command: `[${MOD} o]`, purpose: "open in new window" },
                { command: `[${MOD} alt ↵]`, purpose: "open in popup" },
                { command: "[shift ↵]", purpose: "create" },
                { command: `[${MOD} shift ↵]`, purpose: "create in new pane" },
                { command: `[${MOD} shift o]`, purpose: "create in new window" },
                { command: `[${MOD} shift alt ↵]`, purpose: "create in popup" },
                { command: `[${MOD} ]]`, purpose: "open first URL" },
                { command: "[alt ↵]", purpose: "insert to editor" },
                { command: "[alt shift ↵]", purpose: "insert all to editor" },
                { command: "[esc]", purpose: "dismiss" },
            ]);
        }
        this.scope.register(["Mod"], "Enter", () => this.chooser.useSelectedItem({ metaKey: true }));
        this.scope.register(["Alt"], "Enter", () => this.chooser.useSelectedItem({ altKey: true }));
        this.scope.register(["Alt", "Shift"], "Enter", () => this.chooser.useSelectedItem({ altKey: true, shiftKey: true }));
        this.scope.register(["Mod"], "-", () => {
            this.chooser.useSelectedItem({ metaKey: true, key: "-" });
            return false;
        });
        this.scope.register(["Mod", "Shift"], "-", () => {
            this.chooser.useSelectedItem({ metaKey: true, shiftKey: true, key: "-" });
            return false;
        });
        this.scope.register(["Mod"], "o", () => this.chooser.useSelectedItem({ metaKey: true, key: "o" }));
        this.scope.register(["Mod", "Alt"], "Enter", () => this.chooser.useSelectedItem({ metaKey: true, altKey: true }));
        const modifierKey = this.settings.userAltInsteadOfModForQuickResultSelection
            ? "Alt"
            : "Mod";
        [1, 2, 3, 4, 5, 6, 7, 8, 9].forEach((n) => {
            this.scope.register([modifierKey], String(n), () => {
                this.chooser.setSelectedItem(n - 1, true);
                this.chooser.useSelectedItem({});
            });
        });
        this.scope.register(["Shift"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, "same");
            }
        });
        this.scope.register(["Shift", "Mod"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, "new");
            }
        });
        this.scope.register(["Shift", "Mod"], "o", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, "popout");
            }
        });
        this.scope.register(["Shift", "Mod", "Alt"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, "popup");
            }
        });
        this.scope.register(["Mod"], "N", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "P", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
        this.scope.register(["Mod"], "J", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "K", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
        this.scope.register([], "Tab", (evt) => {
            evt.preventDefault();
            if (this.chooser.values) {
                this.inputEl.value =
                    this.chooser.values[this.chooser.selectedItem].file.basename;
                // Necessary to rerender suggestions
                this.inputEl.dispatchEvent(new Event("input"));
            }
        });
        this.scope.register(["Mod"], "D", () => {
            this.inputEl.value = "";
            // Necessary to rerender suggestions
            this.inputEl.dispatchEvent(new Event("input"));
        });
        this.scope.register(["Mod"], "]", () => {
            this.chooser.useSelectedItem({ metaKey: true, key: "]" });
        });
    }
}

function matchQuery(item, query, matcher, isNormalizeAccentsDiacritics) {
    const qs = query.split("/");
    const folder = qs.pop();
    return (qs.every((dir) => smartIncludes(item.folder.parent.path, dir, isNormalizeAccentsDiacritics)) && matcher(item, folder));
}
function matchQueryAll(item, queries, matcher, isNormalizeAccentsDiacritics) {
    return queries.every((q) => matchQuery(item, q, matcher, isNormalizeAccentsDiacritics));
}
function stampMatchType(item, queries, isNormalizeAccentsDiacritics) {
    if (matchQueryAll(item, queries, (item, query) => smartStartsWith(item.folder.name, query, isNormalizeAccentsDiacritics), isNormalizeAccentsDiacritics)) {
        return Object.assign(Object.assign({}, item), { matchType: "prefix-name" });
    }
    if (matchQueryAll(item, queries, (item, query) => smartIncludes(item.folder.name, query, isNormalizeAccentsDiacritics), isNormalizeAccentsDiacritics)) {
        return Object.assign(Object.assign({}, item), { matchType: "name" });
    }
    if (matchQueryAll(item, queries, (item, query) => smartIncludes(item.folder.path, query, isNormalizeAccentsDiacritics), isNormalizeAccentsDiacritics)) {
        return Object.assign(Object.assign({}, item), { matchType: "directory" });
    }
    return item;
}
class MoveModal extends obsidian.SuggestModal {
    constructor(app, settings) {
        super(app);
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.setHotKeys();
        this.originItems = this.appHelper
            .getFolders()
            .filter((x) => !x.isRoot())
            .map((x) => ({
            folder: x,
        }));
        this.filteredItems = excludeItems(this.originItems, this.settings.moveFileExcludePrefixPathPatterns, (x) => x.folder.path);
    }
    getSuggestions(query) {
        const qs = query.split(" ").filter((x) => x);
        return this.filteredItems
            .map((x) => stampMatchType(x, qs, this.settings.normalizeAccentsAndDiacritics))
            .filter((x) => x.matchType)
            .sort(sorter((x) => (x.matchType === "directory" ? 1 : 0)))
            .sort(sorter((x) => x.matchType === "prefix-name" ? 1000 - x.folder.name.length : 0, "desc"))
            .slice(0, 10);
    }
    renderSuggestion(item, el) {
        const itemDiv = createDiv({
            cls: [
                "another-quick-switcher__item",
                "another-quick-switcher__directory_item",
            ],
        });
        const entryDiv = createDiv({
            cls: "another-quick-switcher__item__entry",
        });
        const folderDiv = createDiv({
            cls: "another-quick-switcher__item__title",
            text: item.folder.name,
        });
        entryDiv.appendChild(folderDiv);
        const directoryDiv = createDiv({
            cls: "another-quick-switcher__item__directory",
        });
        directoryDiv.insertAdjacentHTML("beforeend", FOLDER);
        directoryDiv.appendText(` ${item.folder.parent.name}`);
        entryDiv.appendChild(directoryDiv);
        itemDiv.appendChild(entryDiv);
        el.appendChild(itemDiv);
    }
    onChooseSuggestion(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeFile = this.app.workspace.getActiveFile();
            if (!activeFile) {
                return;
            }
            yield this.app.fileManager.renameFile(activeFile, `${item.folder.path}/${activeFile.name}`);
        });
    }
    setHotKeys() {
        if (!this.settings.hideHotkeyGuides) {
            this.setInstructions([
                {
                    command: `[↑↓][${MOD} n or p][${MOD} j or k]`,
                    purpose: "navigate",
                },
                { command: "[↵]", purpose: "move to" },
                { command: "[esc]", purpose: "dismiss" },
            ]);
        }
        this.scope.register(["Mod"], "N", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "P", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
        this.scope.register(["Mod"], "J", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "K", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
    }
}

class HeaderModal extends obsidian.SuggestModal {
    constructor(app, settings, floating) {
        super(app);
        this.hitItems = [];
        /** ⚠Not work correctly in all cases */
        this.unsafeSelectedIndex = 0;
        this.limit = 1000;
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.floating = floating;
        this.items = this.appHelper.getHeadersInActiveFile().map((x, i) => ({
            value: excludeFormat(x.heading),
            level: x.level,
            position: x.position,
            hit: false,
            index: i,
        }));
        this.inputEl.addEventListener("input", () => {
            var _a, _b;
            if (this.hitItems.length === 0) {
                this.select(this.unsafeSelectedIndex, this.floating);
                return;
            }
            const nextIndex = (_b = (_a = this.hitItems.find((x) => x.index >= this.unsafeSelectedIndex)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : this.hitItems[0].index;
            this.select(nextIndex, this.floating);
        });
        this.bindHotKeys();
    }
    select(index, preview = true) {
        this.chooser.setSelectedItem(index, true);
        this.unsafeSelectedIndex = index;
        if (preview) {
            this.appHelper.moveTo(this.items[this.unsafeSelectedIndex].position);
        }
    }
    getNextSelectIndex() {
        return this.unsafeSelectedIndex + 1 > this.items.length - 1
            ? 0
            : this.unsafeSelectedIndex + 1;
    }
    getPreviousSelectIndex() {
        return this.unsafeSelectedIndex - 1 < 0
            ? this.items.length - 1
            : this.unsafeSelectedIndex - 1;
    }
    onOpen() {
        var _a;
        super.onOpen();
        if (this.floating) {
            (_a = activeWindow.activeDocument
                .querySelector(".modal-bg")) === null || _a === void 0 ? void 0 : _a.addClass("another-quick-switcher__header__floating-modal-bg");
            const promptEl = activeWindow.activeDocument.querySelector(".prompt");
            promptEl === null || promptEl === void 0 ? void 0 : promptEl.addClass("another-quick-switcher__header__floating-prompt");
            const markdownView = this.appHelper.getMarkdownViewInActiveLeaf();
            if (markdownView) {
                const windowWidth = activeWindow.innerWidth;
                const windowHeight = activeWindow.innerHeight;
                const modalWidth = this.modalEl.offsetWidth;
                const modalHeight = this.modalEl.offsetHeight;
                const { x: leafX, y: leafY, width: leafWidth, } = markdownView.containerEl.getBoundingClientRect();
                const { y: promptY } = promptEl.getBoundingClientRect();
                const left = Math.min(windowWidth - modalWidth - 30, leafX + leafWidth / 1.5);
                const top = Math.min(windowHeight - modalHeight - 10, leafY + promptY);
                promptEl === null || promptEl === void 0 ? void 0 : promptEl.setAttribute("style", `left: ${left}px; top: ${top}px`);
            }
        }
        const markdownView = this.appHelper.getMarkdownViewInActiveLeaf();
        if (!markdownView || this.items.length === 0) {
            return;
        }
        const mode = markdownView.getMode();
        const offset = mode === "source"
            ? this.appHelper.getCurrentOffset()
            : markdownView.editor.posToOffset({
                ch: 0,
                line: markdownView.previewMode.getScroll(),
            });
        if (!offset) {
            return;
        }
        const firstOverIndex = this.items.findIndex((x) => x.position.start.offset > offset);
        if (firstOverIndex === -1) {
            this.select(this.items.last().index, false);
        }
        else if (firstOverIndex === 0) {
            this.select(0, false);
        }
        else {
            this.select(firstOverIndex - 1, false);
        }
    }
    getSuggestions(query) {
        const qs = query.split(" ").filter((x) => x);
        const suggestions = this.items.map((x) => {
            const hit = qs.length > 0 &&
                qs.every((q) => smartIncludes(x.value, q, this.settings.normalizeAccentsAndDiacritics));
            return Object.assign(Object.assign({}, x), { hit });
        });
        this.hitItems = suggestions.filter((x) => x.hit);
        return suggestions;
    }
    renderSuggestion(item, el) {
        const itemDiv = createDiv({
            cls: "another-quick-switcher__item",
        });
        const entryDiv = createDiv({
            cls: "another-quick-switcher__item__entry",
        });
        const headerDiv = createDiv({
            cls: [
                "another-quick-switcher__item__title",
                `another-quick-switcher__item__title__header`,
                item.hit
                    ? `another-quick-switcher__item__title__header_hit`
                    : "another-quick-switcher__item__title__header_no_hit",
                `another-quick-switcher__item__title__header${item.level}`,
            ],
            text: item.value,
        });
        entryDiv.appendChild(headerDiv);
        if (item.hit) {
            const i = this.hitItems.findIndex((x) => x.index === item.index);
            if (i !== -1) {
                entryDiv.createSpan({
                    cls: "another-quick-switcher__item__title__header_hit__counter",
                    text: `${i + 1} / ${this.hitItems.length}`,
                });
            }
        }
        itemDiv.appendChild(entryDiv);
        el.appendChild(itemDiv);
    }
    onChooseSuggestion(item) {
        return __awaiter(this, void 0, void 0, function* () {
            this.appHelper.moveTo(item.position);
        });
    }
    bindHotKeys() {
        if (!this.settings.hideHotkeyGuides) {
            this.setInstructions([
                {
                    command: "[↑↓]",
                    purpose: this.settings.headerSearchKeyBindArrowUpDown,
                },
                {
                    command: "[tab or shift tab]",
                    purpose: this.settings.headerSearchKeyBindTab,
                },
                {
                    command: `[${MOD} j or k]`,
                    purpose: this.settings.headerSearchKeyBindVim,
                },
                {
                    command: `[${MOD} n or p]`,
                    purpose: this.settings.headerSearchKeyBindEmacs,
                },
                { command: `[${MOD} d]`, purpose: "clear input" },
                { command: "[↵]", purpose: "move to header" },
                { command: "[esc]", purpose: "dismiss" },
            ]);
        }
        this.scope.register(["Mod"], "D", () => {
            this.inputEl.value = "";
            // Necessary to rerender suggestions
            this.inputEl.dispatchEvent(new Event("input"));
        });
        this.scope.keys
            .filter((x) => ["ArrowDown", "ArrowUp"].includes(x.key))
            .forEach((x) => this.scope.unregister(x));
        const navigateNext = () => {
            this.select(this.getNextSelectIndex(), this.floating);
        };
        const navigatePrevious = () => {
            this.select(this.getPreviousSelectIndex(), this.floating);
        };
        const moveToNextHit = () => {
            var _a, _b;
            if (this.hitItems.length === 1) {
                return;
            }
            if (this.hitItems.length === 0) {
                navigateNext();
                return;
            }
            const nextIndex = (_b = (_a = this.hitItems.find((x) => x.index > this.unsafeSelectedIndex)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : this.hitItems[0].index;
            this.select(nextIndex, this.floating);
        };
        const moveToPreviousHit = () => {
            if (this.hitItems.length === 1) {
                return;
            }
            if (this.hitItems.length === 0) {
                navigatePrevious();
                return;
            }
            const currentIndex = this.hitItems.findIndex((x) => x.index >= this.unsafeSelectedIndex);
            const previousIndex = currentIndex === 0 ? this.hitItems.length - 1 : currentIndex - 1;
            this.select(this.hitItems[previousIndex].index, this.floating);
        };
        this.scope.register([], "ArrowDown", () => {
            (this.settings.headerSearchKeyBindArrowUpDown === "navigate"
                ? navigateNext
                : moveToNextHit)();
        });
        this.scope.register([], "ArrowUp", () => {
            (this.settings.headerSearchKeyBindArrowUpDown === "navigate"
                ? navigatePrevious
                : moveToPreviousHit)();
        });
        this.scope.register(["Mod"], "J", () => {
            (this.settings.headerSearchKeyBindVim === "navigate"
                ? navigateNext
                : moveToNextHit)();
        });
        this.scope.register(["Mod"], "K", () => {
            (this.settings.headerSearchKeyBindVim === "navigate"
                ? navigatePrevious
                : moveToPreviousHit)();
        });
        this.scope.register(["Mod"], "N", () => {
            (this.settings.headerSearchKeyBindEmacs === "navigate"
                ? navigateNext
                : moveToNextHit)();
        });
        this.scope.register(["Mod"], "P", () => {
            (this.settings.headerSearchKeyBindEmacs === "navigate"
                ? navigatePrevious
                : moveToPreviousHit)();
        });
        this.scope.register([], "Tab", (evt) => {
            evt.preventDefault();
            (this.settings.headerSearchKeyBindTab === "navigate"
                ? navigateNext
                : moveToNextHit)();
        });
        this.scope.register(["Shift"], "Tab", (evt) => {
            evt.preventDefault();
            (this.settings.headerSearchKeyBindTab === "navigate"
                ? navigatePrevious
                : moveToPreviousHit)();
        });
    }
}

function existsRg() {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, _) => {
            child_process.execFile("rg", ["--version"], (error, _stdout, _stderr) => {
                if (error) {
                    console.dir(error);
                }
                resolve(!error);
            });
        });
    });
}
function rg(...args) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, _) => {
            child_process.execFile("rg", ["--json", ...args], { maxBuffer: 100 * 1024 * 1024 }, (_, stdout, _stderr) => {
                const results = stdout
                    .split("\n")
                    .filter((x) => x)
                    .map((x) => JSON.parse(x))
                    .filter((x) => x.type === "match");
                resolve(results);
            });
        });
    });
}

let globalInternalStorage = {
    items: [],
    selected: undefined,
};
function buildLogMessage(message, msec) {
    return `${message}: ${Math.round(msec)}[ms]`;
}
class GrepModal extends obsidian.SuggestModal {
    constructor(app, settings) {
        super(app);
        this.suggestions = globalInternalStorage.items;
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.limit = 255;
        this.setPlaceholder("Search around the vault by TAB key");
        this.setHotKeys();
    }
    onOpen() {
        var _a;
        super.onOpen();
        (_a = activeWindow.activeDocument
            .querySelector(".modal-bg")) === null || _a === void 0 ? void 0 : _a.addClass("another-quick-switcher__grep__floating-modal-bg");
        const promptEl = activeWindow.activeDocument.querySelector(".prompt");
        promptEl === null || promptEl === void 0 ? void 0 : promptEl.addClass("another-quick-switcher__grep__floating-prompt");
        window.setTimeout(() => {
            if (globalInternalStorage.selected != null) {
                this.chooser.setSelectedItem(globalInternalStorage.selected, true);
            }
        }, 0);
    }
    onClose() {
        super.onClose();
        globalInternalStorage.items = this.suggestions;
        globalInternalStorage.selected = this.chooser.selectedItem;
        this.clonedInputEl.removeEventListener("keyup", this.clonedInputElKeyupEventListener);
    }
    searchSuggestions(query) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const start = performance.now();
            (_a = this.countInputEl) === null || _a === void 0 ? void 0 : _a.remove();
            this.countInputEl = createDiv({
                text: "searching...",
                cls: "another-quick-switcher__grep__count-input",
            });
            this.clonedInputEl.before(this.countInputEl);
            const hasCapitalLetter = query.toLowerCase() !== query;
            const basePath = this.app.vault.adapter.basePath;
            const rgResults = yield rg(...[
                "-t",
                "md",
                hasCapitalLetter ? "" : "-i",
                "--",
                query,
                basePath,
            ].filter((x) => x));
            const items = rgResults.map((x, order) => ({
                order,
                file: this.appHelper.getMarkdownFileByPath(obsidian.normalizePath(x.data.path.text.replace(basePath, ""))),
                line: x.data.lines.text,
                lineNumber: x.data.line_number,
                offset: x.data.absolute_offset,
                submatches: x.data.submatches,
            }));
            this.showDebugLog(() => buildLogMessage(`getSuggestions: `, performance.now() - start));
            return items;
        });
    }
    getSuggestions(query) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (query) {
                this.suggestions = yield this.searchSuggestions(query);
                (_a = this.countInputEl) === null || _a === void 0 ? void 0 : _a.remove();
                this.countInputEl = createDiv({
                    text: `${Math.min(this.suggestions.length, this.limit)} / ${this.suggestions.length}`,
                    cls: "another-quick-switcher__grep__count-input",
                });
                this.clonedInputEl.before(this.countInputEl);
            }
            return this.suggestions;
        });
    }
    renderSuggestion(item, el) {
        const itemDiv = createDiv({
            cls: "another-quick-switcher__item",
        });
        const entryDiv = createDiv({
            cls: "another-quick-switcher__item__entry",
        });
        const titleDiv = createDiv({
            cls: "another-quick-switcher__item__title",
            text: item.file.basename,
        });
        entryDiv.appendChild(titleDiv);
        if (item.order < 9) {
            const hotKeyGuide = createSpan({
                cls: "another-quick-switcher__item__hot-key-guide",
                text: `${item.order + 1}`,
            });
            entryDiv.appendChild(hotKeyGuide);
        }
        itemDiv.appendChild(entryDiv);
        if (this.settings.showDirectory) {
            const directoryDiv = createDiv({
                cls: "another-quick-switcher__item__directory",
            });
            directoryDiv.insertAdjacentHTML("beforeend", FOLDER);
            const text = this.settings.showFullPathOfDirectory
                ? item.file.parent.path
                : item.file.parent.name;
            directoryDiv.appendText(` ${text}`);
            entryDiv.appendChild(directoryDiv);
            if (this.settings.showDirectoryAtNewLine) {
                itemDiv.appendChild(directoryDiv);
            }
        }
        const descriptionDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        let restLine = item.line;
        item.submatches.forEach((x) => {
            const i = restLine.indexOf(x.match.text);
            descriptionDiv.createSpan({
                text: restLine.slice(0, i),
            });
            descriptionDiv.createSpan({
                text: x.match.text,
                cls: "another-quick-switcher__hit_word",
            });
            restLine = restLine.slice(i + x.match.text.length);
        });
        descriptionDiv.createSpan({
            text: restLine,
        });
        itemDiv.appendChild(descriptionDiv);
        el.appendChild(itemDiv);
    }
    onChooseSuggestion(item, evt) {
        return __awaiter(this, void 0, void 0, function* () {
            let leaf;
            const key = evt.key;
            if (evt.metaKey && key === "o") {
                leaf = "popout";
            }
            else if (evt.metaKey && evt.shiftKey && key === "-") {
                leaf = "new-vertical";
            }
            else if (evt.metaKey && !evt.shiftKey && key === "-") {
                leaf = "new-horizontal";
            }
            else if (evt.metaKey && evt.altKey) {
                leaf = "popup";
            }
            else if (evt.metaKey && !evt.altKey) {
                leaf = "new";
            }
            else {
                leaf = "same";
            }
            this.appHelper.openMarkdownFile(item.file, {
                leaf,
                line: item.lineNumber - 1,
            });
        });
    }
    showDebugLog(toMessage) {
        if (this.settings.showLogAboutPerformanceInConsole) {
            console.log(toMessage());
        }
    }
    setHotKeys() {
        var _a;
        const openNthMod = quickResultSelectionModifier(this.settings.userAltInsteadOfModForQuickResultSelection);
        if (!this.settings.hideHotkeyGuides) {
            this.setInstructions([
                { command: "[tab]", purpose: "search" },
                {
                    command: `[↑↓][${MOD} n or p][${MOD} j or k]`,
                    purpose: "navigate",
                },
                { command: `[${openNthMod} 1~9]`, purpose: "open Nth" },
                { command: `[${MOD} d]`, purpose: "clear input" },
                { command: "[↵]", purpose: "open" },
                { command: `[${MOD} ↵]`, purpose: "open in new pane" },
                { command: `[${MOD} -]`, purpose: "open in new pane (horizontal)" },
                { command: `[${MOD} shift -]`, purpose: "open in new pane (vertical)" },
                { command: `[${MOD} o]`, purpose: "open in new window" },
                { command: `[${MOD} alt ↵]`, purpose: "open in popup" },
                { command: `[${MOD} ,]`, purpose: "preview" },
                { command: "[esc]", purpose: "dismiss" },
            ]);
        }
        this.scope.register(["Mod"], "Enter", () => this.chooser.useSelectedItem({ metaKey: true }));
        this.scope.register(["Mod"], "-", () => {
            this.chooser.useSelectedItem({ metaKey: true, key: "-" });
            return false;
        });
        this.scope.register(["Mod", "Shift"], "-", () => {
            this.chooser.useSelectedItem({ metaKey: true, shiftKey: true, key: "-" });
            return false;
        });
        this.scope.register(["Mod"], "o", () => this.chooser.useSelectedItem({ metaKey: true, key: "o" }));
        this.scope.register(["Mod", "Alt"], "Enter", () => this.chooser.useSelectedItem({ metaKey: true, altKey: true }));
        const modifierKey = this.settings.userAltInsteadOfModForQuickResultSelection
            ? "Alt"
            : "Mod";
        [1, 2, 3, 4, 5, 6, 7, 8, 9].forEach((n) => {
            this.scope.register([modifierKey], String(n), () => {
                this.chooser.setSelectedItem(n - 1, true);
                this.chooser.useSelectedItem({});
            });
        });
        this.scope.register(["Mod"], "N", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "P", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
        this.scope.register(["Mod"], "J", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "K", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
        this.scope.register(["Mod"], "D", () => {
            this.clonedInputEl.value = "";
            // Necessary to rerender suggestions
            this.clonedInputEl.dispatchEvent(new Event("input"));
        });
        this.scope.register(["Mod"], ",", () => {
            const item = this.chooser.values[this.chooser.selectedItem];
            this.appHelper.openMarkdownFile(item.file, {
                line: item.lineNumber - 1,
            });
        });
        // XXX: This is a hack to avoid default input events
        this.scope.register([], "Tab", () => {
            return false;
        });
        this.clonedInputEl = this.inputEl.cloneNode(true);
        (_a = this.inputEl.parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(this.clonedInputEl, this.inputEl);
        this.clonedInputElKeyupEventListener = (evt) => {
            const keyEvent = evt;
            if (keyEvent.code === "Tab") {
                this.currentQuery = this.clonedInputEl.value;
                this.inputEl.value = this.currentQuery;
                // Necessary to rerender suggestions
                this.inputEl.dispatchEvent(new Event("input"));
            }
        };
        this.clonedInputEl.addEventListener("keyup", this.clonedInputElKeyupEventListener);
    }
}

const SEARCH_COMMAND_PREFIX = "search-command";
function showSearchDialog(app, settings, command) {
    const modal = new AnotherQuickSwitcherModal(app, settings, command);
    modal.open();
}
function showMoveDialog(app, settings) {
    if (!app.workspace.getActiveFile()) {
        return;
    }
    const modal = new MoveModal(app, settings);
    modal.open();
}
function showGrepDialog(app, settings) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!obsidian.Platform.isDesktop) {
            // noinspection ObjectAllocationIgnored
            new obsidian.Notice("Grep is not supported on mobile.");
            return;
        }
        if (!(yield existsRg())) {
            // noinspection ObjectAllocationIgnored
            new obsidian.Notice("You need to install ripgrep and enable it to call from anywhere.");
            return;
        }
        const modal = new GrepModal(app, settings);
        modal.open();
    });
}
function showHeaderDialog(app, settings, floating) {
    if (!app.workspace.getActiveFile()) {
        return;
    }
    const modal = new HeaderModal(app, settings, floating);
    modal.open();
}
function createCommands(app, settings) {
    return [
        {
            id: "backlink-search",
            name: "Backlink search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "h" }],
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showSearchDialog(app, settings, {
                    isBacklinkSearch: true,
                    searchBy: {
                        tag: false,
                        header: false,
                        link: false,
                    },
                    // XXX: Below are ignored
                    name: "",
                    defaultInput: "",
                    commandPrefix: "",
                    sortPriorities: [],
                    includePrefixPathPatterns: [],
                    excludePrefixPathPatterns: [],
                    expand: true,
                });
            },
        },
        {
            id: "header-search-in-file",
            name: "Header search in file",
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showHeaderDialog(app, settings, false);
            },
        },
        {
            id: "header-floating-search-in-file",
            name: "Header floating search in file",
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showHeaderDialog(app, settings, true);
            },
        },
        {
            id: "move",
            name: "Move file to another folder",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "m" }],
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showMoveDialog(app, settings);
            },
        },
        {
            id: "grep",
            name: "Grep",
            hotkeys: [],
            checkCallback: (checking) => {
                if (checking) {
                    return obsidian.Platform.isDesktop;
                }
                showGrepDialog(app, settings);
            },
        },
        ...settings.searchCommands.map((command) => {
            return {
                id: `${SEARCH_COMMAND_PREFIX}_${command.name}`,
                name: command.name,
                hotkeys: [],
                callback: () => {
                    showSearchDialog(app, settings, command);
                },
            };
        }),
    ];
}

const headerSearchFeatureList = [
    "navigate",
    "move to next/previous hit",
];
const defaultSearchBy = () => ({
    tag: true,
    link: true,
    header: true,
});
const DEFAULT_SETTINGS = {
    searchDelayMilliSeconds: 0,
    maxNumberOfSuggestions: 50,
    normalizeAccentsAndDiacritics: false,
    // Appearance
    showDirectory: true,
    showDirectoryAtNewLine: false,
    showFullPathOfDirectory: false,
    showAliasesOnTop: false,
    showExistingFilesOnly: false,
    hideGutterIcons: false,
    hideHotkeyGuides: false,
    // Hot keys in dialog
    userAltInsteadOfModForQuickResultSelection: false,
    // Searches
    searchCommands: [
        {
            name: "Recommended search",
            searchBy: defaultSearchBy(),
            defaultInput: "",
            commandPrefix: "",
            sortPriorities: [
                "Perfect word match",
                "Prefix name match",
                "Name match",
                "Length",
                "Tag match",
                "Header match",
                "Link match",
                "Star",
                "Last opened",
                "Last modified",
            ],
            includePrefixPathPatterns: [],
            excludePrefixPathPatterns: [],
            expand: true,
            isBacklinkSearch: false,
        },
        {
            name: "Recent search",
            searchBy: defaultSearchBy(),
            defaultInput: "",
            commandPrefix: ":r ",
            sortPriorities: [
                "Name match",
                "Tag match",
                "Header match",
                "Link match",
                "Last opened",
                "Last modified",
            ],
            includePrefixPathPatterns: [],
            excludePrefixPathPatterns: [],
            expand: false,
            isBacklinkSearch: false,
        },
        {
            name: "Title search",
            searchBy: {
                tag: false,
                link: false,
                header: false,
            },
            defaultInput: "",
            commandPrefix: ":t ",
            sortPriorities: [
                "Perfect word match",
                "Prefix name match",
                "Name match",
                "Length",
                "Last opened",
                "Last modified",
            ],
            includePrefixPathPatterns: [],
            excludePrefixPathPatterns: [],
            expand: false,
            isBacklinkSearch: false,
        },
        {
            name: "Star search",
            searchBy: {
                tag: true,
                link: false,
                header: false,
            },
            defaultInput: "",
            commandPrefix: ":s ",
            sortPriorities: ["Star", "Last opened", "Last modified"],
            includePrefixPathPatterns: [],
            excludePrefixPathPatterns: [],
            expand: false,
            isBacklinkSearch: false,
        },
    ],
    // Back link search
    backLinkExcludePrefixPathPatterns: [],
    // Header search in file
    headerSearchKeyBindArrowUpDown: "navigate",
    headerSearchKeyBindTab: "move to next/previous hit",
    headerSearchKeyBindVim: "navigate",
    headerSearchKeyBindEmacs: "navigate",
    // Move file to another folder
    moveFileExcludePrefixPathPatterns: [],
    // debug
    showLogAboutPerformanceInConsole: false,
};
class AnotherQuickSwitcherSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Another Quick Switcher - Settings" });
        this.fillEmptyRequiredValues();
        this.addGeneralSettings(containerEl);
        this.addAppearanceSettings(containerEl);
        this.addHotKeysInDialogSettings(containerEl);
        this.addSearchSettings(containerEl);
        // TODO: remove
        this.addBacklinkSearchesSettings(containerEl);
        this.addHeaderSearchSettings(containerEl);
        this.addMoveSettings(containerEl);
        this.addDebugSettings(containerEl);
    }
    /**
     * For backward compatibilities
     */
    fillEmptyRequiredValues() {
        var _a, _b, _c;
        var _d, _e, _f;
        (_a = (_d = this.plugin.settings).hideHotkeyGuides) !== null && _a !== void 0 ? _a : (_d.hideHotkeyGuides = false);
        (_b = (_e = this.plugin.settings).backLinkExcludePrefixPathPatterns) !== null && _b !== void 0 ? _b : (_e.backLinkExcludePrefixPathPatterns = []);
        (_c = (_f = this.plugin.settings).moveFileExcludePrefixPathPatterns) !== null && _c !== void 0 ? _c : (_f.moveFileExcludePrefixPathPatterns = []);
        this.plugin.settings.searchCommands.forEach((_, i) => {
            var _a, _b, _c, _d;
            const command = this.plugin.settings.searchCommands[i];
            (_a = command.searchBy) !== null && _a !== void 0 ? _a : (command.searchBy = defaultSearchBy());
            (_b = command.includePrefixPathPatterns) !== null && _b !== void 0 ? _b : (command.includePrefixPathPatterns = []);
            (_c = command.excludePrefixPathPatterns) !== null && _c !== void 0 ? _c : (command.excludePrefixPathPatterns = []);
            (_d = command.expand) !== null && _d !== void 0 ? _d : (command.expand = true);
        });
    }
    addGeneralSettings(containerEl) {
        new obsidian.Setting(containerEl)
            .setName("Search delay milli-seconds")
            .setDesc("If keyboard operation is slow, try increasing the value")
            .addSlider((sc) => sc
            .setLimits(0, 1000, 10)
            .setValue(this.plugin.settings.searchDelayMilliSeconds)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.searchDelayMilliSeconds = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Max number of suggestions")
            .addSlider((sc) => sc
            .setLimits(1, 255, 1)
            .setValue(this.plugin.settings.maxNumberOfSuggestions)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.maxNumberOfSuggestions = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Normalize accents/diacritics")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.normalizeAccentsAndDiacritics).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.normalizeAccentsAndDiacritics = value;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        if (this.plugin.settings.normalizeAccentsAndDiacritics) {
            containerEl.createEl("div", {
                text: "⚠ If enabled, it is about 2 to 5 times slower than disabled",
                cls: "another-quick-switcher__settings__warning",
            });
        }
    }
    addAppearanceSettings(containerEl) {
        containerEl.createEl("h3", { text: "👁Appearance" });
        new obsidian.Setting(containerEl).setName("Show directory").addToggle((tc) => {
            tc.setValue(this.plugin.settings.showDirectory).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showDirectory = value;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        if (this.plugin.settings.showDirectory) {
            new obsidian.Setting(containerEl)
                .setName("Show directory at the new line")
                .setClass("another-quick-switcher__settings__nested")
                .addToggle((tc) => {
                tc.setValue(this.plugin.settings.showDirectoryAtNewLine).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.showDirectoryAtNewLine = value;
                    yield this.plugin.saveSettings();
                }));
            });
            new obsidian.Setting(containerEl)
                .setName("Show full path of directory")
                .setClass("another-quick-switcher__settings__nested")
                .addToggle((tc) => {
                tc.setValue(this.plugin.settings.showFullPathOfDirectory).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.showFullPathOfDirectory = value;
                    yield this.plugin.saveSettings();
                }));
            });
        }
        new obsidian.Setting(containerEl).setName("Show aliases on top").addToggle((tc) => {
            tc.setValue(this.plugin.settings.showAliasesOnTop).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showAliasesOnTop = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Show existing files only")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.showExistingFilesOnly).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showExistingFilesOnly = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl).setName("Hide gutter icons").addToggle((tc) => {
            tc.setValue(this.plugin.settings.hideGutterIcons).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.hideGutterIcons = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl).setName("Hide hotkey guides").addToggle((tc) => {
            tc.setValue(this.plugin.settings.hideHotkeyGuides).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.hideHotkeyGuides = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
    addHotKeysInDialogSettings(containerEl) {
        containerEl.createEl("h3", { text: "⌨Hot keys in dialog" });
        new obsidian.Setting(containerEl)
            .setName("Use `alt 1～9` instead of `ctrl/cmd 1～9` for quick result selection")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.userAltInsteadOfModForQuickResultSelection).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.userAltInsteadOfModForQuickResultSelection =
                    value;
                yield this.plugin.saveSettings();
            }));
        });
    }
    addSearchSettings(containerEl) {
        containerEl.createEl("h3", { text: "🔍 Search commands" });
        this.plugin.settings.searchCommands.forEach((_, i) => {
            this.addSearchCommandSetting(containerEl, this.plugin.settings.searchCommands[i]);
        });
        new obsidian.Setting(containerEl)
            .setHeading()
            .addButton((btn) => {
            btn
                .setButtonText("Add")
                .setTooltip("Add a new command")
                .setCta()
                .setClass("another-quick-switcher__settings__search-command__add-button")
                .onClick((_) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.searchCommands.push({
                    name: "",
                    searchBy: defaultSearchBy(),
                    defaultInput: "",
                    commandPrefix: "",
                    sortPriorities: [],
                    includePrefixPathPatterns: [],
                    excludePrefixPathPatterns: [],
                    expand: true,
                    isBacklinkSearch: false,
                });
                this.display();
            }));
        })
            .addButton((btn) => {
            btn
                .setButtonText("Save")
                .setTooltip("You must click this button to save settings before closing Obsidian")
                .setCta()
                .setClass("another-quick-switcher__settings__search-command__save-button")
                .onClick((_) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.searchCommands =
                    this.plugin.settings.searchCommands.filter((x) => x.name);
                const invalidValues = this.plugin.settings.searchCommands
                    .flatMap((x) => x.sortPriorities)
                    .filter((x) => !sortPriorityList.includes(x));
                if (invalidValues.length > 0) {
                    // noinspection ObjectAllocationIgnored
                    new obsidian.Notice(`
Invalid sort priorities:
${invalidValues.map((x) => `- ${x}`).join("\n")}
`.trim(), 0);
                    return;
                }
                yield this.plugin.saveSettings();
                this.display();
                this.plugin.reloadCommands();
                // noinspection ObjectAllocationIgnored
                new obsidian.Notice("Save and reload commands");
            }));
        });
    }
    addSearchCommandSetting(containerEl, command) {
        const div = createDiv({
            cls: "another-quick-switcher__settings__search-command",
        });
        containerEl.append(div);
        new obsidian.Setting(div)
            .setClass("another-quick-switcher__settings__search-command__header")
            .setHeading()
            .addText((tc) => {
            const el = tc
                .setPlaceholder("Command name")
                .setValue(command.name)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                command.name = value;
            }));
            el.inputEl.setAttribute("style", "text-align: left");
            return el;
        })
            .addExtraButton((btn) => {
            btn
                .setTooltip("Delete a command (!! it will never be restored !!)")
                .setIcon("trash-2")
                .onClick(() => {
                this.plugin.settings.searchCommands.remove(command);
                this.display();
            });
            btn.extraSettingsEl.addClass("another-quick-switcher__settings__search-command__header__delete");
            return btn;
        })
            .addExtraButton((btn) => {
            btn
                .setIcon(command.expand ? "chevron-up" : "chevron-down")
                .setTooltip(command.expand ? "fold" : "unfold")
                .onClick(() => {
                command.expand = !command.expand;
                this.display();
            });
            btn.extraSettingsEl.addClass("another-quick-switcher__settings__search-command__header__fold-button");
            return btn;
        });
        if (!command.expand) {
            return;
        }
        const buttonClass = "another-quick-switcher__settings__search-command__search-by-button";
        const buttonEnabledClass = "another-quick-switcher__settings__search-command__search-by-button_enabled";
        const buttonDisabledClass = "another-quick-switcher__settings__search-command__search-by-button_disabled";
        new obsidian.Setting(div)
            .setName("Search by")
            .addButton((bc) => {
            const coloring = () => {
                bc.buttonEl.removeClass(buttonEnabledClass, buttonDisabledClass);
                bc.buttonEl.addClass(command.searchBy.tag ? buttonEnabledClass : buttonDisabledClass);
            };
            bc.setButtonText("Tag")
                .setClass(buttonClass)
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                command.searchBy.tag = !command.searchBy.tag;
                coloring();
            }));
            coloring();
            return bc;
        })
            .addButton((bc) => {
            const coloring = () => {
                bc.buttonEl.removeClass(buttonEnabledClass, buttonDisabledClass);
                bc.buttonEl.addClass(command.searchBy.header ? buttonEnabledClass : buttonDisabledClass);
            };
            bc.setButtonText("Header")
                .setClass(buttonClass)
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                command.searchBy.header = !command.searchBy.header;
                coloring();
            }));
            coloring();
            return bc;
        })
            .addButton((bc) => {
            const coloring = () => {
                bc.buttonEl.removeClass(buttonEnabledClass, buttonDisabledClass);
                bc.buttonEl.addClass(command.searchBy.link ? buttonEnabledClass : buttonDisabledClass);
            };
            bc.setButtonText("Link")
                .setClass(buttonClass)
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                command.searchBy.link = !command.searchBy.link;
                coloring();
            }));
            coloring();
            return bc;
        });
        new obsidian.Setting(div)
            .setName("Default input")
            .setDesc("Default input strings when it opens the dialog")
            .addText((tc) => tc
            .setValue(command.defaultInput)
            .setPlaceholder("(ex: #todo )")
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            command.defaultInput = value;
        })));
        new obsidian.Setting(div)
            .setName("Command prefix")
            .setDesc("For example, if it sets ':r ', a query starts with ':r ' means that search as this command")
            .addText((tc) => tc
            .setValue(command.commandPrefix)
            .setPlaceholder("(ex: :r )")
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            command.commandPrefix = value;
        })));
        const df = document.createDocumentFragment();
        df.append("Valid sort priorities refer to ", createEl("a", {
            text: "README",
            href: "https://github.com/tadashi-aikawa/obsidian-another-quick-switcher/blob/master/README.md#%EF%B8%8Ffeatures",
        }));
        new obsidian.Setting(div)
            .setName("Sort priorities")
            .setDesc(df)
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("")
                .setValue(command.sortPriorities.join("\n"))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                const priorities = smartLineBreakSplit(value);
                command.sortPriorities = priorities;
            }));
            el.inputEl.addClass("another-quick-switcher__settings__search-command__sort-priority");
            return el;
        });
        new obsidian.Setting(div)
            .setName("Include prefix path patterns")
            .setDesc("If set, only files whose paths start with one of the patterns will be suggested. It can set multi patterns by line breaks. <current_dir> means current directory.")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("(ex: Notes/Private)")
                .setValue(command.includePrefixPathPatterns.join("\n"))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                command.includePrefixPathPatterns = smartLineBreakSplit(value);
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__include_path_patterns";
            return el;
        });
        new obsidian.Setting(div)
            .setName("Exclude prefix path patterns")
            .setDesc("If set, files whose paths start with one of the patterns will not be suggested. It can set multi patterns by line breaks. <current_dir> means current directory.")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("(ex: Notes/Private)")
                .setValue(command.excludePrefixPathPatterns.join("\n"))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                command.excludePrefixPathPatterns = smartLineBreakSplit(value);
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__exclude_path_patterns";
            return el;
        });
    }
    addBacklinkSearchesSettings(containerEl) {
        containerEl.createEl("h3", { text: "👀 Backlink search" });
        new obsidian.Setting(containerEl)
            .setName('Exclude prefix path patterns for "Backlink search"')
            .setDesc("If set, files whose paths start with one of the patterns will not be suggested. It can set multi patterns by line breaks")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.backLinkExcludePrefixPathPatterns.join("\n"))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.backLinkExcludePrefixPathPatterns =
                    smartLineBreakSplit(value);
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
    }
    addHeaderSearchSettings(containerEl) {
        containerEl.createEl("h3", { text: "📰 Header search in file" });
        containerEl.createEl("h4", { text: "Hot keys in dialog" });
        new obsidian.Setting(containerEl).setName("↑↓").addDropdown((tc) => tc
            .addOptions(mirrorMap([...headerSearchFeatureList], (x) => x))
            .setValue(this.plugin.settings.headerSearchKeyBindArrowUpDown)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.headerSearchKeyBindArrowUpDown =
                value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl).setName("Tab / Shift+Tab").addDropdown((tc) => tc
            .addOptions(mirrorMap([...headerSearchFeatureList], (x) => x))
            .setValue(this.plugin.settings.headerSearchKeyBindTab)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.headerSearchKeyBindTab =
                value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Ctrl+J / Ctrl+K (for Vimmer)")
            .addDropdown((tc) => tc
            .addOptions(mirrorMap([...headerSearchFeatureList], (x) => x))
            .setValue(this.plugin.settings.headerSearchKeyBindVim)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.headerSearchKeyBindVim =
                value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Ctrl+N / Ctrl+P (for Emacs user)")
            .addDropdown((tc) => tc
            .addOptions(mirrorMap([...headerSearchFeatureList], (x) => x))
            .setValue(this.plugin.settings.headerSearchKeyBindEmacs)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.headerSearchKeyBindEmacs =
                value;
            yield this.plugin.saveSettings();
        })));
    }
    addMoveSettings(containerEl) {
        containerEl.createEl("h3", { text: "📁 Move file to another folder" });
        new obsidian.Setting(containerEl)
            .setName('Exclude prefix path patterns for "Move file to another folder"')
            .setDesc("If set, folders whose paths start with one of the patterns will not be suggested. It can set multi patterns by line breaks")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.moveFileExcludePrefixPathPatterns.join("\n"))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.moveFileExcludePrefixPathPatterns =
                    smartLineBreakSplit(value);
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
    }
    addDebugSettings(containerEl) {
        containerEl.createEl("h3", { text: "Debug" });
        new obsidian.Setting(containerEl)
            .setName("Show log about performance in a console")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.showLogAboutPerformanceInConsole).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showLogAboutPerformanceInConsole = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}

class AnotherQuickSwitcher extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new AnotherQuickSwitcherSettingTab(this.app, this));
            this.reloadCommands();
        });
    }
    reloadCommands() {
        const appHelper = new AppHelper(this.app);
        appHelper
            .getCommandIds(this.manifest.id)
            .forEach((x) => appHelper.removeCommand(x));
        createCommands(this.app, this.settings).forEach((x) => this.addCommand(x));
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign(Object.assign({}, DEFAULT_SETTINGS), (yield this.loadData()));
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = AnotherQuickSwitcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsInNyYy91dGlscy9jb2xsZWN0aW9uLWhlbHBlci50cyIsInNyYy91dGlscy9wYXRoLnRzIiwic3JjL2FwcC1oZWxwZXIudHMiLCJzcmMvdXRpbHMvZGlhY3JpdGljcy1tYXAudHMiLCJzcmMvdXRpbHMvc3RyaW5ncy50cyIsInNyYy9tYXRjaGVyLnRzIiwic3JjL3VpL2ljb25zLnRzIiwic3JjL3VpL3N1Z2dlc3Rpb24tZmFjdG9yeS50cyIsInNyYy9zb3J0ZXJzLnRzIiwic3JjL2tleXMudHMiLCJzcmMvdWkvQW5vdGhlclF1aWNrU3dpdGNoZXJNb2RhbC50cyIsInNyYy91aS9Nb3ZlTW9kYWwudHMiLCJzcmMvdWkvSGVhZGVyTW9kYWwudHMiLCJzcmMvdXRpbHMvcmlwZ3JlcC50cyIsInNyYy91aS9HcmVwTW9kYWwudHMiLCJzcmMvY29tbWFuZHMudHMiLCJzcmMvc2V0dGluZ3MudHMiLCJzcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsiTWFya2Rvd25WaWV3IiwiVEZvbGRlciIsImdldExpbmtwYXRoIiwibWF0Y2hRdWVyeSIsIm1hdGNoUXVlcnlBbGwiLCJQbGF0Zm9ybSIsImJ1aWxkTG9nTWVzc2FnZSIsIlN1Z2dlc3RNb2RhbCIsImRlYm91bmNlIiwicGFyc2VGcm9udE1hdHRlckFsaWFzZXMiLCJwYXJzZUZyb250TWF0dGVyVGFncyIsIk5vdGljZSIsImV4ZWNGaWxlIiwibm9ybWFsaXplUGF0aCIsIlBsdWdpblNldHRpbmdUYWIiLCJTZXR0aW5nIiwiUGx1Z2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXVEQTtBQUNPLFNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRTtBQUM3RCxJQUFJLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sS0FBSyxZQUFZLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsVUFBVSxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoSCxJQUFJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFVBQVUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUMvRCxRQUFRLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDbkcsUUFBUSxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDdEcsUUFBUSxTQUFTLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUU7QUFDdEgsUUFBUSxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUUsS0FBSyxDQUFDLENBQUM7QUFDUDs7QUM3RUE7O0FBRUc7QUFDSSxNQUFNLE1BQU0sR0FBRyxDQUNwQixTQUFzQixFQUN0QixLQUFBLEdBQXdCLEtBQUssS0FDM0I7SUFDRixPQUFPLENBQUMsQ0FBSSxFQUFFLENBQUksS0FDaEIsS0FBSyxLQUFLLEtBQUs7VUFDWCxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUMzQixjQUFFLENBQUM7Y0FDRCxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztrQkFDM0IsQ0FBQyxDQUFDO0FBQ0osa0JBQUUsQ0FBQztVQUNILFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQzdCLGNBQUUsQ0FBQztjQUNELFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO2tCQUMzQixDQUFDLENBQUM7a0JBQ0YsQ0FBQyxDQUFDO0FBQ1YsQ0FBQyxDQUFDO0FBYUssTUFBTSxLQUFLLEdBQUcsQ0FDbkIsTUFBVyxFQUNYLEtBQXVCLEtBRXZCLE1BQU0sQ0FBQyxNQUFNLENBQ1gsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQzlELEVBQTBCLENBQzNCLENBQUM7QUFFRyxNQUFNLEtBQUssR0FBRyxDQUFDLE1BQWdCLEtBQWlDO0lBQ3JFLE1BQU0sR0FBRyxHQUFnQyxFQUFFLENBQUM7QUFDNUMsSUFBQSxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtBQUMxQixRQUFBLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ2QsWUFBQSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNkLFNBQUE7QUFBTSxhQUFBO0FBQ0wsWUFBQSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLFNBQUE7QUFDRixLQUFBO0FBQ0QsSUFBQSxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVJLFNBQVUsT0FBTyxDQUFJLE1BQWEsRUFBQTtJQUN0QyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUssU0FBVSxJQUFJLENBQUksTUFBVyxFQUFBO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVlLFNBQUEsV0FBVyxDQUFPLE1BQVcsRUFBRSxNQUFxQixFQUFBO0FBQ2xFLElBQUEsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFZTSxNQUFNLEtBQUssR0FBRyxDQUFJLFVBQWUsRUFBRSxLQUF1QixLQUFJO0FBQ25FLElBQUEsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFJLEVBQUUsQ0FBSSxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlELElBQUEsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQztTQUVjLFlBQVksQ0FDMUIsS0FBVSxFQUNWLFFBQWtCLEVBQ2xCLE1BQXdCLEVBQUE7QUFFeEIsSUFBQSxPQUFPLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQztBQUMxQixVQUFFLEtBQUs7QUFDUCxVQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFJLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1RSxDQUFDO1NBRWUsWUFBWSxDQUMxQixLQUFVLEVBQ1YsUUFBa0IsRUFDbEIsTUFBd0IsRUFBQTtBQUV4QixJQUFBLE9BQU8sUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDO0FBQzFCLFVBQUUsS0FBSztBQUNQLFVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0UsQ0FBQztBQUVlLFNBQUEsU0FBUyxDQUN2QixVQUFlLEVBQ2YsT0FBeUIsRUFBQTtBQUV6QixJQUFBLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQUssTUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBTSxDQUFDLENBQUEsRUFBQSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQSxDQUFBLENBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMvRTs7QUN6R2dCLFNBQUEsUUFBUSxDQUFDLElBQVksRUFBRSxHQUFZLEVBQUE7O0FBQ2pELElBQUEsTUFBTSxJQUFJLEdBQUcsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxNQUFHLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLENBQUMsQ0FBQyxNQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFJLElBQUksQ0FBQztJQUNoRSxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNsRSxDQUFDO0FBRUssU0FBVSxPQUFPLENBQUMsSUFBWSxFQUFBO0FBQ2xDLElBQUEsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckQsT0FBTyxHQUFHLEdBQUcsQ0FBQSxDQUFBLEVBQUksR0FBRyxDQUFBLENBQUUsR0FBRyxFQUFFLENBQUM7QUFDOUIsQ0FBQztBQUVLLFNBQVUsT0FBTyxDQUFDLElBQVksRUFBQTs7QUFDbEMsSUFBQSxPQUFPLENBQUEsRUFBQSxHQUFBLENBQUEsRUFBQSxHQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQUcsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQyxDQUFDLE1BQUEsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUksR0FBRyxDQUFDO0FBQ2hEOztNQ3dFYSxTQUFTLENBQUE7QUFHcEIsSUFBQSxXQUFBLENBQVksR0FBUSxFQUFBO0FBQ2xCLFFBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFVLENBQUM7S0FDN0I7SUFFRCxhQUFhLEdBQUE7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQ2pEO0lBRUQsMkJBQTJCLEdBQUE7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDQSxxQkFBWSxDQUFDLEVBQUU7QUFDL0QsWUFBQSxPQUFPLElBQUksQ0FBQztBQUNiLFNBQUE7UUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVcsQ0FBQyxJQUFvQixDQUFDO0tBQ2xFO0lBRUQsZ0JBQWdCLEdBQUE7O1FBQ2QsT0FBTyxDQUFBLEVBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxJQUFJLENBQUMsMkJBQTJCLEVBQUUsTUFBRSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxNQUFNLE1BQUksSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDO0tBQzNEO0lBRUQsZ0JBQWdCLEdBQUE7O0FBQ2QsUUFBQSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ1gsWUFBQSxPQUFPLElBQUksQ0FBQztBQUNiLFNBQUE7UUFFRCxNQUFNLE1BQU0sR0FBRyxDQUFBLEVBQUEsR0FBQSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsTUFBQSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBRSxTQUFTLEVBQUUsQ0FBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ1gsWUFBQSxPQUFPLElBQUksQ0FBQztBQUNiLFNBQUE7QUFFRCxRQUFBLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNuQztJQUVELHNCQUFzQixHQUFBOztBQUNwQixRQUFBLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsWUFBQSxPQUFPLEVBQUUsQ0FBQztBQUNYLFNBQUE7QUFFRCxRQUFBLFFBQ0UsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFFLFFBQVEsTUFBSSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFFLEVBQ3JFO0tBQ0g7SUFFRCxVQUFVLEdBQUE7QUFDUixRQUFBLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLO0FBQ3hCLGFBQUEsaUJBQWlCLEVBQUU7YUFDbkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWUMsZ0JBQU8sQ0FBYyxDQUFDO0tBQ3JEO0lBRUQsU0FBUyxHQUFBO1FBQ1AsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQW1CLENBQUM7S0FDOUQ7SUFFRCxtQkFBbUIsR0FBQTtRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUMxRTtJQUVELG9CQUFvQixHQUFBO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0tBQzVFO0FBRUssSUFBQSxvQkFBb0IsQ0FBQyxJQUFXLEVBQUE7O0FBQ3BDLFlBQUEsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEQsWUFBQSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0FBQy9ELFlBQUEsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pDLENBQUEsQ0FBQTtBQUFBLEtBQUE7SUFFRCxtQkFBbUIsQ0FBQyxJQUFXLEVBQUUsUUFBZSxFQUFBOztBQUM5QyxRQUFBLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsRSxRQUFBLE1BQU0sS0FBSyxHQUFHLENBQUEsRUFBQSxHQUFBLFNBQVMsS0FBVCxJQUFBLElBQUEsU0FBUyxLQUFULEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLFNBQVMsQ0FBRSxLQUFLLE1BQUksSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBRSxDQUFDO0FBQ3JDLFFBQUEsTUFBTSxNQUFNLEdBQUcsQ0FBQSxFQUFBLEdBQUEsU0FBUyxLQUFULElBQUEsSUFBQSxTQUFTLEtBQVQsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsU0FBUyxDQUFFLE1BQU0sTUFBSSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFFLENBQUM7QUFFdkMsUUFBQSxPQUFPLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLEtBQUk7O1lBQ2pELE1BQU0sY0FBYyxHQUFHLENBQUEsRUFBQSxHQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUN0RUMsb0JBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQ25CLElBQUksQ0FBQyxJQUFJLENBQ1YsTUFBRSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxJQUFJLENBQUM7QUFDUixZQUFBLE9BQU8sY0FBYyxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDMUMsU0FBQyxDQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7S0FDM0I7O0lBR0Qsa0JBQWtCLEdBQUE7UUFDaEIsTUFBTSxZQUFZLEdBQWdDLEVBQUUsQ0FBQztBQUVyRCxRQUFBLEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUM5QyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQ0wsRUFBRTtZQUN2QyxLQUFLLE1BQU0sUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDM0MsZ0JBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMzQixvQkFBQSxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNwQyxpQkFBQTtnQkFDRCxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RDLGFBQUE7QUFDRixTQUFBO0FBRUQsUUFBQSxPQUFPLFlBQVksQ0FBQztLQUNyQjtJQUVLLE1BQU0sQ0FBQyxFQUFnQixFQUFFLE1BQWUsRUFBQTs7O0FBQzVDLFlBQUEsTUFBTSxVQUFVLEdBQUcsT0FBTyxFQUFFLEtBQUssUUFBUSxDQUFDO0FBRTFDLFlBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3hDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztBQUN2RCxZQUFBLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQzlCLE9BQU87QUFDUixhQUFBO1lBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDLDJCQUEyQixFQUFFLE1BQUUsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsV0FBVyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1osT0FBTztBQUNSLGFBQUE7QUFFRCxZQUFBLE1BQU0sWUFBWSxHQUFHLE1BQU0sS0FBQSxJQUFBLElBQU4sTUFBTSxLQUFBLEtBQUEsQ0FBQSxHQUFOLE1BQU0sR0FBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN2RCxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNqQixPQUFPO0FBQ1IsYUFBQTtZQUVELE1BQU0sSUFBSSxHQUFHLFVBQVUsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUM1RSxZQUFZLENBQUMsU0FBUyxDQUNwQixZQUFZLENBQUMsV0FBVyxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FDNUQsQ0FBQztBQUNGLFlBQUEsTUFBTSxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtBQUNwQyxnQkFBQSxNQUFNLEVBQUU7b0JBQ04sSUFBSTtBQUNMLGlCQUFBO0FBQ0QsZ0JBQUEsTUFBTSxFQUFFLEtBQUs7QUFDZCxhQUFBLENBQUMsQ0FBQzs7QUFDSixLQUFBO0FBRUQsSUFBQSxxQkFBcUIsQ0FBQyxJQUFZLEVBQUE7QUFDaEMsUUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixZQUFBLE9BQU8sSUFBSSxDQUFDO0FBQ2IsU0FBQTtBQUVELFFBQUEsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFlBQVksRUFBRTtBQUNqQixZQUFBLE9BQU8sSUFBSSxDQUFDO0FBQ2IsU0FBQTtBQUVELFFBQUEsT0FBTyxZQUFxQixDQUFDO0tBQzlCO0FBRUQsSUFBQSxnQkFBZ0IsQ0FBQyxJQUFXLEVBQUUsTUFBQSxHQUEwQyxFQUFFLEVBQUE7UUFDeEUsTUFBTSxHQUFHLEdBQ0osTUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsRUFDaEIsTUFBTSxDQUNWLENBQUM7QUFFRixRQUFBLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBbUIsS0FBSTs7WUFDdkMsSUFBSTtBQUNELGlCQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBVSxNQUFFLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLFlBQVksRUFBRSxDQUFDO2lCQUNuRSxJQUFJLENBQUMsTUFBSztBQUNULGdCQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3pELGdCQUFBLE1BQU0sWUFBWSxHQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQ0YscUJBQVksQ0FBQyxDQUFDO0FBQzdELGdCQUFBLElBQUksWUFBWSxFQUFFO0FBQ2hCLG9CQUFBLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUU7d0JBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUMscUJBQUE7QUFBTSx5QkFBQSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO0FBQzNCLHdCQUFBLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDaEQsd0JBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkMscUJBQUE7QUFDRixpQkFBQTtBQUNILGFBQUMsQ0FBQyxDQUFDO0FBQ1AsU0FBQyxDQUFDO0FBRUYsUUFBQSxJQUFJLElBQW1CLENBQUM7UUFDeEIsUUFBUSxHQUFHLENBQUMsSUFBSTtBQUNkLFlBQUEsS0FBSyxNQUFNO2dCQUNULElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDMUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNmLE1BQU07QUFDUixZQUFBLEtBQUssS0FBSztnQkFDUixJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM5QyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2YsTUFBTTtBQUNSLFlBQUEsS0FBSyxnQkFBZ0I7QUFDbkIsZ0JBQUEsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQzVELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDZixNQUFNO0FBQ1IsWUFBQSxLQUFLLGNBQWM7QUFDakIsZ0JBQUEsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQzFELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDZixNQUFNO0FBQ1IsWUFBQSxLQUFLLFFBQVE7Z0JBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7Z0JBQ3BELE1BQU07QUFDUixZQUFBLEtBQUssT0FBTztBQUNWLGdCQUFBLE1BQU0sbUJBQW1CLEdBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzFELGdCQUFBLElBQUksbUJBQW1CLEVBQUU7b0JBQ3ZCLElBQUksR0FBRyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLE1BQUs7d0JBQ3RELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQixxQkFBQyxDQUFDLENBQUM7QUFDSixpQkFBQTtBQUFNLHFCQUFBO29CQUNMLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzlDLGlCQUFBO2dCQUNELE1BQU07QUFDVCxTQUFBO0tBQ0Y7SUFFRCxtQkFBbUIsR0FBQTtRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQ3RFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQ2QsQ0FBQztLQUNIO0lBRUQsa0JBQWtCLEdBQUE7QUFDaEIsUUFBQSxPQUFPLElBQUksQ0FDVCxPQUFPLENBQ0wsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQzdELE1BQU0sQ0FBQyxJQUFJLENBQ1osQ0FDRixDQUNGLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3pDO0FBRUQsSUFBQSx3QkFBd0IsQ0FBQyxHQUFXLEVBQUE7QUFDbEMsUUFBQSxNQUFNLGtCQUFrQixHQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQ0EscUJBQVksQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUN2QixPQUFPO0FBQ1IsU0FBQTtBQUVELFFBQUEsTUFBTSxNQUFNLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDO0FBQ3pDLFFBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzlCO0FBRUQsSUFBQSx3QkFBd0IsQ0FBQyxJQUFXLEVBQUE7QUFDbEMsUUFBQSxNQUFNLGtCQUFrQixHQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQ0EscUJBQVksQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUN2QixPQUFPO0FBQ1IsU0FBQTtBQUVELFFBQUEsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQzlELElBQUksRUFDSixrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUM3QixDQUFDO0FBRUYsUUFBQSxNQUFNLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7QUFDekMsUUFBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbkM7QUFFSyxJQUFBLGNBQWMsQ0FBQyxRQUFnQixFQUFBOztZQUNuQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkQsWUFBQSxJQUFJLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMvQixnQkFBQSxPQUFPLElBQUksQ0FBQztBQUNiLGFBQUE7QUFFRCxZQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QixJQUFJLEVBQUUsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQzdCLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlDLGFBQUE7QUFFRCxZQUFBLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNsRCxDQUFBLENBQUE7QUFBQSxLQUFBO0FBRUQsSUFBQSxNQUFNLENBQUMsY0FBc0IsRUFBQTtBQUMzQixRQUFBLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUM1RDtJQUVELFdBQVcsR0FBQTs7QUFFVCxRQUFBLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDM0I7QUFFRCxJQUFBLGFBQWEsQ0FBQyxTQUFpQixFQUFBO1FBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNsRDtBQUVELElBQUEsYUFBYSxDQUFDLFVBQWtCLEVBQUE7UUFDOUIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FDNUQsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FDekIsQ0FBQztLQUNIO0FBRU8sSUFBQSxrQkFBa0IsQ0FBQyxRQUFnQixFQUFBOztBQUN6QyxRQUFBLElBQUksUUFBUSxHQUFHRSxvQkFBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3JDLFFBQUEsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssS0FBSyxFQUFFO1lBQy9CLFFBQVEsSUFBSSxLQUFLLENBQUM7QUFDbkIsU0FBQTtBQUVELFFBQUEsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzFCLFlBQUEsT0FBTyxRQUFRLENBQUM7QUFDakIsU0FBQTtRQUVELFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGVBQWU7QUFDakQsWUFBQSxLQUFLLE1BQU07Z0JBQ1QsT0FBTyxDQUFBLENBQUEsRUFBSSxRQUFRLENBQUEsQ0FBRSxDQUFDO0FBQ3hCLFlBQUEsS0FBSyxTQUFTO0FBQ1osZ0JBQUEsT0FBTyxHQUFHLENBQUEsRUFBQSxHQUFBLENBQUEsRUFBQSxHQUFBLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBQSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBRSxNQUFNLENBQUMsSUFBSSxNQUFJLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUUsQ0FBSSxDQUFBLEVBQUEsUUFBUSxFQUFFLENBQUM7QUFDbEUsWUFBQSxLQUFLLFFBQVE7QUFDWCxnQkFBQSxPQUFPLENBQUcsRUFBQSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUksQ0FBQSxFQUFBLFFBQVEsRUFBRSxDQUFDO0FBQ3hFLFlBQUE7O2dCQUVFLE9BQU8sQ0FBQSxDQUFBLEVBQUksUUFBUSxDQUFBLENBQUUsQ0FBQztBQUN6QixTQUFBO0tBQ0Y7O0FBR08sSUFBQSxpQkFBaUIsQ0FBQyxRQUFnQixFQUFBO1FBQ3hDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7UUFHbkQsT0FBTztBQUNMLFlBQUEsSUFBSSxFQUFFLFFBQVE7QUFDZCxZQUFBLElBQUksRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDO0FBQ3hCLFlBQUEsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSztBQUMzQixZQUFBLFNBQVMsRUFBRSxJQUFJO0FBQ2YsWUFBQSxRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7QUFDbkMsWUFBQSxNQUFNLEVBQUU7QUFDTixnQkFBQSxJQUFJLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxnQkFBQSxJQUFJLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUN2QixnQkFBQSxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLOztBQUUzQixnQkFBQSxRQUFRLEVBQUUsRUFBRTs7QUFFWixnQkFBQSxNQUFNLEVBQUUsSUFBSTtBQUNaLGdCQUFBLE1BQU0sRUFBRSxNQUFNLElBQUk7QUFDbkIsYUFBQTtBQUNELFlBQUEsSUFBSSxFQUFFO0FBQ0osZ0JBQUEsS0FBSyxFQUFFLENBQUM7QUFDUixnQkFBQSxLQUFLLEVBQUUsQ0FBQztBQUNSLGdCQUFBLElBQUksRUFBRSxDQUFDO0FBQ1IsYUFBQTtTQUNGLENBQUM7S0FDSDtBQUNGOztBQ2xhRDs7Ozs7Ozs7Ozs7O0FBWUU7QUFDRjs7QUFFRztBQUNILE1BQU0sMkJBQTJCLEdBQUc7QUFDbEMsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFDTCw4TUFBOE07QUFDak4sS0FBQTtBQUNELElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFO0FBQzdDLElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFO0FBQ3ZDLElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFBRSx3REFBd0Q7QUFDbEUsS0FBQTtBQUNELElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsMEVBQTBFO0FBQzdFLEtBQUE7QUFDRCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLDRGQUE0RjtBQUMvRixLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRTtBQUN2QyxJQUFBLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFO0FBQ3ZDLElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsc0xBQXNMO0FBQ3pMLEtBQUE7QUFDRCxJQUFBLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsc0NBQXNDLEVBQUU7QUFDOUQsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFDTCw0RkFBNEY7QUFDL0YsS0FBQTtBQUNELElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsc0ZBQXNGO0FBQ3pGLEtBQUE7QUFDRCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLDBIQUEwSDtBQUM3SCxLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLGdDQUFnQyxFQUFFO0FBQ3hELElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsc0ZBQXNGO0FBQ3pGLEtBQUE7QUFDRCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLDhHQUE4RztBQUNqSCxLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQ2pDLElBQUEsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxrREFBa0QsRUFBRTtBQUMxRSxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLGtHQUFrRztBQUNyRyxLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQ2pDLElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsb1FBQW9RO0FBQ3ZRLEtBQUE7QUFDRCxJQUFBLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQ2pDLElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFO0FBQ3ZDLElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUU7QUFDdkMsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFBRSw4REFBOEQ7QUFDeEUsS0FBQTtBQUNELElBQUEsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRTtBQUM5RCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLHdHQUF3RztBQUMzRyxLQUFBO0FBQ0QsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFDTCx3R0FBd0c7QUFDM0csS0FBQTtBQUNELElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsNEZBQTRGO0FBQy9GLEtBQUE7QUFDRCxJQUFBLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQ2pDLElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsOE1BQThNO0FBQ2pOLEtBQUE7QUFDRCxJQUFBLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsa0RBQWtELEVBQUU7QUFDMUUsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUFFLDhEQUE4RDtBQUN4RSxLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLGdDQUFnQyxFQUFFO0FBQ3hELElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsNEZBQTRGO0FBQy9GLEtBQUE7QUFDRCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLHNGQUFzRjtBQUN6RixLQUFBO0FBQ0QsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFDTCxvTkFBb047QUFDdk4sS0FBQTtBQUNELElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFO0FBQzdDLElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFO0FBQ3ZDLElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFBRSx3REFBd0Q7QUFDbEUsS0FBQTtBQUNELElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsZ0ZBQWdGO0FBQ25GLEtBQUE7QUFDRCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLHNGQUFzRjtBQUN6RixLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRTtBQUN2QyxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLDRMQUE0TDtBQUMvTCxLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLHNDQUFzQyxFQUFFO0FBQzlELElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsNEZBQTRGO0FBQy9GLEtBQUE7QUFDRCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLDRGQUE0RjtBQUMvRixLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLDBIQUEwSDtBQUM3SCxLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLHNDQUFzQyxFQUFFO0FBQzlELElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsc0ZBQXNGO0FBQ3pGLEtBQUE7QUFDRCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLG9IQUFvSDtBQUN2SCxLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsa0RBQWtELEVBQUU7QUFDMUUsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFDTCx3R0FBd0c7QUFDM0csS0FBQTtBQUNELElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFDTCxvUUFBb1E7QUFDdlEsS0FBQTtBQUNELElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQ2pDLElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQUUsOERBQThEO0FBQ3hFLEtBQUE7QUFDRCxJQUFBLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsc0NBQXNDLEVBQUU7QUFDOUQsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFDTCx3R0FBd0c7QUFDM0csS0FBQTtBQUNELElBQUE7QUFDRSxRQUFBLElBQUksRUFBRSxHQUFHO0FBQ1QsUUFBQSxPQUFPLEVBQ0wsOEdBQThHO0FBQ2pILEtBQUE7QUFDRCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLGtHQUFrRztBQUNyRyxLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtBQUNqQyxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLDhNQUE4TTtBQUNqTixLQUFBO0FBQ0QsSUFBQSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLGtEQUFrRCxFQUFFO0FBQzFFLElBQUEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDakMsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFDTCxvRUFBb0U7QUFDdkUsS0FBQTtBQUNELElBQUEsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRTtBQUN4RCxJQUFBO0FBQ0UsUUFBQSxJQUFJLEVBQUUsR0FBRztBQUNULFFBQUEsT0FBTyxFQUNMLGtHQUFrRztBQUNyRyxLQUFBO0FBQ0QsSUFBQTtBQUNFLFFBQUEsSUFBSSxFQUFFLEdBQUc7QUFDVCxRQUFBLE9BQU8sRUFDTCxzRkFBc0Y7QUFDekYsS0FBQTtDQUNGLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBUSxFQUFFLENBQUM7QUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLDJCQUEyQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUMzRCxNQUFNLE9BQU8sR0FBRywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDdkQsSUFBQSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxRQUFBLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDakUsS0FBQTtBQUNGOztBQ3hRRCxNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FDekIsbUlBQW1JLEVBQ25JLEdBQUcsQ0FDSixDQUFDO0FBRUksU0FBVSxZQUFZLENBQUMsSUFBWSxFQUFBO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVLLFNBQVUsWUFBWSxDQUFDLElBQVksRUFBQTtJQUN2QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFSyxTQUFVLDBCQUEwQixDQUFDLElBQVksRUFBQTs7SUFFckQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxLQUFJLEVBQUEsSUFBQSxFQUFBLENBQUEsQ0FBQyxPQUFBLENBQUEsRUFBQSxHQUFBLGFBQWEsQ0FBQyxDQUFDLENBQUMsbUNBQUksQ0FBQyxDQUFBLEVBQUEsQ0FBQyxDQUFDO0FBQ3pFLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFXLEVBQUUsNEJBQXFDLEVBQUE7QUFDbkUsSUFBQSxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDNUIsSUFBQSxPQUFPLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxRSxDQUFDO1NBRWUsYUFBYSxDQUMzQixJQUFZLEVBQ1osS0FBYSxFQUNiLDRCQUFxQyxFQUFBO0FBRXJDLElBQUEsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSw0QkFBNEIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUN6RSxTQUFTLENBQUMsS0FBSyxFQUFFLDRCQUE0QixDQUFDLENBQy9DLENBQUM7QUFDSixDQUFDO1NBRWUsZUFBZSxDQUM3QixJQUFZLEVBQ1osS0FBYSxFQUNiLDRCQUFxQyxFQUFBO0lBRXJDLE9BQU8sWUFBWSxDQUNqQixZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSw0QkFBNEIsQ0FBQyxDQUFDLENBQzVELENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsNEJBQTRCLENBQUMsQ0FBQyxDQUFDO0FBQy9ELENBQUM7U0FFZSxXQUFXLENBQ3pCLElBQVksRUFDWixLQUFhLEVBQ2IsNEJBQXFDLEVBQUE7SUFFckMsUUFDRSxZQUFZLENBQ1YsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsNEJBQTRCLENBQUMsQ0FBQyxDQUM1RCxLQUFLLFNBQVMsQ0FBQyxLQUFLLEVBQUUsNEJBQTRCLENBQUMsRUFDcEQ7QUFDSixDQUFDO0FBRUssU0FBVSxhQUFhLENBQUMsSUFBWSxFQUFBO0FBQ3hDLElBQUEsT0FBTyxJQUFJO0FBQ1IsU0FBQSxPQUFPLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDO0FBQ2hDLFNBQUEsT0FBTyxDQUFDLDZCQUE2QixFQUFFLElBQUksQ0FBQztBQUM1QyxTQUFBLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDO0FBQzdCLFNBQUEsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUM7QUFDM0IsU0FBQSxPQUFPLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQztBQUM3QixTQUFBLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDO0FBQzdCLFNBQUEsT0FBTyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQztBQUNqQyxTQUFBLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDO0FBQzdCLFNBQUEsT0FBTyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUM7QUFDN0IsU0FBQSxPQUFPLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQztBQUMzQixTQUFBLE9BQU8sQ0FBQywwQkFBMEIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRUssU0FBVSxtQkFBbUIsQ0FBQyxJQUFZLEVBQUE7QUFDOUMsSUFBQSxPQUFPLElBQUk7U0FDUixLQUFLLENBQUMsSUFBSSxDQUFDO1NBQ1gsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3JCOztBQzFDQSxTQUFTQyxZQUFVLENBQ2pCLElBQW9CLEVBQ3BCLEtBQWEsRUFDYixZQUFxQixFQUNyQixlQUF3QixFQUN4QixhQUFzQixFQUN0Qiw0QkFBcUMsRUFBQTs7SUFHckMsSUFBSSxZQUFZLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN6QyxRQUFBLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUNoQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLDRCQUE0QixDQUFDLENBQzFFLENBQUM7UUFDRixPQUFPO0FBQ0wsWUFBQSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLFdBQVc7QUFDM0MsWUFBQSxJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUM7QUFDSCxLQUFBO0lBRUQsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixJQUFBLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUcsQ0FBQztJQUN2QixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUM5QixhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSw0QkFBNEIsQ0FBQyxDQUN4RSxDQUFDO0lBQ0YsSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUNmLFFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQztBQUM5QixLQUFBO0lBRUQsSUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSw0QkFBNEIsQ0FBQyxDQUFDLEVBQzNFO0FBQ0EsUUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDekQsS0FBQTtBQUVELElBQUEsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLDRCQUE0QixDQUFDLEVBQUU7QUFDdkUsUUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDeEQsS0FBQTtJQUNELE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQ3JELGVBQWUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLDRCQUE0QixDQUFDLENBQ3ZELENBQUM7QUFDRixJQUFBLElBQUksd0JBQXdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN2QyxPQUFPO0FBQ0wsWUFBQSxJQUFJLEVBQUUsYUFBYTtBQUNuQixZQUFBLElBQUksRUFBRSx3QkFBd0I7QUFDOUIsWUFBQSxLQUFLLEVBQUUsS0FBSyxDQUFDLHdCQUF3QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDeEQsQ0FBQztBQUNILEtBQUE7QUFFRCxJQUFBLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSw0QkFBNEIsQ0FBQyxFQUFFO0FBQ3JFLFFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ2pELEtBQUE7SUFDRCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUMvQyxhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSw0QkFBNEIsQ0FBQyxDQUNyRCxDQUFDO0FBQ0YsSUFBQSxJQUFJLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDakMsT0FBTztBQUNMLFlBQUEsSUFBSSxFQUFFLE1BQU07QUFDWixZQUFBLElBQUksRUFBRSxrQkFBa0I7QUFDeEIsWUFBQSxLQUFLLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDbEQsQ0FBQztBQUNILEtBQUE7QUFFRCxJQUFBLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSw0QkFBNEIsQ0FBQyxFQUFFO0FBQ3JFLFFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ3RELEtBQUE7QUFFRCxJQUFBLElBQUksZUFBZSxFQUFFO1FBQ25CLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxLQUN6QyxhQUFhLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSw0QkFBNEIsQ0FBQyxDQUMzRCxDQUFDO0FBQ0YsUUFBQSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3RCLE9BQU87QUFDTCxnQkFBQSxJQUFJLEVBQUUsUUFBUTtBQUNkLGdCQUFBLElBQUksRUFBRSxPQUFPO2FBQ2QsQ0FBQztBQUNILFNBQUE7QUFDRixLQUFBO0FBRUQsSUFBQSxJQUFJLGFBQWEsRUFBRTtRQUNqQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksS0FDbkMsYUFBYSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsNEJBQTRCLENBQUMsQ0FDekQsQ0FBQztBQUNGLFFBQUEsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQixPQUFPO0FBQ0wsZ0JBQUEsSUFBSSxFQUFFLE1BQU07QUFDWixnQkFBQSxJQUFJLEVBQUUsS0FBSzthQUNaLENBQUM7QUFDSCxTQUFBO0FBQ0YsS0FBQTtBQUVELElBQUEsSUFBSSxZQUFZLEVBQUU7UUFDaEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQ2hDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSw0QkFBNEIsQ0FBQyxDQUNqRSxDQUFDO0FBQ0YsUUFBQSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLE9BQU87QUFDTCxnQkFBQSxJQUFJLEVBQUUsS0FBSztBQUNYLGdCQUFBLElBQUksRUFBRSxJQUFJO2FBQ1gsQ0FBQztBQUNILFNBQUE7QUFDRixLQUFBO0FBRUQsSUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDO0FBQy9CLENBQUM7QUFFRCxTQUFTQyxlQUFhLENBQ3BCLElBQW9CLEVBQ3BCLE9BQWlCLEVBQ2pCLFlBQXFCLEVBQ3JCLGVBQXdCLEVBQ3hCLGFBQXNCLEVBQ3RCLDRCQUFxQyxFQUFBO0lBRXJDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FDbkJELFlBQVUsQ0FDUixJQUFJLEVBQ0osQ0FBQyxFQUNELFlBQVksRUFDWixlQUFlLEVBQ2YsYUFBYSxFQUNiLDRCQUE0QixDQUM3QixDQUNGLENBQUM7QUFDSixDQUFDO0FBRWUsU0FBQSxpQkFBaUIsQ0FDL0IsSUFBb0IsRUFDcEIsT0FBaUIsRUFDakIsWUFBcUIsRUFDckIsZUFBd0IsRUFDeEIsYUFBc0IsRUFDdEIsNEJBQXFDLEVBQUE7QUFFckMsSUFBQSxPQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQ0ssSUFBSSxDQUNQLEVBQUEsRUFBQSxZQUFZLEVBQUVDLGVBQWEsQ0FDekIsSUFBSSxFQUNKLE9BQU8sRUFDUCxZQUFZLEVBQ1osZUFBZSxFQUNmLGFBQWEsRUFDYiw0QkFBNEIsQ0FDN0IsRUFDRCxDQUFBLENBQUE7QUFDSjs7QUNsTE8sTUFBTSxNQUFNLEdBQUcsdTZCQUF1NkIsQ0FBQztBQUN2N0IsTUFBTSxLQUFLLEdBQUcsNnRCQUE2dEIsQ0FBQztBQUM1dUIsTUFBTSxHQUFHLEdBQUcsd1VBQXdVLENBQUM7QUFDclYsTUFBTSxJQUFJLEdBQUcseThEQUF5OEQsQ0FBQztBQUN2OUQsTUFBTSxNQUFNLEdBQUcsdXhCQUF1eEIsQ0FBQztBQUN2eUIsTUFBTSxNQUFNLEdBQUcsQ0FBQTs7Ozs7T0FLZixDQUFDO0FBQ0QsTUFBTSxNQUFNLEdBQUcsQ0FBQTs7T0FFZjs7QUNJUCxTQUFTLGFBQWEsQ0FDcEIsSUFBb0IsRUFDcEIsT0FBaUIsRUFDakIsT0FBZ0IsRUFBQTtJQUVoQixNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUM7QUFDeEIsUUFBQSxHQUFHLEVBQUU7WUFDSCw4QkFBOEI7WUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxzQ0FBc0MsR0FBRyxFQUFFO1lBQzFELElBQUksQ0FBQyxPQUFPLEdBQUcsc0NBQXNDLEdBQUcsRUFBRTtZQUMxRCxPQUFPLENBQUMsZUFBZSxHQUFHLHVDQUF1QyxHQUFHLEVBQUU7QUFDdkUsU0FBQTtBQUNGLEtBQUEsQ0FBQyxDQUFDO0lBRUgsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQ3pCLFFBQUEsR0FBRyxFQUFFLHFDQUFxQztBQUMzQyxLQUFBLENBQUMsQ0FBQztJQUVILE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QixRQUFBLEdBQUcsRUFBRSxxQ0FBcUM7UUFDMUMsSUFBSSxFQUNGLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUM7QUFDNUMsY0FBRSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUNyQixjQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtBQUN6QixLQUFBLENBQUMsQ0FBQztBQUNILElBQUEsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUvQixJQUFBLElBQUksSUFBSSxDQUFDLEtBQU0sR0FBRyxDQUFDLEVBQUU7UUFDbkIsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDO0FBQzdCLFlBQUEsR0FBRyxFQUFFLDZDQUE2QztBQUNsRCxZQUFBLElBQUksRUFBRSxDQUFHLEVBQUEsSUFBSSxDQUFDLEtBQU0sR0FBRyxDQUFDLENBQUUsQ0FBQTtBQUMzQixTQUFBLENBQUMsQ0FBQztBQUNILFFBQUEsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNuQyxLQUFBO0lBRUQsSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFO1FBQ3pCLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQztBQUM3QixZQUFBLEdBQUcsRUFBRSx5Q0FBeUM7QUFDL0MsU0FBQSxDQUFDLENBQUM7QUFDSCxRQUFBLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDckQsUUFBQSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsdUJBQXVCO0FBQzFDLGNBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSTtjQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDMUIsUUFBQSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFBLENBQUUsQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsUUFBUSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVuQyxJQUFJLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRTtBQUNsQyxZQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsWUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2xDLFlBQUEsT0FBTyxPQUFPLENBQUM7QUFDaEIsU0FBQTtBQUNGLEtBQUE7QUFFRCxJQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFOUIsSUFBQSxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FDM0IsSUFBb0IsRUFDcEIsT0FBaUIsRUFDakIsSUFBYyxFQUNkLEtBQWUsRUFDZixhQUEyQyxFQUMzQyxnQkFBd0IsRUFDeEIsT0FBZ0IsRUFBQTtJQUVoQixNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFDL0IsUUFBQSxHQUFHLEVBQUUsNENBQTRDO0FBQ2xELEtBQUEsQ0FBQyxDQUFDO0FBRUgsSUFBQSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QixZQUFBLEdBQUcsRUFBRSwyQ0FBMkM7QUFDakQsU0FBQSxDQUFDLENBQUM7QUFFSCxRQUFBLE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0I7QUFDN0MsY0FBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2NBQ3BCLE9BQU8sQ0FBQztBQUNaLFFBQUEsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSTtZQUMzQixNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUM7QUFDM0IsZ0JBQUEsR0FBRyxFQUFFLGtEQUFrRDtBQUN4RCxhQUFBLENBQUMsQ0FBQztBQUNILFlBQUEsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNqRCxZQUFBLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsWUFBQSxRQUFRLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLFNBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxjQUFjLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RDLEtBQUE7QUFFRCxJQUFBLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbkIsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBQ3hCLFlBQUEsR0FBRyxFQUFFLDJDQUEyQztBQUNqRCxTQUFBLENBQUMsQ0FBQztBQUNILFFBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSTtZQUNqQixNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUM7QUFDMUIsZ0JBQUEsR0FBRyxFQUFFLGdEQUFnRDtBQUN0RCxhQUFBLENBQUMsQ0FBQztBQUNILFlBQUEsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM5QyxZQUFBLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4QyxZQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEMsU0FBQyxDQUFDLENBQUM7QUFDSCxRQUFBLGNBQWMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckMsS0FBQTtBQUVELElBQUEsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNwQixNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDekIsWUFBQSxHQUFHLEVBQUUsMkNBQTJDO0FBQ2pELFNBQUEsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFJO1lBQ2xCLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUMzQixnQkFBQSxHQUFHLEVBQUUsaURBQWlEO0FBQ3ZELGFBQUEsQ0FBQyxDQUFDO0FBQ0gsWUFBQSxTQUFTLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2hELFNBQVMsQ0FBQyxXQUFXLENBQ25CLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFLEVBQUUsQ0FBQyxDQUM5RCxDQUFDO0FBQ0YsWUFBQSxRQUFRLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLFNBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxjQUFjLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RDLEtBQUE7SUFFRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN6QyxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUM7QUFDM0IsWUFBQSxHQUFHLEVBQUUsMkNBQTJDO0FBQ2pELFNBQUEsQ0FBQyxDQUFDO0FBRUgsUUFBQSxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUMxQixhQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsYUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN6QixPQUFPLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSTtZQUN6QixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUM7QUFDN0IsZ0JBQUEsR0FBRyxFQUFFO29CQUNILG1EQUFtRDtBQUNuRCxvQkFBQSxDQUFDLEtBQUssZ0JBQWdCO0FBQ3BCLDBCQUFFLDJEQUEyRDtBQUM3RCwwQkFBRSxFQUFFO0FBQ1AsaUJBQUE7QUFDRixhQUFBLENBQUMsQ0FBQztBQUNILFlBQUEsV0FBVyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNwRCxXQUFXLENBQUMsV0FBVyxDQUNyQixVQUFVLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBRSxFQUFFLENBQUMsQ0FDbkUsQ0FBQztBQUNGLFlBQUEsVUFBVSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN0QyxTQUFDLENBQUMsQ0FBQztBQUNMLFFBQUEsY0FBYyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN4QyxLQUFBO0FBRUQsSUFBQSxPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDO0FBRWUsU0FBQSxjQUFjLENBQzVCLElBQW9CLEVBQ3BCLE9BQWdCLEVBQUE7QUFFaEIsSUFBQSxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFDNUMsQ0FBQyxDQUFDLGVBQUssT0FBQSxDQUFBLEVBQUEsR0FBQSxDQUFDLENBQUMsSUFBSSxNQUFJLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUUsQ0FBQSxFQUFBLENBQ3BCLENBQUM7QUFDRixJQUFBLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsRUFDckQsQ0FBQyxDQUFDLEtBQUssRUFBQSxJQUFBLEVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQyxDQUFDLElBQUksTUFBQSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBSSxFQUFFLENBQUEsRUFBQSxDQUNwQixDQUFDO0FBQ0YsSUFBQSxNQUFNLEtBQUssR0FBRyxXQUFXLENBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLEVBQ3RELENBQUMsQ0FBQyxLQUFLLEVBQUEsSUFBQSxFQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsRUFBQSxHQUFBLENBQUMsQ0FBQyxJQUFJLE1BQUEsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUksRUFBRSxDQUFBLEVBQUEsQ0FDcEIsQ0FBQztBQUVGLElBQUEsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQzVDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUMvQixDQUFDO0FBQ0YsSUFBQSxNQUFNLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7SUFDOUMsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUN6QixhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFJLEVBQUEsSUFBQSxFQUFBLENBQUEsQ0FBQyxPQUFBLElBQUksQ0FBQyxDQUFBLEVBQUEsR0FBQSxFQUFFLENBQUMsSUFBSSxNQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFJLEVBQUUsQ0FBQyxDQUFBLEVBQUEsQ0FBQyxDQUNuRCxDQUFDO0lBRUYsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFdEQsSUFBQSxJQUNFLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxLQUFLLENBQUM7UUFDakIsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQ2xCLGFBQWEsS0FBSyxFQUFFLEVBQ3BCO1FBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQ3BCLEtBQUE7QUFDRCxJQUFBLE1BQU0sY0FBYyxHQUFHLG9CQUFvQixDQUN6QyxJQUFJLEVBQ0osT0FBTyxFQUNQLElBQUksRUFDSixLQUFLLEVBQ0wsYUFBYSxFQUNiLGdCQUFnQixFQUNoQixPQUFPLENBQ1IsQ0FBQztJQUVGLE9BQU87UUFDTCxPQUFPO1FBQ1AsY0FBYztLQUNmLENBQUM7QUFDSjs7QUN2Tk8sTUFBTSxnQkFBZ0IsR0FBRztJQUM5QixjQUFjO0lBQ2QsZUFBZTtJQUNmLGFBQWE7SUFDYixRQUFRO0lBQ1IsWUFBWTtJQUNaLFlBQVk7SUFDWixvQkFBb0I7SUFDcEIsbUJBQW1CO0lBQ25CLE1BQU07SUFDTixXQUFXO0lBQ1gsY0FBYztDQUNOLENBQUM7QUFHWCxTQUFTLGFBQWEsQ0FDcEIsUUFBc0IsRUFBQTtBQU10QixJQUFBLFFBQVEsUUFBUTtBQUNkLFFBQUEsS0FBSyxjQUFjO0FBQ2pCLFlBQUEsT0FBTyxnQkFBZ0IsQ0FBQztBQUMxQixRQUFBLEtBQUssZUFBZTtBQUNsQixZQUFBLE9BQU8sc0JBQXNCLENBQUM7QUFDaEMsUUFBQSxLQUFLLGFBQWE7QUFDaEIsWUFBQSxPQUFPLG9CQUFvQixDQUFDO0FBQzlCLFFBQUEsS0FBSyxRQUFRO0FBQ1gsWUFBQSxPQUFPLGdCQUFnQixDQUFDO0FBQzFCLFFBQUEsS0FBSyxZQUFZO0FBQ2YsWUFBQSxPQUFPLGNBQWMsQ0FBQztBQUN4QixRQUFBLEtBQUssWUFBWTtBQUNmLFlBQUEsT0FBTyxjQUFjLENBQUM7QUFDeEIsUUFBQSxLQUFLLG9CQUFvQjtBQUN2QixZQUFBLE9BQU8scUJBQXFCLENBQUM7QUFDL0IsUUFBQSxLQUFLLG1CQUFtQjtBQUN0QixZQUFBLE9BQU8sb0JBQW9CLENBQUM7QUFDOUIsUUFBQSxLQUFLLE1BQU07QUFDVCxZQUFBLE9BQU8sY0FBYyxDQUFDO0FBQ3hCLFFBQUEsS0FBSyxXQUFXO0FBQ2QsWUFBQSxPQUFPLGFBQWEsQ0FBQztBQUN2QixRQUFBLEtBQUssY0FBYztBQUNqQixZQUFBLE9BQU8sc0JBQXNCLENBQUM7QUFDaEMsUUFBQTtBQUNFLFlBQUEsTUFBTSxLQUFLLENBQUMsQ0FBQSxxQkFBQSxFQUF3QixRQUFRLENBQUEsQ0FBRSxDQUFDLENBQUM7QUFDbkQsS0FBQTtBQUNILENBQUM7U0FFZSxJQUFJLENBQ2xCLEtBQXVCLEVBQ3ZCLFVBQTBCLEVBQzFCLHVCQUFtRCxFQUFBO0lBRW5ELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUk7QUFDekIsUUFBQSxJQUFJLE1BQWtCLENBQUM7QUFFdkIsUUFBQSxLQUFLLE1BQU0sUUFBUSxJQUFJLFVBQVUsRUFBRTtBQUNqQyxZQUFBLE1BQU0sR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1lBQ2hFLElBQUksTUFBTSxLQUFLLENBQUMsRUFBRTtBQUNoQixnQkFBQSxPQUFPLE1BQU0sQ0FBQztBQUNmLGFBQUE7QUFDRixTQUFBO0FBRUQsUUFBQSxPQUFPLENBQUMsQ0FBQztBQUNYLEtBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUNkLENBQUksRUFDSixDQUFJLEVBQ0osU0FBc0IsRUFDdEIsS0FBQSxHQUF3QixLQUFLLEVBQUE7QUFFN0IsSUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsSUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO0FBQ2IsUUFBQSxPQUFPLENBQUMsQ0FBQztBQUNWLEtBQUE7QUFFRCxJQUFBLFFBQVEsS0FBSztBQUNYLFFBQUEsS0FBSyxLQUFLO1lBQ1IsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO0FBQ1gsZ0JBQUEsT0FBTyxDQUFDLENBQUM7QUFDVixhQUFBO1lBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWCxhQUFBO0FBQ0QsWUFBQSxPQUFPLENBQUMsQ0FBQztBQUNYLFFBQUEsS0FBSyxNQUFNO1lBQ1QsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO0FBQ1gsZ0JBQUEsT0FBTyxDQUFDLENBQUM7QUFDVixhQUFBO1lBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWCxhQUFBO0FBQ0QsWUFBQSxPQUFPLENBQUMsQ0FBQztBQUNaLEtBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FDNUIsQ0FBaUIsRUFDakIsQ0FBaUIsRUFBQTtBQUVqQixJQUFBLE9BQU8sT0FBTyxDQUNaLENBQUMsRUFDRCxDQUFDLEVBQ0QsQ0FBQyxDQUFpQixLQUNoQixDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxDQUFDLE1BQU0sRUFDaEUsTUFBTSxDQUNQLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FDM0IsQ0FBaUIsRUFDakIsQ0FBaUIsRUFBQTtBQUVqQixJQUFBLE9BQU8sT0FBTyxDQUNaLENBQUMsRUFDRCxDQUFDLEVBQ0QsQ0FBQyxDQUFDLEtBQ0EsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQ3RCLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ2pELENBQUMsTUFBTSxFQUNWLE1BQU0sQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLENBQWlCLEVBQUUsQ0FBaUIsRUFBQTtBQUMxRCxJQUFBLE9BQU8sT0FBTyxDQUNaLENBQUMsRUFDRCxDQUFDLEVBQ0QsQ0FBQyxDQUFDLEtBQ0EsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQ3RCLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUN6RCxDQUFDLE1BQU0sRUFDVixNQUFNLENBQ1AsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxDQUFpQixFQUFFLENBQWlCLEVBQUE7QUFDekQsSUFBQSxPQUFPLE9BQU8sQ0FDWixDQUFDLEVBQ0QsQ0FBQyxFQUNELENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsTUFBTSxFQUM1RCxNQUFNLENBQ1AsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLENBQWlCLEVBQUUsQ0FBaUIsRUFBQTtBQUM1RCxJQUFBLE9BQU8sT0FBTyxDQUNaLENBQUMsRUFDRCxDQUFDLEVBQ0QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQy9ELE1BQU0sQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLENBQWlCLEVBQUUsQ0FBaUIsRUFBQTtBQUMxRCxJQUFBLE9BQU8sT0FBTyxDQUNaLENBQUMsRUFDRCxDQUFDLEVBQ0QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQzdELE1BQU0sQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsQ0FBaUIsRUFBRSxDQUFpQixFQUFBO0FBQzVELElBQUEsT0FBTyxPQUFPLENBQ1osQ0FBQyxFQUNELENBQUMsRUFDRCxDQUFDLENBQUMsS0FDQSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7VUFDbkIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTTtVQUM5QixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQ3hCLEtBQUssQ0FDTixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQzNCLENBQWlCLEVBQ2pCLENBQWlCLEVBQ2pCLHVCQUFtRCxFQUFBO0FBRW5ELElBQUEsT0FBTyxPQUFPLENBQ1osQ0FBQyxFQUNELENBQUMsRUFDRCxDQUFDLENBQUMsS0FBSyxFQUFBLElBQUEsRUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLEVBQUEsR0FBQSx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFJLE1BQU0sQ0FBQSxFQUFBLEVBQ3JELEtBQUssQ0FDTixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsc0JBQXNCLENBQzdCLENBQWlCLEVBQ2pCLENBQWlCLEVBQUE7SUFFakIsT0FBTyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLENBQWlCLEVBQUUsQ0FBaUIsRUFBQTtJQUMxRCxPQUFPLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUVELFNBQVMsc0JBQXNCLENBQzdCLENBQWlCLEVBQ2pCLENBQWlCLEVBQUE7QUFFakIsSUFBQSxPQUFPLE9BQU8sQ0FDWixDQUFDLEVBQ0QsQ0FBQyxFQUNELENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3hFLEtBQUssQ0FDTixDQUFDO0FBQ0o7O0FDdE5PLE1BQU0sR0FBRyxHQUFHQyxpQkFBUSxDQUFDLE9BQU8sR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBQzlDLE1BQU0sNEJBQTRCLEdBQUcsQ0FDMUMsMENBQW1ELE1BQy9DLDBDQUEwQyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7O0FDb0IvRCxTQUFTQyxpQkFBZSxDQUFDLE9BQWUsRUFBRSxJQUFZLEVBQUE7SUFDcEQsT0FBTyxDQUFBLEVBQUcsT0FBTyxDQUFBLEVBQUEsRUFBSyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBLElBQUEsQ0FBTSxDQUFDO0FBQy9DLENBQUM7QUFFSyxNQUFPLHlCQUNYLFNBQVFDLHFCQUE0QixDQUFBO0FBd0JwQyxJQUFBLFdBQUEsQ0FBWSxHQUFRLEVBQUUsUUFBa0IsRUFBRSxPQUFzQixFQUFBO1FBQzlELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVYLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsUUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUN6QixRQUFBLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDO0FBQzlCLFFBQUEsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO1FBQ2xELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUVsQixRQUFBLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUI7QUFDckQsY0FBRSxFQUFFO0FBQ0osY0FBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNO0FBQzlDLGdCQUFBLElBQUksRUFBRSxDQUFDO0FBQ1AsZ0JBQUEsT0FBTyxFQUFFLEVBQUU7QUFDWCxnQkFBQSxJQUFJLEVBQUUsRUFBRTtBQUNSLGdCQUFBLE9BQU8sRUFBRSxFQUFFO0FBQ1gsZ0JBQUEsS0FBSyxFQUFFLEVBQUU7QUFDVCxnQkFBQSxPQUFPLEVBQUUsSUFBSTtBQUNiLGdCQUFBLE9BQU8sRUFBRSxLQUFLO0FBQ2QsZ0JBQUEsWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU0sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDOUIsYUFBQSxDQUFDLENBQUMsQ0FBQztRQUVSLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQixJQUFJLENBQUMsc0JBQXNCLEdBQUdDLGlCQUFRLENBQ3BDLENBQUMsS0FBYSxFQUFFLEVBQXFDLEtBQUk7WUFDdkQsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNqQyxFQUNELElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEVBQ3JDLElBQUksQ0FDTCxDQUFDO0tBQ0g7SUFFRCxhQUFhLEdBQUE7O0FBQ1gsUUFBQSxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsRUFDcEMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUNULENBQUM7UUFDRixNQUFNLGNBQWMsR0FBRyxDQUFBLEVBQUEsR0FBQSxHQUFHLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxNQUFFLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLElBQUksQ0FBQztBQUUzRCxRQUFBLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQyxRQUFBLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxLQUFLO0FBQzVCLGFBQUEsZ0JBQWdCLEVBQUU7YUFDbEIsTUFBTSxDQUNMLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssY0FBYyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUN0RTtBQUNBLGFBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFJOztBQUNULFlBQUEsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFFLENBQUM7WUFDakQsT0FBTztBQUNMLGdCQUFBLElBQUksRUFBRSxDQUFDO2dCQUNQLE9BQU8sRUFBRSxNQUFBQyxnQ0FBdUIsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQUEsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUksRUFBRTtBQUN6RCxnQkFBQSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRztzQkFDM0IsSUFBSSxDQUFDO0FBQ0gsd0JBQUEsR0FBRyxDQUFDLENBQUEsRUFBQSxHQUFBLEtBQUssQ0FBQyxJQUFJLE1BQUEsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDO3dCQUN2QyxJQUFJLENBQUEsRUFBQSxHQUFBQyw2QkFBb0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQUksSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBRSxDQUFDO3FCQUNuRCxDQUFDO0FBQ0osc0JBQUUsRUFBRTtBQUNOLGdCQUFBLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNO3NCQUNqQyxDQUFDLENBQUEsRUFBQSxHQUFBLEtBQUssQ0FBQyxRQUFRLE1BQUEsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdELHNCQUFFLEVBQUU7QUFDTixnQkFBQSxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSTtBQUMvQixzQkFBRSxJQUFJLENBQUMsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUEsS0FBSyxDQUFDLEtBQUssTUFBRSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUksRUFBQSxJQUFBLEVBQUEsQ0FBQSxDQUFDLE9BQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQyxDQUFDLFdBQVcsTUFBQSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBSSxFQUFFLENBQUEsRUFBQSxDQUFDLE1BQUksSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBRSxDQUFDO0FBQzFELHNCQUFFLEVBQUU7QUFDTixnQkFBQSxPQUFPLEVBQUUsS0FBSztBQUNkLGdCQUFBLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLGNBQWM7QUFDakMsZ0JBQUEsWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU0sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDOUIsQ0FBQztBQUNKLFNBQUMsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQ2hCSixpQkFBZSxDQUFDLENBQUEseUJBQUEsQ0FBMkIsRUFBRSxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQ3hFLENBQUM7QUFFRixRQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxHQUFHLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZEO0lBRUssZUFBZSxDQUFDLFdBQW1CLEVBQUUsUUFBa0IsRUFBQTs7QUFDM0QsWUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNuRSxJQUFJLENBQUMsSUFBSSxFQUFFOztBQUVULGdCQUFBLElBQUlLLGVBQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2dCQUN4QyxPQUFPO0FBQ1IsYUFBQTtBQUVELFlBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZCxDQUFBLENBQUE7QUFBQSxLQUFBO0FBRUQsSUFBQSxjQUFjLENBQUMsT0FBc0IsRUFBQTs7QUFDbkMsUUFBQSxNQUFNLFdBQVcsR0FBRyxDQUNsQixlQUF5QixFQUN6QixlQUF5QixLQUNMO0FBQ3BCLFlBQUEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUM3QixZQUFBLElBQUksZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDOUIsZ0JBQUEsS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEUsYUFBQTtBQUNELFlBQUEsSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUM5QixnQkFBQSxLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsRSxhQUFBO0FBQ0QsWUFBQSxPQUFPLEtBQUssQ0FBQztBQUNmLFNBQUMsQ0FBQztBQUVGLFFBQUEsTUFBTSxjQUFjLEdBQUcsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsMENBQUUsTUFBTSxDQUFDLElBQUksTUFBQSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBSSxFQUFFLENBQUM7UUFDekUsT0FBTyxPQUFPLENBQUMsZ0JBQWdCO2NBQzNCLFdBQVcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQ0FBaUMsQ0FBQztjQUNoRSxXQUFXLENBQ1QsT0FBTyxDQUFDLHlCQUF5QixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FDdEMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FDNUMsRUFDRCxPQUFPLENBQUMseUJBQXlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUN0QyxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLGNBQWMsQ0FBQyxDQUM1QyxDQUNGLENBQUM7S0FDUDtBQUVELElBQUEsY0FBYyxDQUFDLEtBQWEsRUFBQTtRQUMxQixJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtBQUNqRCxZQUFBLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxTQUFBO0FBRUQsUUFBQSxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxLQUFJO1lBQzdCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEtBQUk7Z0JBQzNDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQixhQUFDLENBQUMsQ0FBQztBQUNMLFNBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFFRCxJQUFBLGVBQWUsQ0FBQyxLQUFhLEVBQUE7O0FBQzNCLFFBQUEsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWhDLElBQUksdUJBQXVCLEdBQStCLEVBQUUsQ0FBQztBQUM3RCxRQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSTtBQUNyRCxZQUFBLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQyxTQUFDLENBQUMsQ0FBQztBQUVILFFBQUEsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjO2FBQ2pELE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBYSxDQUFDO0FBQzlCLGFBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFFbEQsSUFDRSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxPQUFPO0FBQ3hELFlBQUEsZUFBZSxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQ2hDO0FBQ0EsWUFBQSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQSxlQUFBLEVBQWtCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFBLENBQUUsQ0FBQyxDQUFDO0FBQy9ELFlBQUEsSUFBSSxDQUFDLE9BQU8sR0FBRyxlQUFlLEtBQWYsSUFBQSxJQUFBLGVBQWUsS0FBZixLQUFBLENBQUEsR0FBQSxlQUFlLEdBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQztBQUN0RCxZQUFBLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNyQixZQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFBLGNBQUEsRUFBaUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUEsQ0FBRSxDQUFDLENBQUM7QUFDL0QsU0FBQTtBQUNELFFBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQzdELGNBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7Y0FDN0MsS0FBSyxDQUFDO0FBQ1YsUUFBQSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO0FBQzdCLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFBLEVBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUcsRUFBQSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdEUsU0FBQTtRQUVELElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBRTVCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUV4RCxRQUFBLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtBQUNqQyxZQUFBLE1BQU0sY0FBYyxHQUFHLENBQUEsRUFBQSxHQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxNQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFFLElBQUksQ0FBQztZQUNoRSxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQ25CLGdCQUFBLE9BQU8sRUFBRSxDQUFDO0FBQ1gsYUFBQTs7WUFHRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDekQsWUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWTtpQkFDNUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUEsSUFBQSxFQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsRUFBQSxHQUFBLFlBQVksQ0FBQyxjQUFjLENBQUMsTUFBRSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxFQUFBLENBQUM7aUJBQzdELEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FDTCxpQkFBaUIsQ0FDZixDQUFDLEVBQ0QsRUFBRSxFQUNGLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsNkJBQTZCLENBQzVDLENBQ0Y7aUJBQ0EsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUM7aUJBQ2xFLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxZQUFZLENBQUMsTUFDaEJMLGlCQUFlLENBQUMsQ0FBb0IsaUJBQUEsRUFBQSxLQUFLLEVBQUUsRUFBRSxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQ3hFLENBQUM7QUFDRixZQUFBLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLE1BQVcsTUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBQSxDQUFDLEtBQUUsS0FBSyxFQUFBLENBQUEsQ0FBRyxDQUFDLENBQUM7QUFDbkQsU0FBQTtBQUVELFFBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUU7QUFDNUIsWUFBQSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQ2xCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FDbkMsQ0FBQyxhQUFhLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FDckQsRUFDRCx1QkFBdUIsQ0FDeEI7aUJBQ0UsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO0FBQzlDLGlCQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLE1BQUssTUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBTSxDQUFDLENBQUEsRUFBQSxFQUFFLEtBQUssRUFBQSxDQUFBLENBQUcsQ0FBQyxDQUFDO0FBRXhDLFlBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUNoQkEsaUJBQWUsQ0FDYixDQUFvQixpQkFBQSxFQUFBLElBQUksQ0FBQyxXQUFXLENBQUssRUFBQSxFQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFHLENBQUEsQ0FBQSxFQUM3RCxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUMxQixDQUNGLENBQUM7QUFDRixZQUFBLE9BQU8sT0FBTyxDQUFDO0FBQ2hCLFNBQUE7QUFFRCxRQUFBLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFlBQVk7QUFDekMsYUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQ0wsaUJBQWlCLENBQ2YsQ0FBQyxFQUNELEVBQUUsRUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUM1QyxDQUNGO2FBQ0EsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztBQUV0RSxRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FDaEIsa0JBQWtCLEVBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUMzQix1QkFBdUIsQ0FDeEIsQ0FBQztBQUVGLFFBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUNoQkEsaUJBQWUsQ0FDYixDQUFvQixpQkFBQSxFQUFBLElBQUksQ0FBQyxXQUFXLENBQUssRUFBQSxFQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFHLENBQUEsQ0FBQSxFQUM3RCxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUMxQixDQUNGLENBQUM7QUFFRixRQUFBLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1lBQzVCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ2YsS0FBSyxDQUFDLE1BQU0sRUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUNyQyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUUsQ0FBQTtBQUNyQixZQUFBLEdBQUcsRUFBRSw2Q0FBNkM7QUFDbkQsU0FBQSxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFdkMsUUFBQSxPQUFPLEtBQUs7YUFDVCxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUM7QUFDOUMsYUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxNQUFLLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQU0sQ0FBQyxDQUFBLEVBQUEsRUFBRSxLQUFLLEVBQUEsQ0FBQSxDQUFHLENBQUMsQ0FBQztLQUN6QztJQUVELG9CQUFvQixHQUFBOztBQUNsQixRQUFBLENBQUEsRUFBQSxHQUFBLElBQUksQ0FBQyxlQUFlLE1BQUUsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsTUFBTSxFQUFFLENBQUM7QUFDL0IsUUFBQSxDQUFBLEVBQUEsR0FBQSxJQUFJLENBQUMsY0FBYyxNQUFFLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLE1BQU0sRUFBRSxDQUFDO0FBQzlCLFFBQUEsQ0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDLFlBQVksTUFBRSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxNQUFNLEVBQUUsQ0FBQztBQUU1QixRQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO0FBQy9CLFlBQUEsR0FBRyxFQUFFLGdEQUFnRDtBQUN0RCxTQUFBLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRTdELFFBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFO0FBQ2pDLFlBQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQSxlQUFBLENBQWlCLENBQUMsQ0FBQztBQUNwRCxTQUFBO0FBQU0sYUFBQTtBQUNMLFlBQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQSxFQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFBLEtBQUEsQ0FBTyxDQUFDLENBQUM7QUFDOUQsU0FBQTtBQUNELFFBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0QsU0FBQTtBQUNELFFBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDOUQsU0FBQTtBQUNELFFBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsU0FBQTtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUUxQyxRQUFBLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUU7QUFDN0IsWUFBQSxJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztnQkFDOUIsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXO0FBQ3RCLGdCQUFBLEdBQUcsRUFBRSwrQ0FBK0M7QUFDckQsYUFBQSxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM3RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNwRCxTQUFBO0tBQ0Y7SUFFRCxnQkFBZ0IsQ0FBQyxJQUFvQixFQUFFLEVBQWUsRUFBQTtRQUNwRCxNQUFNLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxHQUFHLGNBQWMsQ0FBQyxJQUFJLEVBQUU7QUFDdkQsWUFBQSxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhO0FBQzFDLFlBQUEsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0I7QUFDNUQsWUFBQSx1QkFBdUIsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QjtBQUM5RCxZQUFBLGdCQUFnQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCO0FBQ2hELFlBQUEsZUFBZSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZTtBQUMvQyxTQUFBLENBQUMsQ0FBQztBQUVILFFBQUEsSUFBSSxjQUFjLEVBQUU7QUFDbEIsWUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3JDLFNBQUE7QUFDRCxRQUFBLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekI7SUFFRCxjQUFjLEdBQUE7UUFDWixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFdkIsUUFBQSxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxFQUFFLFFBQVE7QUFDZCxZQUFBLEdBQUcsRUFBRSx1Q0FBdUM7QUFDN0MsU0FBQSxDQUFDLENBQUM7QUFDSCxRQUFBLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBSztZQUMxQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakQsU0FBQyxDQUFDLENBQUM7QUFDSCxRQUFBLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDbEQ7SUFFSyxrQkFBa0IsQ0FDdEIsSUFBb0IsRUFDcEIsR0FBK0IsRUFBQTs7QUFFL0IsWUFBQSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzdCLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUU7Z0JBQzlCLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRTtvQkFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFJO3dCQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoRCx3QkFBQSxJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hELHFCQUFDLENBQUMsQ0FBQztBQUNKLGlCQUFBO0FBQU0scUJBQUE7QUFDTCxvQkFBQSxJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3ZELGlCQUFBO2dCQUNELE9BQU87QUFDUixhQUFBO1lBRUQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2hCLGdCQUFBLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNoRSxhQUFBO0FBRUQsWUFBQSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQjtrQkFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FDaEMsSUFBSSxDQUFDLElBQUksRUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUc7QUFDcEMsaUJBQUE7a0JBQ0QsU0FBUyxDQUFDO0FBRWQsWUFBQSxJQUFJLElBQWMsQ0FBQztBQUNuQixZQUFBLE1BQU0sR0FBRyxHQUFJLEdBQXFCLENBQUMsR0FBRyxDQUFDO0FBRXZDLFlBQUEsSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLEdBQUcsS0FBSyxHQUFHLEVBQUU7Z0JBQzlCLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyRSxnQkFBQSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUNuQixZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVCLGlCQUFBO0FBQU0scUJBQUE7QUFDTCxvQkFBQSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUN6RSxpQkFBQTtnQkFDRCxPQUFPO0FBQ1IsYUFBQTtBQUVELFlBQUEsSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLEdBQUcsS0FBSyxHQUFHLEVBQUU7Z0JBQzlCLElBQUksR0FBRyxRQUFRLENBQUM7QUFDakIsYUFBQTtpQkFBTSxJQUFJLEdBQUcsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLFFBQVEsSUFBSSxHQUFHLEtBQUssR0FBRyxFQUFFO2dCQUNyRCxJQUFJLEdBQUcsY0FBYyxDQUFDO0FBQ3ZCLGFBQUE7QUFBTSxpQkFBQSxJQUFJLEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLEdBQUcsS0FBSyxHQUFHLEVBQUU7Z0JBQ3RELElBQUksR0FBRyxnQkFBZ0IsQ0FBQztBQUN6QixhQUFBO0FBQU0saUJBQUEsSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3BDLElBQUksR0FBRyxPQUFPLENBQUM7QUFDaEIsYUFBQTtpQkFBTSxJQUFJLEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO2dCQUNyQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ2QsYUFBQTtBQUFNLGlCQUFBO2dCQUNMLElBQUksR0FBRyxNQUFNLENBQUM7QUFDZixhQUFBO0FBRUQsWUFBQSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQ2pFLENBQUEsQ0FBQTtBQUFBLEtBQUE7QUFFTyxJQUFBLFlBQVksQ0FBQyxTQUF1QixFQUFBO0FBQzFDLFFBQUEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGdDQUFnQyxFQUFFO0FBQ2xELFlBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLFNBQUE7S0FDRjtJQUVPLFVBQVUsR0FBQTtRQUNoQixNQUFNLFVBQVUsR0FBRyw0QkFBNEIsQ0FDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQywwQ0FBMEMsQ0FDekQsQ0FBQztBQUVGLFFBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUNuQixnQkFBQTtBQUNFLG9CQUFBLE9BQU8sRUFBRSxDQUFBLEtBQUEsRUFBUSxHQUFHLENBQUEsU0FBQSxFQUFZLEdBQUcsQ0FBVSxRQUFBLENBQUE7QUFDN0Msb0JBQUEsT0FBTyxFQUFFLFVBQVU7QUFDcEIsaUJBQUE7Z0JBQ0QsRUFBRSxPQUFPLEVBQUUsQ0FBSSxDQUFBLEVBQUEsVUFBVSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRTtnQkFDdkQsRUFBRSxPQUFPLEVBQUUsQ0FBSSxDQUFBLEVBQUEsR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRTtBQUNqRCxnQkFBQSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRTtBQUM5QyxnQkFBQSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtnQkFDbkMsRUFBRSxPQUFPLEVBQUUsQ0FBSSxDQUFBLEVBQUEsR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFO2dCQUN0RCxFQUFFLE9BQU8sRUFBRSxDQUFJLENBQUEsRUFBQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsK0JBQStCLEVBQUU7Z0JBQ25FLEVBQUUsT0FBTyxFQUFFLENBQUksQ0FBQSxFQUFBLEdBQUcsV0FBVyxFQUFFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRTtnQkFDdkUsRUFBRSxPQUFPLEVBQUUsQ0FBSSxDQUFBLEVBQUEsR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFO2dCQUN4RCxFQUFFLE9BQU8sRUFBRSxDQUFJLENBQUEsRUFBQSxHQUFHLFNBQVMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFO0FBQ3ZELGdCQUFBLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO2dCQUMzQyxFQUFFLE9BQU8sRUFBRSxDQUFJLENBQUEsRUFBQSxHQUFHLFdBQVcsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUU7Z0JBQzlELEVBQUUsT0FBTyxFQUFFLENBQUksQ0FBQSxFQUFBLEdBQUcsV0FBVyxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRTtnQkFDaEUsRUFBRSxPQUFPLEVBQUUsQ0FBSSxDQUFBLEVBQUEsR0FBRyxlQUFlLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFO2dCQUMvRCxFQUFFLE9BQU8sRUFBRSxDQUFJLENBQUEsRUFBQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUU7QUFDcEQsZ0JBQUEsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRTtBQUNuRCxnQkFBQSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFO0FBQzdELGdCQUFBLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFO0FBQ3pDLGFBQUEsQ0FBQyxDQUFDO0FBQ0osU0FBQTtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQ2hELENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUMvQyxDQUFDO0FBQ0YsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUMvRCxDQUFDO0FBQ0YsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFLO0FBQ3JDLFlBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzFELFlBQUEsT0FBTyxLQUFLLENBQUM7QUFDZixTQUFDLENBQUMsQ0FBQztBQUNILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQUs7QUFDOUMsWUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUMxRSxZQUFBLE9BQU8sS0FBSyxDQUFDO0FBQ2YsU0FBQyxDQUFDLENBQUM7QUFDSCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FDMUQsQ0FBQztBQUNGLFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDOUQsQ0FBQztBQUVGLFFBQUEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQywwQ0FBMEM7QUFDMUUsY0FBRSxLQUFLO2NBQ0wsS0FBSyxDQUFDO1FBQ1YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSTtBQUN4QyxZQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQUs7Z0JBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDMUMsZ0JBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkMsYUFBQyxDQUFDLENBQUM7QUFDTCxTQUFDLENBQUMsQ0FBQztBQUVILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBSztZQUMzQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRCxhQUFBO0FBQ0gsU0FBQyxDQUFDLENBQUM7QUFDSCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFLO1lBQ2xELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9DLGFBQUE7QUFDSCxTQUFDLENBQUMsQ0FBQztBQUNILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQUs7WUFDOUMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNwQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbEQsYUFBQTtBQUNILFNBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQUs7WUFDekQsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNwQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDakQsYUFBQTtBQUNILFNBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFLO0FBQ3JDLFlBQUEsUUFBUSxDQUFDLGFBQWEsQ0FDcEIsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQ25ELENBQUM7QUFDSixTQUFDLENBQUMsQ0FBQztBQUNILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBSztBQUNyQyxZQUFBLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzRSxTQUFDLENBQUMsQ0FBQztBQUNILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBSztBQUNyQyxZQUFBLFFBQVEsQ0FBQyxhQUFhLENBQ3BCLElBQUksYUFBYSxDQUFDLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUNuRCxDQUFDO0FBQ0osU0FBQyxDQUFDLENBQUM7QUFDSCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQUs7QUFDckMsWUFBQSxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksYUFBYSxDQUFDLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0UsU0FBQyxDQUFDLENBQUM7QUFFSCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxHQUFHLEtBQUk7WUFDckMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBRXJCLFlBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtnQkFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLO0FBQ2hCLG9CQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzs7Z0JBRS9ELElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDaEQsYUFBQTtBQUNILFNBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFLO0FBQ3JDLFlBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDOztZQUV4QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2pELFNBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFLO0FBQ3JDLFlBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzVELFNBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFDRjs7QUNoaUJELFNBQVMsVUFBVSxDQUNqQixJQUFvQixFQUNwQixLQUFhLEVBQ2IsT0FBeUQsRUFDekQsNEJBQXFDLEVBQUE7SUFFckMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixJQUFBLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUcsQ0FBQztBQUN6QixJQUFBLFFBQ0UsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FDWCxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSw0QkFBNEIsQ0FBQyxDQUMxRSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQzFCO0FBQ0osQ0FBQztBQUVELFNBQVMsYUFBYSxDQUNwQixJQUFvQixFQUNwQixPQUFpQixFQUNqQixPQUF5RCxFQUN6RCw0QkFBcUMsRUFBQTtJQUVyQyxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQ3JCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSw0QkFBNEIsQ0FBQyxDQUMzRCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsY0FBYyxDQUNyQixJQUFvQixFQUNwQixPQUFpQixFQUNqQiw0QkFBcUMsRUFBQTtBQUVyQyxJQUFBLElBQ0UsYUFBYSxDQUNYLElBQUksRUFDSixPQUFPLEVBQ1AsQ0FBQyxJQUFJLEVBQUUsS0FBSyxLQUNWLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsNEJBQTRCLENBQUMsRUFDeEUsNEJBQTRCLENBQzdCLEVBQ0Q7QUFDQSxRQUFBLE9BQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBWSxJQUFJLENBQUEsRUFBQSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUcsQ0FBQSxDQUFBO0FBQzlDLEtBQUE7QUFFRCxJQUFBLElBQ0UsYUFBYSxDQUNYLElBQUksRUFDSixPQUFPLEVBQ1AsQ0FBQyxJQUFJLEVBQUUsS0FBSyxLQUNWLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsNEJBQTRCLENBQUMsRUFDdEUsNEJBQTRCLENBQzdCLEVBQ0Q7QUFDQSxRQUFBLE9BQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBWSxJQUFJLENBQUEsRUFBQSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUcsQ0FBQSxDQUFBO0FBQ3ZDLEtBQUE7QUFFRCxJQUFBLElBQ0UsYUFBYSxDQUNYLElBQUksRUFDSixPQUFPLEVBQ1AsQ0FBQyxJQUFJLEVBQUUsS0FBSyxLQUNWLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsNEJBQTRCLENBQUMsRUFDdEUsNEJBQTRCLENBQzdCLEVBQ0Q7QUFDQSxRQUFBLE9BQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBWSxJQUFJLENBQUEsRUFBQSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUcsQ0FBQSxDQUFBO0FBQzVDLEtBQUE7QUFFRCxJQUFBLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVLLE1BQU8sU0FBVSxTQUFRQyxxQkFBNEIsQ0FBQTtJQU16RCxXQUFZLENBQUEsR0FBUSxFQUFFLFFBQWtCLEVBQUE7UUFDdEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVgsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwQyxRQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBRXpCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUVsQixRQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVM7QUFDOUIsYUFBQSxVQUFVLEVBQUU7YUFDWixNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDMUIsYUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU07QUFDWCxZQUFBLE1BQU0sRUFBRSxDQUFDO0FBQ1YsU0FBQSxDQUFDLENBQUMsQ0FBQztRQUVOLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUMvQixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLGlDQUFpQyxFQUMvQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsQ0FBQztLQUNIO0FBRUQsSUFBQSxjQUFjLENBQUMsS0FBYSxFQUFBO0FBQzFCLFFBQUEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFN0MsT0FBTyxJQUFJLENBQUMsYUFBYTtBQUN0QixhQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FDTCxjQUFjLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQ25FO2FBQ0EsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUM7YUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxLQUFLLFdBQVcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxRCxhQUFBLElBQUksQ0FDSCxNQUFNLENBQ0osQ0FBQyxDQUFDLEtBQ0EsQ0FBQyxDQUFDLFNBQVMsS0FBSyxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ2pFLE1BQU0sQ0FDUCxDQUNGO0FBQ0EsYUFBQSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ2pCO0lBRUQsZ0JBQWdCLENBQUMsSUFBb0IsRUFBRSxFQUFlLEVBQUE7UUFDcEQsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBQ3hCLFlBQUEsR0FBRyxFQUFFO2dCQUNILDhCQUE4QjtnQkFDOUIsd0NBQXdDO0FBQ3pDLGFBQUE7QUFDRixTQUFBLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QixZQUFBLEdBQUcsRUFBRSxxQ0FBcUM7QUFDM0MsU0FBQSxDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDMUIsWUFBQSxHQUFHLEVBQUUscUNBQXFDO0FBQzFDLFlBQUEsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSTtBQUN2QixTQUFBLENBQUMsQ0FBQztBQUNILFFBQUEsUUFBUSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVoQyxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUM7QUFDN0IsWUFBQSxHQUFHLEVBQUUseUNBQXlDO0FBQy9DLFNBQUEsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxZQUFZLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3JELFFBQUEsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFBLENBQUEsRUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUEsQ0FBRSxDQUFDLENBQUM7QUFDdkQsUUFBQSxRQUFRLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRW5DLFFBQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUU5QixRQUFBLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekI7QUFFSyxJQUFBLGtCQUFrQixDQUFDLElBQW9CLEVBQUE7O1lBQzNDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3RELElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2YsT0FBTztBQUNSLGFBQUE7WUFFRCxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FDbkMsVUFBVSxFQUNWLENBQUEsRUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQSxDQUFBLEVBQUksVUFBVSxDQUFDLElBQUksQ0FBRSxDQUFBLENBQ3pDLENBQUM7U0FDSCxDQUFBLENBQUE7QUFBQSxLQUFBO0lBRU8sVUFBVSxHQUFBO0FBQ2hCLFFBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUNuQixnQkFBQTtBQUNFLG9CQUFBLE9BQU8sRUFBRSxDQUFBLEtBQUEsRUFBUSxHQUFHLENBQUEsU0FBQSxFQUFZLEdBQUcsQ0FBVSxRQUFBLENBQUE7QUFDN0Msb0JBQUEsT0FBTyxFQUFFLFVBQVU7QUFDcEIsaUJBQUE7QUFDRCxnQkFBQSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRTtBQUN0QyxnQkFBQSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRTtBQUN6QyxhQUFBLENBQUMsQ0FBQztBQUNKLFNBQUE7QUFFRCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQUs7QUFDckMsWUFBQSxRQUFRLENBQUMsYUFBYSxDQUNwQixJQUFJLGFBQWEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FDbkQsQ0FBQztBQUNKLFNBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFLO0FBQ3JDLFlBQUEsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNFLFNBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFLO0FBQ3JDLFlBQUEsUUFBUSxDQUFDLGFBQWEsQ0FDcEIsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQ25ELENBQUM7QUFDSixTQUFDLENBQUMsQ0FBQztBQUNILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBSztBQUNyQyxZQUFBLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzRSxTQUFDLENBQUMsQ0FBQztLQUNKO0FBQ0Y7O0FDMUxLLE1BQU8sV0FDWCxTQUFRQSxxQkFBNEIsQ0FBQTtBQWNwQyxJQUFBLFdBQUEsQ0FBWSxHQUFRLEVBQUUsUUFBa0IsRUFBRSxRQUFpQixFQUFBO1FBQ3pELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQVhiLElBQVEsQ0FBQSxRQUFBLEdBQXFCLEVBQUUsQ0FBQzs7UUFLaEMsSUFBbUIsQ0FBQSxtQkFBQSxHQUFHLENBQUMsQ0FBQztBQU90QixRQUFBLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRWxCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsUUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUN6QixRQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBRXpCLFFBQUEsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTTtBQUNsRSxZQUFBLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUMvQixLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQWdDO1lBQ3pDLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUTtBQUNwQixZQUFBLEdBQUcsRUFBRSxLQUFLO0FBQ1YsWUFBQSxLQUFLLEVBQUUsQ0FBQztBQUNULFNBQUEsQ0FBQyxDQUFDLENBQUM7UUFFSixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFLOztBQUMxQyxZQUFBLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3JELE9BQU87QUFDUixhQUFBO0FBRUQsWUFBQSxNQUFNLFNBQVMsR0FDYixDQUFBLEVBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQywwQ0FBRSxLQUFLLE1BQUEsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQ3JFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QyxTQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUNwQjtBQUVELElBQUEsTUFBTSxDQUFDLEtBQWEsRUFBRSxPQUFBLEdBQW1CLElBQUksRUFBQTtRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDMUMsUUFBQSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLFFBQUEsSUFBSSxPQUFPLEVBQUU7QUFDWCxZQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdEUsU0FBQTtLQUNGO0lBRUQsa0JBQWtCLEdBQUE7QUFDaEIsUUFBQSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQztBQUN6RCxjQUFFLENBQUM7QUFDSCxjQUFFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUM7S0FDbEM7SUFFRCxzQkFBc0IsR0FBQTtBQUNwQixRQUFBLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsR0FBRyxDQUFDO0FBQ3JDLGNBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQztBQUN2QixjQUFFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUM7S0FDbEM7SUFFRCxNQUFNLEdBQUE7O1FBQ0osS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWYsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLENBQUEsRUFBQSxHQUFBLFlBQVksQ0FBQyxjQUFjO2lCQUN4QixhQUFhLENBQUMsV0FBVyxDQUFDLE1BQUEsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLENBQ3pCLFFBQVEsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1lBRWxFLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RFLFFBQVEsS0FBQSxJQUFBLElBQVIsUUFBUSxLQUFSLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLFFBQVEsQ0FBRSxRQUFRLENBQUMsaURBQWlELENBQUMsQ0FBQztZQUV0RSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLDJCQUEyQixFQUFFLENBQUM7QUFFbEUsWUFBQSxJQUFJLFlBQVksRUFBRTtBQUNoQixnQkFBQSxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDO0FBQzVDLGdCQUFBLE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7QUFDOUMsZ0JBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDNUMsZ0JBQUEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7Z0JBQzlDLE1BQU0sRUFDSixDQUFDLEVBQUUsS0FBSyxFQUNSLENBQUMsRUFBRSxLQUFLLEVBQ1IsS0FBSyxFQUFFLFNBQVMsR0FDakIsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUM7Z0JBQ3JELE1BQU0sRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsUUFBUyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFFekQsZ0JBQUEsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDbkIsV0FBVyxHQUFHLFVBQVUsR0FBRyxFQUFFLEVBQzdCLEtBQUssR0FBRyxTQUFTLEdBQUcsR0FBRyxDQUN4QixDQUFDO0FBQ0YsZ0JBQUEsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsV0FBVyxHQUFHLEVBQUUsRUFBRSxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUM7QUFFdkUsZ0JBQUEsUUFBUSxLQUFSLElBQUEsSUFBQSxRQUFRLEtBQVIsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsUUFBUSxDQUFFLFlBQVksQ0FBQyxPQUFPLEVBQUUsU0FBUyxJQUFJLENBQUEsU0FBQSxFQUFZLEdBQUcsQ0FBQSxFQUFBLENBQUksQ0FBQyxDQUFDO0FBQ25FLGFBQUE7QUFDRixTQUFBO1FBRUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1FBQ2xFLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzVDLE9BQU87QUFDUixTQUFBO0FBRUQsUUFBQSxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDcEMsUUFBQSxNQUFNLE1BQU0sR0FDVixJQUFJLEtBQUssUUFBUTtBQUNmLGNBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRTtBQUNuQyxjQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0FBQzlCLGdCQUFBLEVBQUUsRUFBRSxDQUFDO0FBQ0wsZ0JBQUEsSUFBSSxFQUFFLFlBQVksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFO0FBQzNDLGFBQUEsQ0FBQyxDQUFDO1FBQ1QsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU87QUFDUixTQUFBO1FBRUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQ3pDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQ3hDLENBQUM7QUFDRixRQUFBLElBQUksY0FBYyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQ3pCLFlBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QyxTQUFBO2FBQU0sSUFBSSxjQUFjLEtBQUssQ0FBQyxFQUFFO0FBQy9CLFlBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkIsU0FBQTtBQUFNLGFBQUE7WUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEMsU0FBQTtLQUNGO0FBRUQsSUFBQSxjQUFjLENBQUMsS0FBYSxFQUFBO0FBQzFCLFFBQUEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFN0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUk7QUFDdkMsWUFBQSxNQUFNLEdBQUcsR0FDUCxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FDVCxhQUFhLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUN2RSxDQUFDO1lBQ0osT0FBWSxNQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUFBLENBQUMsQ0FBRSxFQUFBLEVBQUEsR0FBRyxFQUFHLENBQUEsQ0FBQTtBQUN2QixTQUFDLENBQUMsQ0FBQztBQUVILFFBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqRCxRQUFBLE9BQU8sV0FBVyxDQUFDO0tBQ3BCO0lBRUQsZ0JBQWdCLENBQUMsSUFBb0IsRUFBRSxFQUFlLEVBQUE7UUFDcEQsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBQ3hCLFlBQUEsR0FBRyxFQUFFLDhCQUE4QjtBQUNwQyxTQUFBLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QixZQUFBLEdBQUcsRUFBRSxxQ0FBcUM7QUFDM0MsU0FBQSxDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDMUIsWUFBQSxHQUFHLEVBQUU7Z0JBQ0gscUNBQXFDO2dCQUNyQyxDQUE2QywyQ0FBQSxDQUFBO0FBQzdDLGdCQUFBLElBQUksQ0FBQyxHQUFHO0FBQ04sc0JBQUUsQ0FBaUQsK0NBQUEsQ0FBQTtBQUNuRCxzQkFBRSxvREFBb0Q7Z0JBQ3hELENBQThDLDJDQUFBLEVBQUEsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFBO0FBQzNELGFBQUE7WUFDRCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDakIsU0FBQSxDQUFDLENBQUM7QUFDSCxRQUFBLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFaEMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1osTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakUsWUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDWixRQUFRLENBQUMsVUFBVSxDQUFDO0FBQ2xCLG9CQUFBLEdBQUcsRUFBRSwwREFBMEQ7b0JBQy9ELElBQUksRUFBRSxDQUFHLEVBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBTSxHQUFBLEVBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUUsQ0FBQTtBQUMzQyxpQkFBQSxDQUFDLENBQUM7QUFDSixhQUFBO0FBQ0YsU0FBQTtBQUVELFFBQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUU5QixRQUFBLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekI7QUFFSyxJQUFBLGtCQUFrQixDQUFDLElBQW9CLEVBQUE7O1lBQzNDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN0QyxDQUFBLENBQUE7QUFBQSxLQUFBO0lBRUQsV0FBVyxHQUFBO0FBQ1QsUUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtZQUNuQyxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQ25CLGdCQUFBO0FBQ0Usb0JBQUEsT0FBTyxFQUFFLE1BQU07QUFDZixvQkFBQSxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyw4QkFBOEI7QUFDdEQsaUJBQUE7QUFDRCxnQkFBQTtBQUNFLG9CQUFBLE9BQU8sRUFBRSxvQkFBb0I7QUFDN0Isb0JBQUEsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCO0FBQzlDLGlCQUFBO0FBQ0QsZ0JBQUE7b0JBQ0UsT0FBTyxFQUFFLENBQUksQ0FBQSxFQUFBLEdBQUcsQ0FBVSxRQUFBLENBQUE7QUFDMUIsb0JBQUEsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCO0FBQzlDLGlCQUFBO0FBQ0QsZ0JBQUE7b0JBQ0UsT0FBTyxFQUFFLENBQUksQ0FBQSxFQUFBLEdBQUcsQ0FBVSxRQUFBLENBQUE7QUFDMUIsb0JBQUEsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsd0JBQXdCO0FBQ2hELGlCQUFBO2dCQUNELEVBQUUsT0FBTyxFQUFFLENBQUksQ0FBQSxFQUFBLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUU7QUFDakQsZ0JBQUEsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRTtBQUM3QyxnQkFBQSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRTtBQUN6QyxhQUFBLENBQUMsQ0FBQztBQUNKLFNBQUE7QUFFRCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQUs7QUFDckMsWUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7O1lBRXhCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDakQsU0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7QUFDWixhQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUksQ0FBQyxDQUFDO0FBQ3hELGFBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFNUMsTUFBTSxZQUFZLEdBQUcsTUFBSztBQUN4QixZQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hELFNBQUMsQ0FBQztRQUNGLE1BQU0sZ0JBQWdCLEdBQUcsTUFBSztBQUM1QixZQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVELFNBQUMsQ0FBQztRQUNGLE1BQU0sYUFBYSxHQUFHLE1BQUs7O0FBQ3pCLFlBQUEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzlCLE9BQU87QUFDUixhQUFBO0FBQ0QsWUFBQSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUM5QixnQkFBQSxZQUFZLEVBQUUsQ0FBQztnQkFDZixPQUFPO0FBQ1IsYUFBQTtBQUVELFlBQUEsTUFBTSxTQUFTLEdBQ2IsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsMENBQUUsS0FBSyxNQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxHQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEMsU0FBQyxDQUFDO1FBQ0YsTUFBTSxpQkFBaUIsR0FBRyxNQUFLO0FBQzdCLFlBQUEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzlCLE9BQU87QUFDUixhQUFBO0FBQ0QsWUFBQSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUM5QixnQkFBQSxnQkFBZ0IsRUFBRSxDQUFDO2dCQUNuQixPQUFPO0FBQ1IsYUFBQTtZQUVELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUMxQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FDM0MsQ0FBQztZQUNGLE1BQU0sYUFBYSxHQUNqQixZQUFZLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQ25FLFlBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakUsU0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFLO0FBQ3hDLFlBQUEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLDhCQUE4QixLQUFLLFVBQVU7QUFDMUQsa0JBQUUsWUFBWTtBQUNkLGtCQUFFLGFBQWEsR0FBRyxDQUFDO0FBQ3ZCLFNBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFLO0FBQ3RDLFlBQUEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLDhCQUE4QixLQUFLLFVBQVU7QUFDMUQsa0JBQUUsZ0JBQWdCO0FBQ2xCLGtCQUFFLGlCQUFpQixHQUFHLENBQUM7QUFDM0IsU0FBQyxDQUFDLENBQUM7QUFFSCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQUs7QUFDckMsWUFBQSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEtBQUssVUFBVTtBQUNsRCxrQkFBRSxZQUFZO0FBQ2Qsa0JBQUUsYUFBYSxHQUFHLENBQUM7QUFDdkIsU0FBQyxDQUFDLENBQUM7QUFDSCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQUs7QUFDckMsWUFBQSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEtBQUssVUFBVTtBQUNsRCxrQkFBRSxnQkFBZ0I7QUFDbEIsa0JBQUUsaUJBQWlCLEdBQUcsQ0FBQztBQUMzQixTQUFDLENBQUMsQ0FBQztBQUVILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBSztBQUNyQyxZQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsS0FBSyxVQUFVO0FBQ3BELGtCQUFFLFlBQVk7QUFDZCxrQkFBRSxhQUFhLEdBQUcsQ0FBQztBQUN2QixTQUFDLENBQUMsQ0FBQztBQUNILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBSztBQUNyQyxZQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsS0FBSyxVQUFVO0FBQ3BELGtCQUFFLGdCQUFnQjtBQUNsQixrQkFBRSxpQkFBaUIsR0FBRyxDQUFDO0FBQzNCLFNBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsR0FBRyxLQUFJO1lBQ3JDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNyQixZQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsS0FBSyxVQUFVO0FBQ2xELGtCQUFFLFlBQVk7QUFDZCxrQkFBRSxhQUFhLEdBQUcsQ0FBQztBQUN2QixTQUFDLENBQUMsQ0FBQztBQUNILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxHQUFHLEtBQUk7WUFDNUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3JCLFlBQUEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixLQUFLLFVBQVU7QUFDbEQsa0JBQUUsZ0JBQWdCO0FBQ2xCLGtCQUFFLGlCQUFpQixHQUFHLENBQUM7QUFDM0IsU0FBQyxDQUFDLENBQUM7S0FDSjtBQUNGOztTQ2pTcUIsUUFBUSxHQUFBOztRQUM1QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSTtBQUNoQyxZQUFBSyxzQkFBUSxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEtBQUk7QUFDeEQsZ0JBQUEsSUFBSSxLQUFLLEVBQUU7QUFDVCxvQkFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BCLGlCQUFBO0FBQ0QsZ0JBQUEsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEIsYUFBQyxDQUFDLENBQUM7QUFDTCxTQUFDLENBQUMsQ0FBQztLQUNKLENBQUEsQ0FBQTtBQUFBLENBQUE7QUFFcUIsU0FBQSxFQUFFLENBQUMsR0FBRyxJQUFjLEVBQUE7O1FBQ3hDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFJO1lBQ2hDQSxzQkFBUSxDQUNOLElBQUksRUFDSixDQUFDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUNuQixFQUFFLFNBQVMsRUFBRSxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBRSxFQUNoQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxLQUFJO2dCQUNyQixNQUFNLE9BQU8sR0FBRyxNQUFNO3FCQUNuQixLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ1gscUJBQUEsTUFBTSxDQUFDLENBQUMsQ0FBUyxLQUFLLENBQUMsQ0FBQztBQUN4QixxQkFBQSxHQUFHLENBQUMsQ0FBQyxDQUFTLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQVcsQ0FBQztBQUMzQyxxQkFBQSxNQUFNLENBQUMsQ0FBQyxDQUFTLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxPQUFPLENBQWtCLENBQUM7Z0JBQzlELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQixhQUFDLENBQ0YsQ0FBQztBQUNKLFNBQUMsQ0FBQyxDQUFDO0tBQ0osQ0FBQSxDQUFBO0FBQUE7O0FDbERELElBQUkscUJBQXFCLEdBR3JCO0FBQ0YsSUFBQSxLQUFLLEVBQUUsRUFBRTtBQUNULElBQUEsUUFBUSxFQUFFLFNBQVM7Q0FDcEIsQ0FBQztBQUVGLFNBQVMsZUFBZSxDQUFDLE9BQWUsRUFBRSxJQUFZLEVBQUE7SUFDcEQsT0FBTyxDQUFBLEVBQUcsT0FBTyxDQUFBLEVBQUEsRUFBSyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBLElBQUEsQ0FBTSxDQUFDO0FBQy9DLENBQUM7QUFpQkssTUFBTyxTQUNYLFNBQVFMLHFCQUE0QixDQUFBO0lBaUJwQyxXQUFZLENBQUEsR0FBUSxFQUFFLFFBQWtCLEVBQUE7UUFDdEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQztRQUUvQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDekIsUUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUVqQixRQUFBLElBQUksQ0FBQyxjQUFjLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDbkI7SUFFRCxNQUFNLEdBQUE7O1FBQ0osS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2YsQ0FBQSxFQUFBLEdBQUEsWUFBWSxDQUFDLGNBQWM7YUFDeEIsYUFBYSxDQUFDLFdBQVcsQ0FBQyxNQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxDQUN6QixRQUFRLENBQUMsaURBQWlELENBQUMsQ0FBQztRQUVoRSxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0RSxRQUFRLEtBQUEsSUFBQSxJQUFSLFFBQVEsS0FBUixLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBQSxRQUFRLENBQUUsUUFBUSxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDcEUsUUFBQSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQUs7QUFDckIsWUFBQSxJQUFJLHFCQUFxQixDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLFFBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNyRSxhQUFBO1NBQ0YsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNQO0lBRUQsT0FBTyxHQUFBO1FBQ0wsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2hCLFFBQUEscUJBQXFCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDL0MscUJBQXFCLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQzNELElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQ3BDLE9BQU8sRUFDUCxJQUFJLENBQUMsK0JBQStCLENBQ3JDLENBQUM7S0FDSDtBQUVLLElBQUEsaUJBQWlCLENBQUMsS0FBYSxFQUFBOzs7QUFDbkMsWUFBQSxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFaEMsWUFBQSxDQUFBLEVBQUEsR0FBQSxJQUFJLENBQUMsWUFBWSxNQUFFLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLE1BQU0sRUFBRSxDQUFDO0FBQzVCLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7QUFDNUIsZ0JBQUEsSUFBSSxFQUFFLGNBQWM7QUFDcEIsZ0JBQUEsR0FBRyxFQUFFLDJDQUEyQztBQUNqRCxhQUFBLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUU3QyxNQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLENBQUM7WUFFdkQsTUFBTSxRQUFRLEdBQVksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBZSxDQUFDLFFBQVEsQ0FBQztBQUNsRSxZQUFBLE1BQU0sU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUN4QixHQUFHO2dCQUNELElBQUk7Z0JBQ0osSUFBSTtBQUNKLGdCQUFBLGdCQUFnQixHQUFHLEVBQUUsR0FBRyxJQUFJO2dCQUM1QixJQUFJO2dCQUNKLEtBQUs7Z0JBQ0wsUUFBUTthQUNULENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNuQixDQUFDO0FBRUYsWUFBQSxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssTUFBTTtnQkFDekMsS0FBSztnQkFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FDeENNLHNCQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FDckQ7QUFDRixnQkFBQSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSTtBQUN2QixnQkFBQSxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQzlCLGdCQUFBLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWU7QUFDOUIsZ0JBQUEsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVTtBQUM5QixhQUFBLENBQUMsQ0FBQyxDQUFDO0FBRUosWUFBQSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQ2hCLGVBQWUsQ0FBQyxDQUFBLGdCQUFBLENBQWtCLEVBQUUsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUMvRCxDQUFDO0FBRUYsWUFBQSxPQUFPLEtBQUssQ0FBQzs7QUFDZCxLQUFBO0FBRUssSUFBQSxjQUFjLENBQUMsS0FBYSxFQUFBOzs7QUFDaEMsWUFBQSxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXZELGdCQUFBLENBQUEsRUFBQSxHQUFBLElBQUksQ0FBQyxZQUFZLE1BQUUsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsTUFBTSxFQUFFLENBQUM7QUFDNUIsZ0JBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7b0JBQzVCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBLEdBQUEsRUFDcEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUNuQixDQUFFLENBQUE7QUFDRixvQkFBQSxHQUFHLEVBQUUsMkNBQTJDO0FBQ2pELGlCQUFBLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUMsYUFBQTtZQUVELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQzs7QUFDekIsS0FBQTtJQUVELGdCQUFnQixDQUFDLElBQW9CLEVBQUUsRUFBZSxFQUFBO1FBQ3BELE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUN4QixZQUFBLEdBQUcsRUFBRSw4QkFBOEI7QUFDcEMsU0FBQSxDQUFDLENBQUM7UUFFSCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDekIsWUFBQSxHQUFHLEVBQUUscUNBQXFDO0FBQzNDLFNBQUEsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQ3pCLFlBQUEsR0FBRyxFQUFFLHFDQUFxQztBQUMxQyxZQUFBLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7QUFDekIsU0FBQSxDQUFDLENBQUM7QUFDSCxRQUFBLFFBQVEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFL0IsUUFBQSxJQUFJLElBQUksQ0FBQyxLQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQztBQUM3QixnQkFBQSxHQUFHLEVBQUUsNkNBQTZDO0FBQ2xELGdCQUFBLElBQUksRUFBRSxDQUFHLEVBQUEsSUFBSSxDQUFDLEtBQU0sR0FBRyxDQUFDLENBQUUsQ0FBQTtBQUMzQixhQUFBLENBQUMsQ0FBQztBQUNILFlBQUEsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNuQyxTQUFBO0FBRUQsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlCLFFBQUEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRTtZQUMvQixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUM7QUFDN0IsZ0JBQUEsR0FBRyxFQUFFLHlDQUF5QztBQUMvQyxhQUFBLENBQUMsQ0FBQztBQUNILFlBQUEsWUFBWSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyRCxZQUFBLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCO0FBQ2hELGtCQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7a0JBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztBQUMxQixZQUFBLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUEsQ0FBRSxDQUFDLENBQUM7QUFDcEMsWUFBQSxRQUFRLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRW5DLFlBQUEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixFQUFFO0FBQ3hDLGdCQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDbkMsYUFBQTtBQUNGLFNBQUE7UUFFRCxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFDL0IsWUFBQSxHQUFHLEVBQUUsMkNBQTJDO0FBQ2pELFNBQUEsQ0FBQyxDQUFDO0FBRUgsUUFBQSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFJO0FBQzVCLFlBQUEsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLGNBQWMsQ0FBQyxVQUFVLENBQUM7Z0JBQ3hCLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsYUFBQSxDQUFDLENBQUM7WUFDSCxjQUFjLENBQUMsVUFBVSxDQUFDO0FBQ3hCLGdCQUFBLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUk7QUFDbEIsZ0JBQUEsR0FBRyxFQUFFLGtDQUFrQztBQUN4QyxhQUFBLENBQUMsQ0FBQztBQUNILFlBQUEsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3JELFNBQUMsQ0FBQyxDQUFDO1FBQ0gsY0FBYyxDQUFDLFVBQVUsQ0FBQztBQUN4QixZQUFBLElBQUksRUFBRSxRQUFRO0FBQ2YsU0FBQSxDQUFDLENBQUM7QUFFSCxRQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFcEMsUUFBQSxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3pCO0lBRUssa0JBQWtCLENBQ3RCLElBQW9CLEVBQ3BCLEdBQStCLEVBQUE7O0FBRS9CLFlBQUEsSUFBSSxJQUFjLENBQUM7QUFDbkIsWUFBQSxNQUFNLEdBQUcsR0FBSSxHQUFxQixDQUFDLEdBQUcsQ0FBQztBQUV2QyxZQUFBLElBQUksR0FBRyxDQUFDLE9BQU8sSUFBSSxHQUFHLEtBQUssR0FBRyxFQUFFO2dCQUM5QixJQUFJLEdBQUcsUUFBUSxDQUFDO0FBQ2pCLGFBQUE7aUJBQU0sSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxRQUFRLElBQUksR0FBRyxLQUFLLEdBQUcsRUFBRTtnQkFDckQsSUFBSSxHQUFHLGNBQWMsQ0FBQztBQUN2QixhQUFBO0FBQU0saUJBQUEsSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxHQUFHLEtBQUssR0FBRyxFQUFFO2dCQUN0RCxJQUFJLEdBQUcsZ0JBQWdCLENBQUM7QUFDekIsYUFBQTtBQUFNLGlCQUFBLElBQUksR0FBRyxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO2dCQUNwQyxJQUFJLEdBQUcsT0FBTyxDQUFDO0FBQ2hCLGFBQUE7aUJBQU0sSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtnQkFDckMsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUNkLGFBQUE7QUFBTSxpQkFBQTtnQkFDTCxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQ2YsYUFBQTtZQUVELElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDekMsSUFBSTtBQUNKLGdCQUFBLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUM7QUFDMUIsYUFBQSxDQUFDLENBQUM7U0FDSixDQUFBLENBQUE7QUFBQSxLQUFBO0FBRU8sSUFBQSxZQUFZLENBQUMsU0FBdUIsRUFBQTtBQUMxQyxRQUFBLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRTtBQUNsRCxZQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUMxQixTQUFBO0tBQ0Y7SUFFTyxVQUFVLEdBQUE7O1FBQ2hCLE1BQU0sVUFBVSxHQUFHLDRCQUE0QixDQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLDBDQUEwQyxDQUN6RCxDQUFDO0FBRUYsUUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtZQUNuQyxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQ25CLGdCQUFBLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQ3ZDLGdCQUFBO0FBQ0Usb0JBQUEsT0FBTyxFQUFFLENBQUEsS0FBQSxFQUFRLEdBQUcsQ0FBQSxTQUFBLEVBQVksR0FBRyxDQUFVLFFBQUEsQ0FBQTtBQUM3QyxvQkFBQSxPQUFPLEVBQUUsVUFBVTtBQUNwQixpQkFBQTtnQkFDRCxFQUFFLE9BQU8sRUFBRSxDQUFJLENBQUEsRUFBQSxVQUFVLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFO2dCQUN2RCxFQUFFLE9BQU8sRUFBRSxDQUFJLENBQUEsRUFBQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFO0FBQ2pELGdCQUFBLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFO2dCQUNuQyxFQUFFLE9BQU8sRUFBRSxDQUFJLENBQUEsRUFBQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQ3RELEVBQUUsT0FBTyxFQUFFLENBQUksQ0FBQSxFQUFBLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRTtnQkFDbkUsRUFBRSxPQUFPLEVBQUUsQ0FBSSxDQUFBLEVBQUEsR0FBRyxXQUFXLEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFO2dCQUN2RSxFQUFFLE9BQU8sRUFBRSxDQUFJLENBQUEsRUFBQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUU7Z0JBQ3hELEVBQUUsT0FBTyxFQUFFLENBQUksQ0FBQSxFQUFBLEdBQUcsU0FBUyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUU7Z0JBQ3ZELEVBQUUsT0FBTyxFQUFFLENBQUksQ0FBQSxFQUFBLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7QUFDN0MsZ0JBQUEsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7QUFDekMsYUFBQSxDQUFDLENBQUM7QUFDSixTQUFBO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDaEQsQ0FBQztBQUNGLFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBSztBQUNyQyxZQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUMxRCxZQUFBLE9BQU8sS0FBSyxDQUFDO0FBQ2YsU0FBQyxDQUFDLENBQUM7QUFDSCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFLO0FBQzlDLFlBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDMUUsWUFBQSxPQUFPLEtBQUssQ0FBQztBQUNmLFNBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQzFELENBQUM7QUFDRixRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQzlELENBQUM7QUFFRixRQUFBLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsMENBQTBDO0FBQzFFLGNBQUUsS0FBSztjQUNMLEtBQUssQ0FBQztRQUNWLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUk7QUFDeEMsWUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFLO2dCQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFDLGdCQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25DLGFBQUMsQ0FBQyxDQUFDO0FBQ0wsU0FBQyxDQUFDLENBQUM7QUFFSCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQUs7QUFDckMsWUFBQSxRQUFRLENBQUMsYUFBYSxDQUNwQixJQUFJLGFBQWEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FDbkQsQ0FBQztBQUNKLFNBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFLO0FBQ3JDLFlBQUEsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNFLFNBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFLO0FBQ3JDLFlBQUEsUUFBUSxDQUFDLGFBQWEsQ0FDcEIsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQ25ELENBQUM7QUFDSixTQUFDLENBQUMsQ0FBQztBQUNILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBSztBQUNyQyxZQUFBLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzRSxTQUFDLENBQUMsQ0FBQztBQUVILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBSztBQUNyQyxZQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQzs7WUFFOUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUN2RCxTQUFDLENBQUMsQ0FBQztBQUVILFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBSztBQUNyQyxZQUFBLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDNUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ3pDLGdCQUFBLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUM7QUFDMUIsYUFBQSxDQUFDLENBQUM7QUFDTCxTQUFDLENBQUMsQ0FBQzs7UUFHSCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQUs7QUFDbEMsWUFBQSxPQUFPLEtBQUssQ0FBQztBQUNmLFNBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQXFCLENBQUM7QUFDdEUsUUFBQSxDQUFBLEVBQUEsR0FBQSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsMENBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hFLFFBQUEsSUFBSSxDQUFDLCtCQUErQixHQUFHLENBQUMsR0FBa0IsS0FBSTtZQUM1RCxNQUFNLFFBQVEsR0FBRyxHQUFvQixDQUFDO0FBQ3RDLFlBQUEsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtnQkFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYyxDQUFDLEtBQUssQ0FBQztnQkFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQzs7Z0JBRXZDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDaEQsYUFBQTtBQUNILFNBQUMsQ0FBQztRQUNGLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQ2pDLE9BQU8sRUFDUCxJQUFJLENBQUMsK0JBQStCLENBQ3JDLENBQUM7S0FDSDtBQUNGOztBQ3ZWRCxNQUFNLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDO1NBRS9CLGdCQUFnQixDQUM5QixHQUFRLEVBQ1IsUUFBa0IsRUFDbEIsT0FBc0IsRUFBQTtJQUV0QixNQUFNLEtBQUssR0FBRyxJQUFJLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2YsQ0FBQztBQUVlLFNBQUEsY0FBYyxDQUFDLEdBQVEsRUFBRSxRQUFrQixFQUFBO0FBQ3pELElBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLEVBQUU7UUFDbEMsT0FBTztBQUNSLEtBQUE7SUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLFNBQVMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2YsQ0FBQztBQUVxQixTQUFBLGNBQWMsQ0FBQyxHQUFRLEVBQUUsUUFBa0IsRUFBQTs7QUFDL0QsUUFBQSxJQUFJLENBQUNSLGlCQUFRLENBQUMsU0FBUyxFQUFFOztBQUV2QixZQUFBLElBQUlNLGVBQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1lBQy9DLE9BQU87QUFDUixTQUFBO0FBRUQsUUFBQSxJQUFJLEVBQUUsTUFBTSxRQUFRLEVBQUUsQ0FBQyxFQUFFOztBQUV2QixZQUFBLElBQUlBLGVBQU0sQ0FDUixrRUFBa0UsQ0FDbkUsQ0FBQztZQUNGLE9BQU87QUFDUixTQUFBO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNkLENBQUEsQ0FBQTtBQUFBLENBQUE7U0FFZSxnQkFBZ0IsQ0FDOUIsR0FBUSxFQUNSLFFBQWtCLEVBQ2xCLFFBQWlCLEVBQUE7QUFFakIsSUFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtRQUNsQyxPQUFPO0FBQ1IsS0FBQTtJQUVELE1BQU0sS0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdkQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2YsQ0FBQztBQUVlLFNBQUEsY0FBYyxDQUFDLEdBQVEsRUFBRSxRQUFrQixFQUFBO0lBQ3pELE9BQU87QUFDTCxRQUFBO0FBQ0UsWUFBQSxFQUFFLEVBQUUsaUJBQWlCO0FBQ3JCLFlBQUEsSUFBSSxFQUFFLGlCQUFpQjtBQUN2QixZQUFBLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNwRCxZQUFBLGFBQWEsRUFBRSxDQUFDLFFBQWlCLEtBQUk7QUFDbkMsZ0JBQUEsSUFBSSxRQUFRLEVBQUU7b0JBQ1osT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLGlCQUFBO0FBQ0QsZ0JBQUEsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRTtBQUM5QixvQkFBQSxnQkFBZ0IsRUFBRSxJQUFJO0FBQ3RCLG9CQUFBLFFBQVEsRUFBRTtBQUNSLHdCQUFBLEdBQUcsRUFBRSxLQUFLO0FBQ1Ysd0JBQUEsTUFBTSxFQUFFLEtBQUs7QUFDYix3QkFBQSxJQUFJLEVBQUUsS0FBSztBQUNaLHFCQUFBOztBQUVELG9CQUFBLElBQUksRUFBRSxFQUFFO0FBQ1Isb0JBQUEsWUFBWSxFQUFFLEVBQUU7QUFDaEIsb0JBQUEsYUFBYSxFQUFFLEVBQUU7QUFDakIsb0JBQUEsY0FBYyxFQUFFLEVBQUU7QUFDbEIsb0JBQUEseUJBQXlCLEVBQUUsRUFBRTtBQUM3QixvQkFBQSx5QkFBeUIsRUFBRSxFQUFFO0FBQzdCLG9CQUFBLE1BQU0sRUFBRSxJQUFJO0FBQ2IsaUJBQUEsQ0FBQyxDQUFDO2FBQ0o7QUFDRixTQUFBO0FBQ0QsUUFBQTtBQUNFLFlBQUEsRUFBRSxFQUFFLHVCQUF1QjtBQUMzQixZQUFBLElBQUksRUFBRSx1QkFBdUI7QUFDN0IsWUFBQSxhQUFhLEVBQUUsQ0FBQyxRQUFpQixLQUFJO0FBQ25DLGdCQUFBLElBQUksUUFBUSxFQUFFO29CQUNaLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztBQUMvQyxpQkFBQTtBQUNELGdCQUFBLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDeEM7QUFDRixTQUFBO0FBQ0QsUUFBQTtBQUNFLFlBQUEsRUFBRSxFQUFFLGdDQUFnQztBQUNwQyxZQUFBLElBQUksRUFBRSxnQ0FBZ0M7QUFDdEMsWUFBQSxhQUFhLEVBQUUsQ0FBQyxRQUFpQixLQUFJO0FBQ25DLGdCQUFBLElBQUksUUFBUSxFQUFFO29CQUNaLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztBQUMvQyxpQkFBQTtBQUNELGdCQUFBLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDdkM7QUFDRixTQUFBO0FBQ0QsUUFBQTtBQUNFLFlBQUEsRUFBRSxFQUFFLE1BQU07QUFDVixZQUFBLElBQUksRUFBRSw2QkFBNkI7QUFDbkMsWUFBQSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDcEQsWUFBQSxhQUFhLEVBQUUsQ0FBQyxRQUFpQixLQUFJO0FBQ25DLGdCQUFBLElBQUksUUFBUSxFQUFFO29CQUNaLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztBQUMvQyxpQkFBQTtBQUNELGdCQUFBLGNBQWMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDL0I7QUFDRixTQUFBO0FBQ0QsUUFBQTtBQUNFLFlBQUEsRUFBRSxFQUFFLE1BQU07QUFDVixZQUFBLElBQUksRUFBRSxNQUFNO0FBQ1osWUFBQSxPQUFPLEVBQUUsRUFBRTtBQUNYLFlBQUEsYUFBYSxFQUFFLENBQUMsUUFBaUIsS0FBSTtBQUNuQyxnQkFBQSxJQUFJLFFBQVEsRUFBRTtvQkFDWixPQUFPTixpQkFBUSxDQUFDLFNBQVMsQ0FBQztBQUMzQixpQkFBQTtBQUVELGdCQUFBLGNBQWMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDL0I7QUFDRixTQUFBO1FBQ0QsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sS0FBSTtZQUN6QyxPQUFPO0FBQ0wsZ0JBQUEsRUFBRSxFQUFFLENBQUcsRUFBQSxxQkFBcUIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFFLENBQUE7Z0JBQzlDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtBQUNsQixnQkFBQSxPQUFPLEVBQUUsRUFBRTtnQkFDWCxRQUFRLEVBQUUsTUFBSztBQUNiLG9CQUFBLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQzFDO2FBQ0YsQ0FBQztBQUNKLFNBQUMsQ0FBQztLQUNILENBQUM7QUFDSjs7QUN4SUEsTUFBTSx1QkFBdUIsR0FBRztJQUM5QixVQUFVO0lBQ1YsMkJBQTJCO0NBQ25CLENBQUM7QUFnRFgsTUFBTSxlQUFlLEdBQUcsT0FBTztBQUM3QixJQUFBLEdBQUcsRUFBRSxJQUFJO0FBQ1QsSUFBQSxJQUFJLEVBQUUsSUFBSTtBQUNWLElBQUEsTUFBTSxFQUFFLElBQUk7QUFDYixDQUFBLENBQUMsQ0FBQztBQUVJLE1BQU0sZ0JBQWdCLEdBQWE7QUFDeEMsSUFBQSx1QkFBdUIsRUFBRSxDQUFDO0FBQzFCLElBQUEsc0JBQXNCLEVBQUUsRUFBRTtBQUMxQixJQUFBLDZCQUE2QixFQUFFLEtBQUs7O0FBRXBDLElBQUEsYUFBYSxFQUFFLElBQUk7QUFDbkIsSUFBQSxzQkFBc0IsRUFBRSxLQUFLO0FBQzdCLElBQUEsdUJBQXVCLEVBQUUsS0FBSztBQUM5QixJQUFBLGdCQUFnQixFQUFFLEtBQUs7QUFDdkIsSUFBQSxxQkFBcUIsRUFBRSxLQUFLO0FBQzVCLElBQUEsZUFBZSxFQUFFLEtBQUs7QUFDdEIsSUFBQSxnQkFBZ0IsRUFBRSxLQUFLOztBQUV2QixJQUFBLDBDQUEwQyxFQUFFLEtBQUs7O0FBRWpELElBQUEsY0FBYyxFQUFFO0FBQ2QsUUFBQTtBQUNFLFlBQUEsSUFBSSxFQUFFLG9CQUFvQjtZQUMxQixRQUFRLEVBQUUsZUFBZSxFQUFFO0FBQzNCLFlBQUEsWUFBWSxFQUFFLEVBQUU7QUFDaEIsWUFBQSxhQUFhLEVBQUUsRUFBRTtBQUNqQixZQUFBLGNBQWMsRUFBRTtnQkFDZCxvQkFBb0I7Z0JBQ3BCLG1CQUFtQjtnQkFDbkIsWUFBWTtnQkFDWixRQUFRO2dCQUNSLFdBQVc7Z0JBQ1gsY0FBYztnQkFDZCxZQUFZO2dCQUNaLE1BQU07Z0JBQ04sYUFBYTtnQkFDYixlQUFlO0FBQ2hCLGFBQUE7QUFDRCxZQUFBLHlCQUF5QixFQUFFLEVBQUU7QUFDN0IsWUFBQSx5QkFBeUIsRUFBRSxFQUFFO0FBQzdCLFlBQUEsTUFBTSxFQUFFLElBQUk7QUFDWixZQUFBLGdCQUFnQixFQUFFLEtBQUs7QUFDeEIsU0FBQTtBQUNELFFBQUE7QUFDRSxZQUFBLElBQUksRUFBRSxlQUFlO1lBQ3JCLFFBQVEsRUFBRSxlQUFlLEVBQUU7QUFDM0IsWUFBQSxZQUFZLEVBQUUsRUFBRTtBQUNoQixZQUFBLGFBQWEsRUFBRSxLQUFLO0FBQ3BCLFlBQUEsY0FBYyxFQUFFO2dCQUNkLFlBQVk7Z0JBQ1osV0FBVztnQkFDWCxjQUFjO2dCQUNkLFlBQVk7Z0JBQ1osYUFBYTtnQkFDYixlQUFlO0FBQ2hCLGFBQUE7QUFDRCxZQUFBLHlCQUF5QixFQUFFLEVBQUU7QUFDN0IsWUFBQSx5QkFBeUIsRUFBRSxFQUFFO0FBQzdCLFlBQUEsTUFBTSxFQUFFLEtBQUs7QUFDYixZQUFBLGdCQUFnQixFQUFFLEtBQUs7QUFDeEIsU0FBQTtBQUNELFFBQUE7QUFDRSxZQUFBLElBQUksRUFBRSxjQUFjO0FBQ3BCLFlBQUEsUUFBUSxFQUFFO0FBQ1IsZ0JBQUEsR0FBRyxFQUFFLEtBQUs7QUFDVixnQkFBQSxJQUFJLEVBQUUsS0FBSztBQUNYLGdCQUFBLE1BQU0sRUFBRSxLQUFLO0FBQ2QsYUFBQTtBQUNELFlBQUEsWUFBWSxFQUFFLEVBQUU7QUFDaEIsWUFBQSxhQUFhLEVBQUUsS0FBSztBQUNwQixZQUFBLGNBQWMsRUFBRTtnQkFDZCxvQkFBb0I7Z0JBQ3BCLG1CQUFtQjtnQkFDbkIsWUFBWTtnQkFDWixRQUFRO2dCQUNSLGFBQWE7Z0JBQ2IsZUFBZTtBQUNoQixhQUFBO0FBQ0QsWUFBQSx5QkFBeUIsRUFBRSxFQUFFO0FBQzdCLFlBQUEseUJBQXlCLEVBQUUsRUFBRTtBQUM3QixZQUFBLE1BQU0sRUFBRSxLQUFLO0FBQ2IsWUFBQSxnQkFBZ0IsRUFBRSxLQUFLO0FBQ3hCLFNBQUE7QUFDRCxRQUFBO0FBQ0UsWUFBQSxJQUFJLEVBQUUsYUFBYTtBQUNuQixZQUFBLFFBQVEsRUFBRTtBQUNSLGdCQUFBLEdBQUcsRUFBRSxJQUFJO0FBQ1QsZ0JBQUEsSUFBSSxFQUFFLEtBQUs7QUFDWCxnQkFBQSxNQUFNLEVBQUUsS0FBSztBQUNkLGFBQUE7QUFDRCxZQUFBLFlBQVksRUFBRSxFQUFFO0FBQ2hCLFlBQUEsYUFBYSxFQUFFLEtBQUs7QUFDcEIsWUFBQSxjQUFjLEVBQUUsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLGVBQWUsQ0FBQztBQUN4RCxZQUFBLHlCQUF5QixFQUFFLEVBQUU7QUFDN0IsWUFBQSx5QkFBeUIsRUFBRSxFQUFFO0FBQzdCLFlBQUEsTUFBTSxFQUFFLEtBQUs7QUFDYixZQUFBLGdCQUFnQixFQUFFLEtBQUs7QUFDeEIsU0FBQTtBQUNGLEtBQUE7O0FBRUQsSUFBQSxpQ0FBaUMsRUFBRSxFQUFFOztBQUVyQyxJQUFBLDhCQUE4QixFQUFFLFVBQVU7QUFDMUMsSUFBQSxzQkFBc0IsRUFBRSwyQkFBMkI7QUFDbkQsSUFBQSxzQkFBc0IsRUFBRSxVQUFVO0FBQ2xDLElBQUEsd0JBQXdCLEVBQUUsVUFBVTs7QUFFcEMsSUFBQSxpQ0FBaUMsRUFBRSxFQUFFOztBQUVyQyxJQUFBLGdDQUFnQyxFQUFFLEtBQUs7Q0FDeEMsQ0FBQztBQUNJLE1BQU8sOEJBQStCLFNBQVFTLHlCQUFnQixDQUFBO0lBR2xFLFdBQVksQ0FBQSxHQUFRLEVBQUUsTUFBNEIsRUFBQTtBQUNoRCxRQUFBLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbkIsUUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztLQUN0QjtJQUVELE9BQU8sR0FBQTtBQUNMLFFBQUEsSUFBSSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUUzQixXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFcEIsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsbUNBQW1DLEVBQUUsQ0FBQyxDQUFDO1FBRTFFLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0FBRS9CLFFBQUEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3JDLFFBQUEsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3hDLFFBQUEsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzdDLFFBQUEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDOztBQUVwQyxRQUFBLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUM5QyxRQUFBLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMxQyxRQUFBLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFbEMsUUFBQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDcEM7QUFFRDs7QUFFRztJQUNLLHVCQUF1QixHQUFBOzs7UUFDN0IsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUMsZ0JBQWdCLE1BQWhCLElBQUEsSUFBQSxFQUFBLEtBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxnQkFBZ0IsR0FBSyxLQUFLLENBQUMsQ0FBQTtRQUNoRCxDQUFBLEVBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBQyxpQ0FBaUMsTUFBakMsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLGlDQUFpQyxHQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQzlELENBQUEsRUFBQSxHQUFBLENBQUEsRUFBQSxHQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFDLGlDQUFpQyxNQUFqQyxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsaUNBQWlDLEdBQUssRUFBRSxDQUFDLENBQUE7QUFFOUQsUUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSTs7QUFDbkQsWUFBQSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFdkQsQ0FBQSxFQUFBLEdBQUEsT0FBTyxDQUFDLFFBQVEsTUFBaEIsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsT0FBTyxDQUFDLFFBQVEsR0FBSyxlQUFlLEVBQUUsQ0FBQyxDQUFBO1lBQ3ZDLENBQUEsRUFBQSxHQUFBLE9BQU8sQ0FBQyx5QkFBeUIsTUFBQSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsSUFBakMsT0FBTyxDQUFDLHlCQUF5QixHQUFLLEVBQUUsQ0FBQyxDQUFBO1lBQ3pDLENBQUEsRUFBQSxHQUFBLE9BQU8sQ0FBQyx5QkFBeUIsTUFBQSxJQUFBLElBQUEsRUFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsSUFBakMsT0FBTyxDQUFDLHlCQUF5QixHQUFLLEVBQUUsQ0FBQyxDQUFBO1lBQ3pDLENBQUEsRUFBQSxHQUFBLE9BQU8sQ0FBQyxNQUFNLE1BQUEsSUFBQSxJQUFBLEVBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxFQUFBLElBQWQsT0FBTyxDQUFDLE1BQU0sR0FBSyxJQUFJLENBQUMsQ0FBQTtBQUMxQixTQUFDLENBQUMsQ0FBQztLQUNKO0FBRU8sSUFBQSxrQkFBa0IsQ0FBQyxXQUF3QixFQUFBO1FBQ2pELElBQUlDLGdCQUFPLENBQUMsV0FBVyxDQUFDO2FBQ3JCLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQzthQUNyQyxPQUFPLENBQUMseURBQXlELENBQUM7QUFDbEUsYUFBQSxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQ1osRUFBRTtBQUNDLGFBQUEsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDO2FBQ3RCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztBQUN0RCxhQUFBLGlCQUFpQixFQUFFO0FBQ25CLGFBQUEsUUFBUSxDQUFDLENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtZQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7QUFDckQsWUFBQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDbEMsQ0FBQSxDQUFDLENBQ0wsQ0FBQztRQUVKLElBQUlBLGdCQUFPLENBQUMsV0FBVyxDQUFDO2FBQ3JCLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztBQUNwQyxhQUFBLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FDWixFQUFFO0FBQ0MsYUFBQSxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7YUFDcEIsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO0FBQ3JELGFBQUEsaUJBQWlCLEVBQUU7QUFDbkIsYUFBQSxRQUFRLENBQUMsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO1lBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHNCQUFzQixHQUFHLEtBQUssQ0FBQztBQUNwRCxZQUFBLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNsQyxDQUFBLENBQUMsQ0FDTCxDQUFDO1FBRUosSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXLENBQUM7YUFDckIsT0FBTyxDQUFDLDhCQUE4QixDQUFDO0FBQ3ZDLGFBQUEsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFJO0FBQ2hCLFlBQUEsRUFBRSxDQUFDLFFBQVEsQ0FDVCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FDbkQsQ0FBQyxRQUFRLENBQUMsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO2dCQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsR0FBRyxLQUFLLENBQUM7QUFDM0QsZ0JBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUNqQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDaEIsQ0FBQSxDQUFDLENBQUM7QUFDTCxTQUFDLENBQUMsQ0FBQztBQUNMLFFBQUEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsRUFBRTtBQUN0RCxZQUFBLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO0FBQzFCLGdCQUFBLElBQUksRUFBRSw2REFBNkQ7QUFDbkUsZ0JBQUEsR0FBRyxFQUFFLDJDQUEyQztBQUNqRCxhQUFBLENBQUMsQ0FBQztBQUNKLFNBQUE7S0FDRjtBQUVPLElBQUEscUJBQXFCLENBQUMsV0FBd0IsRUFBQTtRQUNwRCxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBRXJELFFBQUEsSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUk7QUFDbEUsWUFBQSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FDdEQsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO2dCQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDM0MsZ0JBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUNqQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDaEIsQ0FBQSxDQUNGLENBQUM7QUFDSixTQUFDLENBQUMsQ0FBQztBQUVILFFBQUEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7WUFDdEMsSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXLENBQUM7aUJBQ3JCLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztpQkFDekMsUUFBUSxDQUFDLDBDQUEwQyxDQUFDO0FBQ3BELGlCQUFBLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSTtBQUNoQixnQkFBQSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDLENBQUMsUUFBUSxDQUMvRCxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7b0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDO0FBQ3BELG9CQUFBLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztpQkFDbEMsQ0FBQSxDQUNGLENBQUM7QUFDSixhQUFDLENBQUMsQ0FBQztZQUNMLElBQUlBLGdCQUFPLENBQUMsV0FBVyxDQUFDO2lCQUNyQixPQUFPLENBQUMsNkJBQTZCLENBQUM7aUJBQ3RDLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQztBQUNwRCxpQkFBQSxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUk7QUFDaEIsZ0JBQUEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLFFBQVEsQ0FDaEUsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO29CQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQztBQUNyRCxvQkFBQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7aUJBQ2xDLENBQUEsQ0FDRixDQUFDO0FBQ0osYUFBQyxDQUFDLENBQUM7QUFDTixTQUFBO0FBRUQsUUFBQSxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSTtBQUN2RSxZQUFBLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQ3pELENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtnQkFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7QUFDOUMsZ0JBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ2xDLENBQUEsQ0FDRixDQUFDO0FBQ0osU0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUNyQixPQUFPLENBQUMsMEJBQTBCLENBQUM7QUFDbkMsYUFBQSxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUk7QUFDaEIsWUFBQSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUMsUUFBUSxDQUM5RCxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7Z0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO0FBQ25ELGdCQUFBLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUNsQyxDQUFBLENBQ0YsQ0FBQztBQUNKLFNBQUMsQ0FBQyxDQUFDO0FBRUwsUUFBQSxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSTtBQUNyRSxZQUFBLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxDQUN4RCxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7Z0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztBQUM3QyxnQkFBQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDbEMsQ0FBQSxDQUNGLENBQUM7QUFDSixTQUFDLENBQUMsQ0FBQztBQUVILFFBQUEsSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUk7QUFDdEUsWUFBQSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxDQUN6RCxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7Z0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0FBQzlDLGdCQUFBLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUNsQyxDQUFBLENBQ0YsQ0FBQztBQUNKLFNBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFFTyxJQUFBLDBCQUEwQixDQUFDLFdBQXdCLEVBQUE7UUFDekQsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO1FBRTVELElBQUlBLGdCQUFPLENBQUMsV0FBVyxDQUFDO2FBQ3JCLE9BQU8sQ0FDTixvRUFBb0UsQ0FDckU7QUFDQSxhQUFBLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSTtBQUNoQixZQUFBLEVBQUUsQ0FBQyxRQUFRLENBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsMENBQTBDLENBQ2hFLENBQUMsUUFBUSxDQUFDLENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtBQUN6QixnQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQywwQ0FBMEM7QUFDN0Qsb0JBQUEsS0FBSyxDQUFDO0FBQ1IsZ0JBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ2xDLENBQUEsQ0FBQyxDQUFDO0FBQ0wsU0FBQyxDQUFDLENBQUM7S0FDTjtBQUVPLElBQUEsaUJBQWlCLENBQUMsV0FBd0IsRUFBQTtRQUNoRCxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7QUFFM0QsUUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSTtBQUNuRCxZQUFBLElBQUksQ0FBQyx1QkFBdUIsQ0FDMUIsV0FBVyxFQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FDdkMsQ0FBQztBQUNKLFNBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXLENBQUM7QUFDckIsYUFBQSxVQUFVLEVBQUU7QUFDWixhQUFBLFNBQVMsQ0FBQyxDQUFDLEdBQUcsS0FBSTtZQUNqQixHQUFHO2lCQUNBLGFBQWEsQ0FBQyxLQUFLLENBQUM7aUJBQ3BCLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQztBQUMvQixpQkFBQSxNQUFNLEVBQUU7aUJBQ1IsUUFBUSxDQUNQLDhEQUE4RCxDQUMvRDtBQUNBLGlCQUFBLE9BQU8sQ0FBQyxDQUFPLENBQUMsS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7Z0JBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7QUFDdkMsb0JBQUEsSUFBSSxFQUFFLEVBQUU7b0JBQ1IsUUFBUSxFQUFFLGVBQWUsRUFBRTtBQUMzQixvQkFBQSxZQUFZLEVBQUUsRUFBRTtBQUNoQixvQkFBQSxhQUFhLEVBQUUsRUFBRTtBQUNqQixvQkFBQSxjQUFjLEVBQUUsRUFBRTtBQUNsQixvQkFBQSx5QkFBeUIsRUFBRSxFQUFFO0FBQzdCLG9CQUFBLHlCQUF5QixFQUFFLEVBQUU7QUFDN0Isb0JBQUEsTUFBTSxFQUFFLElBQUk7QUFDWixvQkFBQSxnQkFBZ0IsRUFBRSxLQUFLO0FBQ3hCLGlCQUFBLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDaEIsQ0FBQSxDQUFDLENBQUM7QUFDUCxTQUFDLENBQUM7QUFDRCxhQUFBLFNBQVMsQ0FBQyxDQUFDLEdBQUcsS0FBSTtZQUNqQixHQUFHO2lCQUNBLGFBQWEsQ0FBQyxNQUFNLENBQUM7aUJBQ3JCLFVBQVUsQ0FDVCxxRUFBcUUsQ0FDdEU7QUFDQSxpQkFBQSxNQUFNLEVBQUU7aUJBQ1IsUUFBUSxDQUNQLCtEQUErRCxDQUNoRTtBQUNBLGlCQUFBLE9BQU8sQ0FBQyxDQUFPLENBQUMsS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7QUFDbkIsZ0JBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYztBQUNqQyxvQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFNUQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYztxQkFDdEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUM7QUFDaEMscUJBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQWlCLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLGdCQUFBLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O0FBRTVCLG9CQUFBLElBQUlKLGVBQU0sQ0FDUixDQUFBOztBQUVkLEVBQUEsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFLLEVBQUEsRUFBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUM5QyxDQUFBLENBQUMsSUFBSSxFQUFFLEVBQ1EsQ0FBQyxDQUNGLENBQUM7b0JBQ0YsT0FBTztBQUNSLGlCQUFBO0FBRUQsZ0JBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUNqQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDZixnQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDOztBQUU3QixnQkFBQSxJQUFJQSxlQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQzthQUN4QyxDQUFBLENBQUMsQ0FBQztBQUNQLFNBQUMsQ0FBQyxDQUFDO0tBQ047SUFFTyx1QkFBdUIsQ0FDN0IsV0FBd0IsRUFDeEIsT0FBc0IsRUFBQTtRQUV0QixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUM7QUFDcEIsWUFBQSxHQUFHLEVBQUUsa0RBQWtEO0FBQ3hELFNBQUEsQ0FBQyxDQUFDO0FBQ0gsUUFBQSxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXhCLElBQUlJLGdCQUFPLENBQUMsR0FBRyxDQUFDO2FBQ2IsUUFBUSxDQUFDLDBEQUEwRCxDQUFDO0FBQ3BFLGFBQUEsVUFBVSxFQUFFO0FBQ1osYUFBQSxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUk7WUFDZCxNQUFNLEVBQUUsR0FBRyxFQUFFO2lCQUNWLGNBQWMsQ0FBQyxjQUFjLENBQUM7QUFDOUIsaUJBQUEsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDdEIsaUJBQUEsUUFBUSxDQUFDLENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtBQUN4QixnQkFBQSxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQzthQUN0QixDQUFBLENBQUMsQ0FBQztZQUNMLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3JELFlBQUEsT0FBTyxFQUFFLENBQUM7QUFDWixTQUFDLENBQUM7QUFDRCxhQUFBLGNBQWMsQ0FBQyxDQUFDLEdBQUcsS0FBSTtZQUN0QixHQUFHO2lCQUNBLFVBQVUsQ0FBQyxvREFBb0QsQ0FBQztpQkFDaEUsT0FBTyxDQUFDLFNBQVMsQ0FBQztpQkFDbEIsT0FBTyxDQUFDLE1BQUs7Z0JBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDcEQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2pCLGFBQUMsQ0FBQyxDQUFDO0FBQ0wsWUFBQSxHQUFHLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FDMUIsa0VBQWtFLENBQ25FLENBQUM7QUFDRixZQUFBLE9BQU8sR0FBRyxDQUFDO0FBQ2IsU0FBQyxDQUFDO0FBQ0QsYUFBQSxjQUFjLENBQUMsQ0FBQyxHQUFHLEtBQUk7WUFDdEIsR0FBRztBQUNBLGlCQUFBLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLFlBQVksR0FBRyxjQUFjLENBQUM7QUFDdkQsaUJBQUEsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxHQUFHLFFBQVEsQ0FBQztpQkFDOUMsT0FBTyxDQUFDLE1BQUs7QUFDWixnQkFBQSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztnQkFDakMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2pCLGFBQUMsQ0FBQyxDQUFDO0FBQ0wsWUFBQSxHQUFHLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FDMUIsdUVBQXVFLENBQ3hFLENBQUM7QUFDRixZQUFBLE9BQU8sR0FBRyxDQUFDO0FBQ2IsU0FBQyxDQUFDLENBQUM7QUFFTCxRQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ25CLE9BQU87QUFDUixTQUFBO1FBRUQsTUFBTSxXQUFXLEdBQ2Ysb0VBQW9FLENBQUM7UUFDdkUsTUFBTSxrQkFBa0IsR0FDdEIsNEVBQTRFLENBQUM7UUFDL0UsTUFBTSxtQkFBbUIsR0FDdkIsNkVBQTZFLENBQUM7UUFDaEYsSUFBSUEsZ0JBQU8sQ0FBQyxHQUFHLENBQUM7YUFDYixPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3BCLGFBQUEsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFJO1lBQ2hCLE1BQU0sUUFBUSxHQUFHLE1BQUs7Z0JBQ3BCLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDakUsZ0JBQUEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ2xCLE9BQU8sQ0FBQyxRQUFTLENBQUMsR0FBRyxHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixDQUNqRSxDQUFDO0FBQ0osYUFBQyxDQUFDO0FBRUYsWUFBQSxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztpQkFDcEIsUUFBUSxDQUFDLFdBQVcsQ0FBQztpQkFDckIsT0FBTyxDQUFDLE1BQVcsU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO2dCQUNsQixPQUFPLENBQUMsUUFBUyxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFTLENBQUMsR0FBRyxDQUFDO0FBQy9DLGdCQUFBLFFBQVEsRUFBRSxDQUFDO2FBQ1osQ0FBQSxDQUFDLENBQUM7QUFDTCxZQUFBLFFBQVEsRUFBRSxDQUFDO0FBQ1gsWUFBQSxPQUFPLEVBQUUsQ0FBQztBQUNaLFNBQUMsQ0FBQztBQUNELGFBQUEsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFJO1lBQ2hCLE1BQU0sUUFBUSxHQUFHLE1BQUs7Z0JBQ3BCLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDakUsZ0JBQUEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ2xCLE9BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTSxHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixDQUNwRSxDQUFDO0FBQ0osYUFBQyxDQUFDO0FBRUYsWUFBQSxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztpQkFDdkIsUUFBUSxDQUFDLFdBQVcsQ0FBQztpQkFDckIsT0FBTyxDQUFDLE1BQVcsU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO2dCQUNsQixPQUFPLENBQUMsUUFBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTSxDQUFDO0FBQ3JELGdCQUFBLFFBQVEsRUFBRSxDQUFDO2FBQ1osQ0FBQSxDQUFDLENBQUM7QUFDTCxZQUFBLFFBQVEsRUFBRSxDQUFDO0FBQ1gsWUFBQSxPQUFPLEVBQUUsQ0FBQztBQUNaLFNBQUMsQ0FBQztBQUNELGFBQUEsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFJO1lBQ2hCLE1BQU0sUUFBUSxHQUFHLE1BQUs7Z0JBQ3BCLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDakUsZ0JBQUEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ2xCLE9BQU8sQ0FBQyxRQUFTLENBQUMsSUFBSSxHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixDQUNsRSxDQUFDO0FBQ0osYUFBQyxDQUFDO0FBRUYsWUFBQSxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztpQkFDckIsUUFBUSxDQUFDLFdBQVcsQ0FBQztpQkFDckIsT0FBTyxDQUFDLE1BQVcsU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO2dCQUNsQixPQUFPLENBQUMsUUFBUyxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2pELGdCQUFBLFFBQVEsRUFBRSxDQUFDO2FBQ1osQ0FBQSxDQUFDLENBQUM7QUFDTCxZQUFBLFFBQVEsRUFBRSxDQUFDO0FBQ1gsWUFBQSxPQUFPLEVBQUUsQ0FBQztBQUNaLFNBQUMsQ0FBQyxDQUFDO1FBRUwsSUFBSUEsZ0JBQU8sQ0FBQyxHQUFHLENBQUM7YUFDYixPQUFPLENBQUMsZUFBZSxDQUFDO2FBQ3hCLE9BQU8sQ0FBQyxnREFBZ0QsQ0FBQztBQUN6RCxhQUFBLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FDVixFQUFFO0FBQ0MsYUFBQSxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQzthQUM5QixjQUFjLENBQUMsY0FBYyxDQUFDO0FBQzlCLGFBQUEsUUFBUSxDQUFDLENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtBQUN4QixZQUFBLE9BQU8sQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1NBQzlCLENBQUEsQ0FBQyxDQUNMLENBQUM7UUFFSixJQUFJQSxnQkFBTyxDQUFDLEdBQUcsQ0FBQzthQUNiLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQzthQUN6QixPQUFPLENBQ04sNEZBQTRGLENBQzdGO0FBQ0EsYUFBQSxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQ1YsRUFBRTtBQUNDLGFBQUEsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7YUFDL0IsY0FBYyxDQUFDLFdBQVcsQ0FBQztBQUMzQixhQUFBLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7QUFDeEIsWUFBQSxPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztTQUMvQixDQUFBLENBQUMsQ0FDTCxDQUFDO0FBRUosUUFBQSxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUM3QyxFQUFFLENBQUMsTUFBTSxDQUNQLGlDQUFpQyxFQUNqQyxRQUFRLENBQUMsR0FBRyxFQUFFO0FBQ1osWUFBQSxJQUFJLEVBQUUsUUFBUTtBQUNkLFlBQUEsSUFBSSxFQUFFLDJHQUEyRztBQUNsSCxTQUFBLENBQUMsQ0FDSCxDQUFDO1FBRUYsSUFBSUEsZ0JBQU8sQ0FBQyxHQUFHLENBQUM7YUFDYixPQUFPLENBQUMsaUJBQWlCLENBQUM7YUFDMUIsT0FBTyxDQUFDLEVBQUUsQ0FBQztBQUNYLGFBQUEsV0FBVyxDQUFDLENBQUMsRUFBRSxLQUFJO1lBQ2xCLE1BQU0sRUFBRSxHQUFHLEVBQUU7aUJBQ1YsY0FBYyxDQUFDLEVBQUUsQ0FBQztpQkFDbEIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNDLGlCQUFBLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7QUFDeEIsZ0JBQUEsTUFBTSxVQUFVLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUMsZ0JBQUEsT0FBTyxDQUFDLGNBQWMsR0FBRyxVQUE0QixDQUFDO2FBQ3ZELENBQUEsQ0FBQyxDQUFDO0FBQ0wsWUFBQSxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDakIsaUVBQWlFLENBQ2xFLENBQUM7QUFDRixZQUFBLE9BQU8sRUFBRSxDQUFDO0FBQ1osU0FBQyxDQUFDLENBQUM7UUFFTCxJQUFJQSxnQkFBTyxDQUFDLEdBQUcsQ0FBQzthQUNiLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQzthQUN2QyxPQUFPLENBQ04sbUtBQW1LLENBQ3BLO0FBQ0EsYUFBQSxXQUFXLENBQUMsQ0FBQyxFQUFFLEtBQUk7WUFDbEIsTUFBTSxFQUFFLEdBQUcsRUFBRTtpQkFDVixjQUFjLENBQUMscUJBQXFCLENBQUM7aUJBQ3JDLFFBQVEsQ0FBQyxPQUFPLENBQUMseUJBQTBCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZELGlCQUFBLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7QUFDeEIsZ0JBQUEsT0FBTyxDQUFDLHlCQUF5QixHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2hFLENBQUEsQ0FBQyxDQUFDO1lBQ0wsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTO0FBQ2xCLGdCQUFBLHlEQUF5RCxDQUFDO0FBRTVELFlBQUEsT0FBTyxFQUFFLENBQUM7QUFDWixTQUFDLENBQUMsQ0FBQztRQUVMLElBQUlBLGdCQUFPLENBQUMsR0FBRyxDQUFDO2FBQ2IsT0FBTyxDQUFDLDhCQUE4QixDQUFDO2FBQ3ZDLE9BQU8sQ0FDTixrS0FBa0ssQ0FDbks7QUFFQSxhQUFBLFdBQVcsQ0FBQyxDQUFDLEVBQUUsS0FBSTtZQUNsQixNQUFNLEVBQUUsR0FBRyxFQUFFO2lCQUNWLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQztpQkFDckMsUUFBUSxDQUFDLE9BQU8sQ0FBQyx5QkFBMEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkQsaUJBQUEsUUFBUSxDQUFDLENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtBQUN4QixnQkFBQSxPQUFPLENBQUMseUJBQXlCLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDaEUsQ0FBQSxDQUFDLENBQUM7WUFDTCxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVM7QUFDbEIsZ0JBQUEseURBQXlELENBQUM7QUFFNUQsWUFBQSxPQUFPLEVBQUUsQ0FBQztBQUNaLFNBQUMsQ0FBQyxDQUFDO0tBQ047QUFFTyxJQUFBLDJCQUEyQixDQUFDLFdBQXdCLEVBQUE7UUFDMUQsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBRTNELElBQUlBLGdCQUFPLENBQUMsV0FBVyxDQUFDO2FBQ3JCLE9BQU8sQ0FBQyxvREFBb0QsQ0FBQzthQUM3RCxPQUFPLENBQ04sMEhBQTBILENBQzNIO0FBQ0EsYUFBQSxXQUFXLENBQUMsQ0FBQyxFQUFFLEtBQUk7WUFDbEIsTUFBTSxFQUFFLEdBQUcsRUFBRTtpQkFDVixjQUFjLENBQUMsdUJBQXVCLENBQUM7QUFDdkMsaUJBQUEsUUFBUSxDQUNQLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGlDQUFpQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDbEU7QUFDQSxpQkFBQSxRQUFRLENBQUMsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO0FBQ3hCLGdCQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGlDQUFpQztvQkFDcEQsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0IsZ0JBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ2xDLENBQUEsQ0FBQyxDQUFDO1lBQ0wsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTO0FBQ2xCLGdCQUFBLHdEQUF3RCxDQUFDO0FBQzNELFlBQUEsT0FBTyxFQUFFLENBQUM7QUFDWixTQUFDLENBQUMsQ0FBQztLQUNOO0FBRU8sSUFBQSx1QkFBdUIsQ0FBQyxXQUF3QixFQUFBO1FBQ3RELFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLENBQUMsQ0FBQztRQUVqRSxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7QUFFM0QsUUFBQSxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEtBQ3BELEVBQUU7QUFDQyxhQUFBLFVBQVUsQ0FBQyxTQUFTLENBQVMsQ0FBQyxHQUFHLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDckUsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLDhCQUE4QixDQUFDO0FBQzdELGFBQUEsUUFBUSxDQUFDLENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtBQUN4QixZQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLDhCQUE4QjtBQUNqRCxnQkFBQSxLQUE0QixDQUFDO0FBQy9CLFlBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2xDLENBQUEsQ0FBQyxDQUNMLENBQUM7QUFDRixRQUFBLElBQUlBLGdCQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxLQUNqRSxFQUFFO0FBQ0MsYUFBQSxVQUFVLENBQUMsU0FBUyxDQUFTLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ3JFLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQztBQUNyRCxhQUFBLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7QUFDeEIsWUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0I7QUFDekMsZ0JBQUEsS0FBNEIsQ0FBQztBQUMvQixZQUFBLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNsQyxDQUFBLENBQUMsQ0FDTCxDQUFDO1FBQ0YsSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXLENBQUM7YUFDckIsT0FBTyxDQUFDLDhCQUE4QixDQUFDO0FBQ3ZDLGFBQUEsV0FBVyxDQUFDLENBQUMsRUFBRSxLQUNkLEVBQUU7QUFDQyxhQUFBLFVBQVUsQ0FBQyxTQUFTLENBQVMsQ0FBQyxHQUFHLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDckUsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO0FBQ3JELGFBQUEsUUFBUSxDQUFDLENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtBQUN4QixZQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHNCQUFzQjtBQUN6QyxnQkFBQSxLQUE0QixDQUFDO0FBQy9CLFlBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2xDLENBQUEsQ0FBQyxDQUNMLENBQUM7UUFDSixJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUNyQixPQUFPLENBQUMsa0NBQWtDLENBQUM7QUFDM0MsYUFBQSxXQUFXLENBQUMsQ0FBQyxFQUFFLEtBQ2QsRUFBRTtBQUNDLGFBQUEsVUFBVSxDQUFDLFNBQVMsQ0FBUyxDQUFDLEdBQUcsdUJBQXVCLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNyRSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7QUFDdkQsYUFBQSxRQUFRLENBQUMsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO0FBQ3hCLFlBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsd0JBQXdCO0FBQzNDLGdCQUFBLEtBQTRCLENBQUM7QUFDL0IsWUFBQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDbEMsQ0FBQSxDQUFDLENBQ0wsQ0FBQztLQUNMO0FBRU8sSUFBQSxlQUFlLENBQUMsV0FBd0IsRUFBQTtRQUM5QyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxnQ0FBZ0MsRUFBRSxDQUFDLENBQUM7UUFFdkUsSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXLENBQUM7YUFDckIsT0FBTyxDQUFDLGdFQUFnRSxDQUFDO2FBQ3pFLE9BQU8sQ0FDTiw0SEFBNEgsQ0FDN0g7QUFDQSxhQUFBLFdBQVcsQ0FBQyxDQUFDLEVBQUUsS0FBSTtZQUNsQixNQUFNLEVBQUUsR0FBRyxFQUFFO2lCQUNWLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQztBQUN2QyxpQkFBQSxRQUFRLENBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsaUNBQWlDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUNsRTtBQUNBLGlCQUFBLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7QUFDeEIsZ0JBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsaUNBQWlDO29CQUNwRCxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixnQkFBQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDbEMsQ0FBQSxDQUFDLENBQUM7WUFDTCxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVM7QUFDbEIsZ0JBQUEsd0RBQXdELENBQUM7QUFDM0QsWUFBQSxPQUFPLEVBQUUsQ0FBQztBQUNaLFNBQUMsQ0FBQyxDQUFDO0tBQ047QUFFTyxJQUFBLGdCQUFnQixDQUFDLFdBQXdCLEVBQUE7UUFDL0MsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU5QyxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUNyQixPQUFPLENBQUMseUNBQXlDLENBQUM7QUFDbEQsYUFBQSxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUk7QUFDaEIsWUFBQSxFQUFFLENBQUMsUUFBUSxDQUNULElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGdDQUFnQyxDQUN0RCxDQUFDLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7Z0JBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGdDQUFnQyxHQUFHLEtBQUssQ0FBQztBQUM5RCxnQkFBQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDbEMsQ0FBQSxDQUFDLENBQUM7QUFDTCxTQUFDLENBQUMsQ0FBQztLQUNOO0FBQ0Y7O0FDcHVCb0IsTUFBQSxvQkFBcUIsU0FBUUMsZUFBTSxDQUFBO0lBR2hELE1BQU0sR0FBQTs7QUFDVixZQUFBLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzFCLFlBQUEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLDhCQUE4QixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkIsQ0FBQSxDQUFBO0FBQUEsS0FBQTtJQUVELGNBQWMsR0FBQTtRQUNaLE1BQU0sU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxTQUFTO0FBQ04sYUFBQSxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7QUFDL0IsYUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzVFO0lBRUssWUFBWSxHQUFBOztBQUNoQixZQUFBLElBQUksQ0FBQyxRQUFRLEdBQVEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBQSxnQkFBZ0IsQ0FBSyxHQUFDLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFHLENBQUM7U0FDckUsQ0FBQSxDQUFBO0FBQUEsS0FBQTtJQUVLLFlBQVksR0FBQTs7WUFDaEIsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNwQyxDQUFBLENBQUE7QUFBQSxLQUFBO0FBQ0Y7Ozs7In0=
